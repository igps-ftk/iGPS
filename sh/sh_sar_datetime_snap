#!/bin/sh

# Name:
#   sh_sar_datetime_snap
#   

# Purpose:
#   

# Example:
#   

# Modifications:
#   

# Algorigthm:
#   

# Dependency:
#   


PROG=sh_sar_datetime_snap

timestamp=`date | sed -e "s/ /_/g" | sed -e "s/:/-/g"`

path_old=`pwd`

usage_of_it(){
  echo "[$PROG]HELP: ${PROG} "
  echo "[$PROG]HELP:   -f|-file INPUT_LIST_FILE"
  echo "[$PROG]HELP:   [-o|-ofile OUTPUT_FILE]"

  echo "[$PROG]HELP:   [-h|-help]"
  echo "[$PROG]HELP: e.g.,"
  echo "[$PROG]HELP:   ${PROG} "
}

if [ $# -lt 2 ]; then
  usage_of_it
  exit 1
fi


#temporary files used by this script
file_tmp_files=`pwd`/_tmp_${PROG}_${timestamp}_files

#command-line parameters
#file=_tmp_align_group
file=

master_date=

#file_unzip=_tmp_unzip
file_unzip=

#ofile=.tmp.pair
ofile=


while [ "$1" != "" ]; do
  case $1 in
    -f|-file)
      file=$2
      ;;
    -m|-master_date)
      master_date=$2
      ;;
    -u|-unzip_list)
      file_unzip=$2
      ;;
    -o|-ofile)
      ofile=$2
      ;;
    -h|-help|--help)
      usage_of_it
      exit 1
      ;;
    *)
      echo "[$PROG]ERROR: invalid option ($1)!!"
      usage_of_it
      exit 1
      ;;
  esac
  shift 2  
done


if [ ! -s $file ]; then
  echo "[$PROG]WARNING: input file not exist ($file)!!"
  exit 1
fi


if [ "$file_unzip" == "" ]; then
  file_unzip="${file}_unzip.txt"
  echo "[$PROG]info: no output unzip file given. Use default ($file_unzip)."
fi

if [ "$ofile" == "" ]; then
  ofile="${file}_snapped.txt"
  echo "[$PROG]info: no output file given. Use default ($ofile)."
fi
if [ -s $ofile ]; then
  echo "[$PROG]WARNING: output file exists and will be orverwritten ($ofile)!"
  \rm -f $ofile
fi

if [ "$master_date" == "" ]; then
  master_date=`grep '^ ' $file | head -1 | awk -F_ '{print substr($6,1,8)}'`
fi
echo "[$PROG]INFO: master date is $master_date"

echo $file_unzip
\rm -f $file_unzip
days=`grep -h '^ ' $file | awk -F_ '{print $6}' | awk -FT '{print $1}' | sort |uniq`
echo $days
for day in $days; do
  echo $day
  nf=`grep '^ ' -h $file | grep $day | wc -l` 
  #if [ $nf -ne 1 ]; then
  #  echo "[$PROG]ERROR: not enough files ($nf) for combining data of $day!!"
  #  #grep '^ ' -h $file | grep $day
  #  echo continue
  #fi
  echo "[$PROG]INFO: combining $nf frames for $day ..."
  grep '^ ' -h $file | grep $day |sort | awk '{print $0}' >> $file_unzip
  #tfiles=`grep '^ ' -h $file | grep $day |sort`
  #echo $tfiles
done

###grep -h '^ ' $file_unzip | awk -F_ '{print $6,$0}'| sort |uniq > $file_tmp_files
grep -h '^ ' $file_unzip | awk -F_ '{print $6,$0}'| sort |uniq |grep "$master_date" > $file_tmp_files
grep -h '^ ' $file_unzip | awk -F_ '{print $6,$0}'| sort |uniq |grep -v "$master_date" >> $file_tmp_files
times=`cat $file_tmp_files | awk '{print $1}'`
file_ids=`cat $file_tmp_files | awk '{print $2}' | awk -F. '{print $1}'`
echo "file_ids : $file_ids"
#exit

ntim=`echo $times | wc -w`
echo "# days: $ntim"
dyrs=
for time_i in $times; do
  year=`echo $time_i | awk '{print substr($1,1,4)}'`
  mon=`echo $time_i | awk '{print substr($1,5,2)}'`  
  day=`echo $time_i | awk '{print substr($1,7,2)}'`
  hr=`echo $time_i | awk '{print substr($1,10,2)}'`
  min=`echo $time_i | awk '{print substr($1,12,2)}'`
  sec=`echo $time_i | awk '{print substr($1,14,2)}'`
  #echo $time_i $year $mon $day $hr $min $sec
  dyr=`doy $year $mon $day $hr $min | tail -1 | awk '{print $3}'`
  dyrs="$dyrs $dyr"
done
echo "dyrs : $dyrs"


i=1
is_new=0
while [ $i -lt $ntim ]; do
  dyr1=`echo $dyrs | awk '{print $I}' I=$i`
  file_id1=`echo $file_ids | awk '{print $I}' I=$i`
  file_ids_i="$file_id1"
  j=`expr $i + 1`
  ni=0
  while [ $j -le $ntim ]; do  
    dyr2=`echo $dyrs | awk '{print $J}' J=$j`
    file_id2=`echo $file_ids | awk '{print $J}' J=$j`
    is_ok=`echo $dyr1 $dyr2  | awk '{if( sqrt(($2-$1)*($2-$1))<0.0027 ) {print 1}else{print 0}}'`
    if [ $is_ok -eq 1 ]; then  
      ##echo i j are  $i $j 
      file_ids_i="$file_ids_i $file_id2"
      ni=`expr $ni + 1`
    else
      echo $file_ids_i  >> $ofile
      break
    fi
    j=`expr $j + 1`
  done
  ##echo i ni are $i $ni
  i=`expr $i + $ni + 1`
  #ni=0 #??
done

if [ $ni -eq 0 ]; then
    file_ids_i=`echo $file_ids | awk '{print $I}' I=$i`
fi
echo $file_ids_i  >> $ofile
#echo $dyrs
#exit

echo "[$PROG]INFO: cleaning temporary files ..."
\rm -f $file_tmp_files

echo "[$PROG]INFO: results outputted to $ofile"
echo "[$PROG]INFO: done."
