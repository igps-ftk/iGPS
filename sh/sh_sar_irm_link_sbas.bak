#!/bin/sh

# Name:
#   sh_sar_irm_link_sbas
#

# Purpose:
#

# Example:
#

# Modifications:
#

# Algorigthm:
#

# Dependency:
#
. ${HOME}/.bashrc

PROG=sh_sar_irm_link_sbas

path_proc=/sar/proc_gmtsar/auto_grid
path_irm=/sar/proc_gmtsar/irm/by.frame

file_lock=$path_irm/_tmp_${PROG}.lock
if [ -s $file_lock ]; then
  echo "[]WARNING: session locked by $file_lock!"
  exit 1
fi

date > $file_lock
hostname >> $file_lock

timestamp=`date | sed -e 's/ /_/g' | sed -e 's/:/-/g'`
file1_tmp=_tmp_l1_${PROG}_${timestamp}
file2_tmp=_tmp_l2_${PROG}_${timestamp}

while [ "$1" != "" ]; do
  case $1 in
    *)
      echo "[$PROG]ERROR: invalid option ($1)!!"
      echo "[$PROG]Usage: ${PROG} "
      echo "[$PROG]Usage: e.g.,"
      echo "[$PROG]Usage: ${PROG} "
      exit 1
      ;;
  esac
  shift 2
done


oldpath=`pwd`

expts=`find $path_proc -maxdepth 1 -type d -name "[AD]???_????"|sort`
expts=`find $path_proc -maxdepth 1 -type d -name "A098_0127"|sort`
#echo $expts
for expt in $expts; do
  cd $oldpath
  #echo expt $expt
  expt_name=`basename $expt`
  Fs=`find $expt -maxdepth 1 -type d -name "F?"|sort`
  for F in $Fs; do
    echo F $F

    opath="$path_irm/$expt_name/`basename $F`"
    if [ -L $opath/sbas ]; then
      echo "[$PROG]INFO: already linked."
      continue
    fi

    path_sbas=`find $F -maxdepth 1 -type d -name "sbas.2.0.0001.0036*" | sort | tail -1`
    if [ "$path_sbas" != "" ]; then
      nintf=`echo $path_sbas | awk -F. '{print $9+0}'`
      echo nintf $nintf
      if [ $nintf -le 100 ]; then
        echo "[$PROG]WARNING: too few interferograms ($nintf < 100)!"
        path_sbas=
      else
        n_scene=`cat $path_sbas/scene.tab | wc -l`
        l2=`echo $n_scene | awk '{print $1-1}'`
        sed -n "1,${l2}p" $path_sbas/scene.tab > $file1_tmp
        sed -n "2,${n_scene}p" $path_sbas/scene.tab > $file2_tmp
        t_interval_max=`paste $file1_tmp $file2_tmp | awk '{print $4-$2}' | max | awk '{print int($1)}'`

        #another method
        t_interval_max2=`cat $path_sbas/scene.tab | awk '{print $2}' | awk 'NR==1{old=$1;next}{print $1-old; old=$1}' | max | awk '{print int($1)}'`
        t_interval_max3=`cat $path_sbas/scene.tab | awk '{print $2}' | awk 'NR==1{old=$1;next}{for(i=1;i<=NF;i++){print $i-old;old=$i}}'`

        echo n_scene t_interval_max $n_scene $t_interval_max $t_interval_max2

        if [ $t_interval_max -gt 36 ]; then
          echo "[$PROG]WARNING: scene gap too large ($t_interval_max > 36)!"
          path_sbas=
        fi
        \rm -f $file1_tmp $file2_tmp
      fi
    fi
    #continue

    if [ "$path_sbas" == "" -o ! -s $path_sbas/vel_mask_ll.grd ]; then
      path_sbas=`find $F -maxdepth 1 -type d -name "sbas.2.0.0001.0072*" | sort | tail -1`
      if [ "$path_sbas" != "" ]; then
        nintf=`echo $path_sbas | awk -F. '{print $9+0}'`
        echo nintf $nintf
        if [ $nintf -le 150 ]; then
          echo "[$PROG]WARNING: too few interferograms ($nintf < 150)!"
          path_sbas=
        else
          n_scene=`cat $path_sbas/scene.tab | wc -l`
          l2=`echo $n_scene | awk '{print $1-1}'`
          sed -n "1,${l2}p" $path_sbas/scene.tab > $file1_tmp
          sed -n "2,${n_scene}p" $path_sbas/scene.tab > $file2_tmp
          t_interval_max=`paste $file1_tmp $file2_tmp | awk '{print $4-$2}' | max | awk '{print int($1)}'`
          echo n_scene t_interval_max $n_scene $t_interval_max
          if [ $t_interval_max -gt 72 ]; then
            echo "[$PROG]WARNING: scene gap too large ($t_interval_max > 72)!"
            path_sbas=
          fi
          \rm -f $file1_tmp $file2_tmp
        fi
      fi
    fi


    if [ "$path_sbas" == "" -o ! -s $path_sbas/vel_mask_ll.grd ]; then
      path_sbas=`find $F -maxdepth 1 -type d -name "sbas.2.0.0001.0060*" | sort | tail -1`
      if [ "$path_sbas" != "" ]; then
        nintf=`echo $path_sbas | awk -F. '{print $9+0}'`
        echo nintf $nintf
        if [ $nintf -le 120 ]; then
          echo "[$PROG]WARNING: too few interferograms ($nintf < 120)!"
          path_sbas=
        else
          n_scene=`cat $path_sbas/scene.tab | wc -l`
          l2=`echo $n_scene | awk '{print $1-1}'`
          sed -n "1,${l2}p" $path_sbas/scene.tab > $file1_tmp
          sed -n "2,${n_scene}p" $path_sbas/scene.tab > $file2_tmp
          t_interval_max=`paste $file1_tmp $file2_tmp | awk '{print $4-$2}' | max | awk '{print int($1)}'`
          echo n_scene t_interval_max $n_scene $t_interval_max
          if [ $t_interval_max -gt 60 ]; then
            echo "[$PROG]WARNING: scene gap too large ($t_interval_max > 60)!"
            path_sbas=
          fi
          \rm -f $file1_tmp $file2_tmp
        fi
      fi
    fi



    if [ "$path_sbas" == "" -o ! -s $path_sbas/vel_mask_ll.grd ]; then
      path_sbas=`find $F -maxdepth 1 -type d -name "sbas.2.0.0001.0120*" | sort | tail -1`
      if [ "$path_sbas" != "" ]; then
        nintf=`echo $path_sbas | awk -F. '{print $9+0}'`
        echo nintf $nintf
        if [ $nintf -le 200 ]; then
          echo "[$PROG]WARNING: too few interferograms ($nintf < 200)!"
          path_sbas=
        else
          n_scene=`cat $path_sbas/scene.tab | wc -l`
          l2=`echo $n_scene | awk '{print $1-1}'`
          sed -n "1,${l2}p" $path_sbas/scene.tab > $file1_tmp
          sed -n "2,${n_scene}p" $path_sbas/scene.tab > $file2_tmp
          t_interval_max=`paste $file1_tmp $file2_tmp | awk '{print $4-$2}' | max | awk '{print int($1)}'`
          echo n_scene t_interval_max $n_scene $t_interval_max
          if [ $t_interval_max -gt 120 ]; then
            echo "[$PROG]WARNING: scene gap too large ($t_interval_max > 120)!"
            path_sbas=
          fi
          \rm -f $file1_tmp $file2_tmp
        fi
      fi
    fi


    if [ "$path_sbas" == "" -o ! -s $path_sbas/vel_mask_ll.grd ]; then
      path_sbas=`find $F -maxdepth 1 -type d -name "sbas.*" | sort | tail -1`
      if [ "$path_sbas" != "" ]; then
        nintf=`echo $path_sbas | awk -F. '{print $9+0}'`
        echo nintf $nintf
        if [ $nintf -le 200 ]; then
          echo "[$PROG]WARNING: too few interferograms ($nintf < 200)!"
          path_sbas=
        else
          n_scene=`cat $path_sbas/scene.tab | wc -l`
          l2=`echo $n_scene | awk '{print $1-1}'`
          sed -n "1,${l2}p" $path_sbas/scene.tab > $file1_tmp
          sed -n "2,${n_scene}p" $path_sbas/scene.tab > $file2_tmp
          t_interval_max=`paste $file1_tmp $file2_tmp | awk '{print $4-$2}' | max | awk '{print int($1)}'`
          echo n_scene t_interval_max $n_scene $t_interval_max
          if [ $t_interval_max -gt 120 ]; then
            echo "[$PROG]WARNING: scene gap too large ($t_interval_max > 120)!"
            path_sbas=
          fi
          \rm -f $file1_tmp $file2_tmp
        fi
      fi
    fi
#
#
    if [ "$path_sbas" == "" -o ! -s $path_sbas/vel_mask_ll.grd ]; then
      continue
    fi

    if [ ! -d $opath ]; then
      echo "mkdir -p $opath"
      echo "mkdir -p $opath" | sh
    fi
    if [ ! -L $opath/sbas ]; then
      echo "ln -s $path_sbas $opath/sbas"
      echo "ln -s $path_sbas $opath/sbas" | sh
    else
      echo "[$PROG]WARNING: output already exist ($opath/sbas to `ls -l $opath/sbas`)!"
    fi
  done

  #exit
done

\rm -rf $file_lock
