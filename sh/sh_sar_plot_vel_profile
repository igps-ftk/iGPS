#!/bin/bash

# Name:
#   sh_sar_plot_vel_profile
#

# Purpose:
#

# Example:
#

# Modifications:
#

# Algorithm:
#

# Dependency:
#

PROG=sh_sar_plot_vel_profile


timestamp=`date | sed -e "s/ /_/g" | sed -e "s/:/-/g"`

path_old=`pwd`

usage_of_it(){
cat <<eob
${PROG}
|_Plot velocity profile generated by sar_los_profile_auto.
|+
  -p.xxx/profile_???_vel.psxy  
  -sar_intf_tab_2_psxy
|<
  [-p|-path PROFILE_PATH]
    default: the first p.xxx directory (if present)
  [-o|-opath OUTPUT_PATH]
    default: pp.xxx/
  [-n|-profile PROFILE_IDS]
    default: 0 (all)
  [-dt|-data_type Velocity|Dislacement]
  [-di|-data_index DI]
    DI Variable
     5 VNor           : velocity along the profile (normal to the fault trace); 
                        positive-north (mm/yr)
     7 VPar           : velocity tangent to the profile (parallel to the fault 
                        trace); positive-90deg-clockwise from v_along direction
                        (mm/yr)
     9 VUp            : vertical velocity; positive-up (mm/yr)
    14 VLOS           : InSAR LOS velocity (mm/yr)
    16 VE             : east velocity of location; positive-east (mm/yr)
    17 VN             : north velocity of location; positive-north (mm/yr)
  [-aa|-auto_axis n|y]
  [-R|-Rp R_OF_TIME_SERIES_PLOT]
    u - -R-600/600/-20/20
    ...
  [-g|-gnss|-gps|-gnss_file|-gnss_vel] GNSS_HORIZONTAL_VELICITY_PSVELO
    default: \${iGPS}/tables/wang_shen_2019JB018774_Table.S4S5.psvelo
|>
  -pp.xxx/profile_???_vel.jpg
|e.g.,
  $PROG
  $PROG -p p.fa_atf -o pp.fa_atf_autoaxis -auto_axis y
  $PROG -n 3,4,8,103
(c)iGPS (https://github.com/igps-ftk/)
eob
}


if [ "$GMT_pub" = "" ]; then
    #echo -e "[$PROG]\033[1;33;41mERROR\033[0m:GMT_pub variable not set!!"
    #exit 1
    echo "[$PROG]\033[1;33;44mWARNING\033[0m:No DEM map avaiable!"
fi



#(1)
echo "[$PROG]INFO: (1) change the DEM path if necessary"
path_dem=${GMT_pub}/dem.gmt/ETOPO1_Ice_g_gmt4

#(2)
echo "[$PROG]INFO: (2) the profile files directory (profile_???_vel.psxy files generated by iGPS)"
#profiles_path=`pwd`/p #default #change it with option "-path input_path". Must exist!
profiles_path= #default search the first profile path (p.*) in current directory

#profiles to plot
#0 - plot all profile
#x1,x2,x3 - only plot the x1 x2 and x3 profiles
pis=0

#default output path
opath=  #change it with command option "-opath output_path". If not exist, it will be created if not exist.


path_old=`pwd`

data_type=Velocity  #Velocity or Displacement
data_index=14 #InSAR LOS 

auto_axis=n #fix(y) or scale (n) the X/Y axis ranges of the profile plot
RP=
grdref=n

is_icon=y
icon_font_size=7
icon_Y=.9
icon_w=2

is_legend_gps=y
is_legend_microseismicity=n
is_legend_current_earthquake=n
is_legend_gcmt=y
is_legend_north_arrow=n
is_legend_fault=y
is_legend_profile=y

is_legend_defo=y

is_plot_intf=y

is_update_rect_by_profile=y

map_title_a='Location'
#map_title_a='(a). Overview Map'
map_title_a='Sentinel-1 InSAR'
map_title_font_size=18
is_map_title=y

profile_title='(b). InSAR LOS $data_type of profile_${n}'
profile_title='(b). Profile'
profile_title=' '

profile_title_x='Distance from Fault (km)'
profile_title_x='@%2%x@-f@-@%% (km)'
profile_title_s='@%2%x@-f@-@%% (km)'

plot_ids=
plot_id_a='(a)'
plot_id_b='(b)'

plot_size_ax=7
plot_size_by=5.5

disp_scale_x=3.5
disp_scale_length=1.5
disp_scale_height=.1

lbl_font_size=12

lbl_sat_a="Satellite@+ (Ascending)@+"
lbl_sat_a="@%2%S1@-a@-@%%"
lbl_sat_d="@%2%S1@-d@-@%%"

lbl_profile="profile"
lbl_profile="@%2%p@%%@%6%@-n@-@%%"

lbl_fault="@%2%fault@%%"
lbl_fault="@%2%f@%%"

lbl_slip_rate="strike-slip rate (LOS direction)"
lbl_slip_rate="@%2%S@%%@-s-s@-"

lbl_locking_depth="locking depth"
lbl_locking_depth="@%2%D@%%"

lbl_fault_trace_shift="fault trace shift"
lbl_fault_trace_shift="@%12%\147@%%"

Rp=-R-250/250/-29/29

#for (a). location map
Ro="-R70/115/20/50"
#Ro=-R85/92/29/34
Jo=-JL-130/40/35/60/3i
Jo=-JPoly/85/35/2i
Jo=1.2

plot_intf_X=5
plot_intf_JX=2
plot_intf_JY=1.3

Ri=
BP=

mdl_type= #far-field/fault_name/near-field/...

file_gnss=${iGPS}/tables/wang_shen_2019JB018774_Table.S4S5.psvelo

opath_cmt=

while [ "$1" != "" ]; do
  case $1 in
    -p|-path)
        if [ ! -d $2 ]; then
            echo -e "[$PROG]\033[1;33;41mERROR\033[0m: input directory not exist ($2) !!"
            exit 1
        fi
        cd $2
        profiles_path=`pwd`
        cd $path_old
        ;;
    -o|-opath)
        #if [ ! -d $2 ]; then
        #    echo "[$PROG]INFO: output directory not exist ($2) ! Created."
        #    mkdir -p $2
        #    #exit 1
        #fi
        #path_old=`pwd`
        #cd $2
        #opath=`pwd`
        #cd $path_old
        opath=$2
        ;;
    -n|-profile)
        pis=`echo $2 | sed -e 's/,/ /g'`
        ;;
    -dt|-data_type)
        data_type=$2
        ;;
    -di|-data_index|-data_column)
        data_index=$2
        ;;
    -aa|-auto_axis)
        auto_axis=$2
        opath_cmt='autoAxis'
        ;;
    -R|-Rp)
        if [ "$2" == "u" ]; then
          RP=-R-600/600/-20/20
        else
          RP=$2
        fi
        opath_cmt='userAxis'
        ;;
    #-r|-rt|-r_ts|-r_timeseries)
    #    Ri=$2
    #    ;;
    -B)
        BP=$2
        ;;
    -grdref)
        grdref=$2
        ;;
    -icon)
        is_icon=$2
        ;;
    -intf)
        is_plot_intf=$2
        ;;
    -maptitle)
        is_map_title=$2
        ;;
    -ids)
        plot_ids=$2
        ;;
    -mapsize)
        plot_size_ax=$2
        plot_size_by=`echo $2 | awk '{print $1*5.5/7}'`
        lbl_font_size=`echo $2 | awk '{print 12*$1/5.5}'`
        disp_scale_length=`echo $2 $disp_scale_length | awk '{print $2*$1/5.5}'`
        disp_scale_x=`echo $2 $disp_scale_length | awk '{print 0.5*($1)-0.5*$2+0.95*$1/7}'`
        disp_scale_height=`echo $2 $disp_scale_height | awk '{print $2*$1/5.5}'`
        map_title_font_size=`echo $2 | awk '{print 18*$1/7}'`
        Jo=`echo $2 $Jo | awk '{print $2*$1/7}'`
        plot_intf_X=`echo $2 $plot_intf_X | awk '{print $2*$1/7}'`
        plot_intf_JX=`echo $2 $plot_intf_JX | awk '{print $2*$1/7}'`
        plot_intf_JY=`echo $2 $plot_intf_JY | awk '{print $2*$1/7}'`
        icon_font_size=`echo $2 $icon_font_size | awk '{print $2*$1/7}'`
        icon_Y=`echo $2 $icon_Y | awk '{print $2*$1/7}'`
        icon_w=`echo $2 $icon_w | awk '{print $2*$1/7}'`
        ;;
    -mt|-mdl_type)
      mdl_type=$2
      ;;
    -g|-gnss|-gnss_file|-gnss_vel)
      file_gnss=$2
      ;;

    -h|-help|--help)
      usage_of_it
      exit 1
      ;;
    *)
        echo -e "[$PROG]\033[1;33;41mERROR\033[0m: invalid option ($1)!!"
        echo "[$PROG]Usage: ${PROG} [ -path IN ] [ -opath OUT ] [ -profile 0|n1,n2,n3 ]"
        echo "[$PROG]Usage: e.g.,"
        echo "[$PROG]Usage: ${PROG} -path p.jiali -opath pp.jiali "
        exit 1
        ;;
  esac

  shift 2
done


if [ "$profiles_path" == "" ]; then
  #echo path $path
  profiles_path=`find $path_old -maxdepth 1 -type d -name "p.*"|sort|head -1`
  if [ "$profiles_path" == "" ]; then
    echo -e "[$PROG]\033[1;33;41mERROR\033[0m: no input profiles path given!!"
    exit 1
  fi
fi
echo "profiles path: $profiles_path"



if [ "$opath" == "" ]; then
  tmp1="${profiles_path}/1.txt"
  tmp2=`dirname $tmp1`
  tmp3=`basename $tmp2`
  opath="p${tmp3}"
fi
if [ "$opath_cmt" != "" ]; then
  opath="${opath}_${opath_cmt}"
fi
#echo opath is $opath
#exit
echo "[$PROG]INFO: output to $opath"
mkdir -p $opath

if [ ! -d $profiles_path ]; then
    echo -e "[$PROG]\033[1;33;41mERROR\033[0m: profile path not exist ($profiles_path)!!"
    exit 1
fi

file_profile_gnss_merge=_tmp_gnss_los
path_profiles_gnss="`dirname $profiles_path`/pg.`basename $profiles_path | awk '{print substr($1,3)}'`"
if [ -d $path_profiles_gnss ]; then
  files_profiles_gnss=`find $path_profiles_gnss -maxdepth 1 -type f -name "profile_???_vel.psxy" | sort`
  if [ "$files_profiles_gnss" != "" ]; then
    grep -h '^ ' $files_profiles_gnss | sort | uniq | awk '{print $11,$12,$13}' > $opath/$file_profile_gnss_merge
    grep -h '^ ' $files_profiles_gnss | sort | uniq | awk '{print $9,$10}' > $opath/_tmp_gnss_ll
    wc -l $opath/$file_profile_gnss_merge $opath/_tmp_gnss_ll
  else
    echo "[$PROG]INFO: NO GNSS profile files in $path_profiles_gnss."
  fi
else
  echo "[$PROG]INFO: GNSS profile path ($path_profiles_gnss) NOT exist."
fi
#exit


#pis=51
pwd
if [ "$pis" = "0" ]; then
    echo "[$PROG]INFO: searching profiles ..."
    np=`ls ${profiles_path}/profile_???_vel.psxy | wc -l`
    pis=`ls ${profiles_path}/profile_???_vel.psxy |awk -F\/ '{print substr($NF,9,3)}'`
    pis=`echo $pis` #`echo $pis| awk '{for(i=1;i<=NR;i++){print $i}}'`
else
    np=`echo $pis | awk '{print NF}'`
fi
echo "[$PROG]INFO: $np plots to plot: $pis"
#exit

echo "RP $RP"

if [ "$is_map_title" == "n" ]; then
  map_title_a=
fi

if [ "$plot_ids" != "" ]; then
  plot_id_a="(`echo $plot_ids | sed -e 's/,/ /g' | awk '{print $1}'`)"
  plot_id_b="(`echo $plot_ids | sed -e 's/,/ /g' | awk '{print $2}'`)"
fi


if [ "$data_type" = "Velocity" ]; then
  if [ "$grdref" == "n" ]; then
    grdfile=../vel_ll.grd
    grdfile=../vel_mask_ll.grd
    grdfile=${profiles_path}/../vel_mask_ll3.grd
  else
    grdfile=${profiles_path}/../vel_mask_ll3_ref.grd  
  fi
    echo "[$PROG]INFO:InSAR rate map file is $grdfile"
    #
    vd_unit='mm/yr'    
else
    grdfile=${profiles_path}/../los_ll3.grd
    echo "[$PROG]INFO:InSAR displacement map file is $grdfile"
    #
    vd_unit='mm'
fi

profile_title_y="@%2%`echo $data_type | awk '{print substr($1,1,1)}'`@%%@-LOS@- ($vd_unit)"
    
tmp=`dirname $profiles_path/test.txt`
tmp2=`basename $tmp`
#fa_name=`echo $tmp2 | awk -F. '{print $2}'`
fa_name=`echo $tmp2 | awk '{print substr($0,3)}'`

profiles_path_gps=${profiles_path}/../pg.${fa_name}
echo profiles_path_gps $profiles_path_gps
#exit

#(3)
echo "[$PROG]INFO:(3) set the plot range for location map"
#X_MAX=92
#Y_MAX=40.5
#X_MIN=87
#Y_MIN=35.5
#get map range from the insar rate map
xmin=`gmt grdinfo -C -I.5 $grdfile | awk '{print $2}'`
xmax=`gmt grdinfo -C -I.5 $grdfile | awk '{print $3}'`
ymin=`gmt grdinfo -C -I.5 $grdfile | awk '{print $4}'`
ymax=`gmt grdinfo -C -I.5 $grdfile | awk '{print $5}'`

if [ "$is_update_rect_by_profile" == "y" ]; then
  gmt grdinfo -C -I.5 $grdfile | awk '{print $2,$4,"\n",$3,$5}' > _tmp_rect
  file_profile="${profiles_path}/profile_`echo $pis | awk '{printf("%03d",$1)}'`_vel.psxy"
  grep ' PSXY_PROFILE' $file_profile | awk '{print $3,$4}' | awk '{if($1<0){print $1+360,$2}else{print $1,$2}}'>> _tmp_rect
  cat _tmp_rect
  
  xmin=`gmt gmtinfo -C -I.5 _tmp_rect | awk '{print $1}'`
  xmax=`gmt gmtinfo -C -I.5 _tmp_rect | awk '{print $2}'`
  ymin=`gmt gmtinfo -C -I.5 _tmp_rect | awk '{print $3}'`
  ymax=`gmt gmtinfo -C -I.5 _tmp_rect | awk '{print $4}'`
  #exit
fi

echo "Geographical range from displacement grid & profile files ($grdfile, $file_profile)  :"
echo "[$PROG]INFO:  $xmin $xmax $ymin $ymax"
xspan=`echo $xmin $xmax $ymin $ymax| awk '{if( (($4-$3)/($2-$1)) > 5/6 ){ print ($4-$3)*6/5}else{print $2-$1}}'`
echo xspan $xspan
cd $opath
#exit



#X_MAX=`echo $xmax | awk '{print $1+.1}'`
#Y_MAX=`echo $ymax | awk '{print $1+.1}'`
X_MIN=`echo $xmin $xmax $xspan | awk '{print ($1+$2)/2-$3/2}'`
X_MAX=`echo $X_MIN $xspan | awk '{print $1+$2}'`

Y_MIN=`echo $ymin | awk '{print $1-.0}'`
Y_MAX=`echo $Y_MIN $xspan| awk '{print $1+$2*5/6}'`


sX=`echo $X_MIN $X_MAX 20 | awk '{print ($2-$1)/$3}'`
sY=`echo $Y_MIN $Y_MAX 20 | awk '{print ($2-$1)/$3}'`

R=-R${X_MIN}/${X_MAX}/${Y_MIN}/${Y_MAX}
echo "[$PROG]INFO: range of overview map is $R"
B=-B1f1g2/1f1g2
#exit


echo "[$PROG]INFO: create colormap for InSAR LOS rate map"
colortable=no_green
gmt makecpt -C${colortable} -T-10/10/.001 -Z -I > my.cpt

echo "[$PROG]INFO: create colormap for DEM"
#dem colormap
colortable=rainbow
colortable=
#colortable=seafloor
colortable=globe
#colortable=gebco
#colortable=etopo1
#colortable=dem3
colortable=gray
#colortable=relief
#colortable=cyclic
#colortable=panoply
#colortable=sealand
#colortable=topo
gmt makecpt -C${colortable} -T-5500/1800/5 -Z > mytopo.cpt
#for global overview map
gmt makecpt -C${colortable} -T-7000/7800/10 -Z > mytopo2.cpt

#dem_file_overview=${GMT_pub}/dem.gmt/ETOPO1_Ice_g_gmt4_3min/ETOPO1_Ice_g_gmt4_3min.grd
dem_file_overview=${GMT_pub}/dem.gmt/ETOPO1_Ice_g_gmt4/ETOPO1_Ice_g_gmt4.grd
#dem_file_overview=${GMT_pub}/dem.gmt/envi.dem.min/envi.grd

#search DEM files
files_dem=`find $path_dem -name "*.grd"`

echo "[$PROG]INFO: loop for each profile ..."
for n in $pis; do
    nold=$n
    n=`echo $n | awk '{printf("%03d",$1)}'`

    if [ "$mdl_type" == "" ]; then
      ofile=vel_profile_${n}.ps
    else
      ofile=vel_profile_${n}_${mdl_type}.ps
    fi
    echo "[$PROG]INFO: output to $ofile"
    gmt gmtset PS_MEDIA = a0
    gmt gmtset FONT_TITLE = ${map_title_font_size}p
    gmt gmtset FONT_LABEL         = 12p
    gmt gmtset FONT_ANNOT_PRIMARY = 9p
    gmt gmtset MAP_FRAME_PEN               = .5p
    gmt gmtset MAP_FRAME_WIDTH             = 0.1c
    gmt gmtset MAP_TICK_LENGTH = .1c
    gmt gmtset MAP_TITLE_OFFSET = .1051c
    ##gmt gmtset ANNOT_FONT_SIZE_PRIMARY = 11p
    ##gmt gmtset HEADER_FONT_SIZE        = 16p
    ##gmt gmtset LABEL_FONT_SIZE         = 14p
    ##gmt gmtset PAPER_MEDIA             = a0
    ##gmt gmtset LABEL_OFFSET            = 0.2c
    gmt gmtset MAP_FRAME_TYPE                  = plain



    #first, plot DEM on the location map
    if [ "$files_dem" != "" ]; then
      fir=1
      for file_dem in $files_dem; do
        tfile=`basename $file_dem`-${fir}
        if [ ! -s $tfile ]; then
            gmt grdclip $file_dem  -G${tfile} $R -Sb-9999/NaN #
            gmt grdgradient $tfile -A50  -Ne.316 -Gshaded.grd
        fi
        if [ $fir -eq 1 ]; then
            zmin=`gmt grdinfo -C $tfile | awk '{print $6-6000}'`
            zmax=`gmt grdinfo -C $tfile | awk '{print $7+10}'`
            #echo "gmt makecpt -C${colortable} -T${zmin}/${zmax}/1 -Z"
            gmt makecpt -C${colortable} -T${zmin}/${zmax}/1 -Z > mytopo3.cpt
            echo "gmt grdimage $file_dem -Cmytopo3.cpt $R -JQ${plot_size_ax}i -Y8i -Ishaded.grd    ${B}::/10f5:::.${map_title_a}:WSEN -K -P   > ${ofile}"
            gmt grdimage $file_dem -Cmytopo3.cpt $R -JQ${plot_size_ax}i -Y8i -Ishaded.grd    ${B}:"":/10f5:""::."${map_title_a}":WSEN -K -P   > ${ofile}
            fir=0
        else
            gmt grdimage $file_dem -Cmytopo3.cpt -R -J    -K -O >> ${ofile}
        fi
      done
    else #no DEM available
      echo "gmt pscoast $R -JQ${plot_size_ax}i -Y8i -Df -I1 -Glightgray ${B}::/10f5:::.${map_title_a}:WSEN -K -P   > ${ofile}"
      gmt pscoast $R -JQ${plot_size_ax}i -Y8i -Df -I1 -Glightgray ${B}:"":/10f5:""::."${map_title_a}":WSEN -K -P   > ${ofile}
            
    fi
    
    echo "[$PROG]INFO: adding rivers to the location map"
    gmt pscoast  -R -Dh -I0 -J -Swhite -Wwhite   -K -O  >> ${ofile}

    #(4)
    echo "[$PROG]INFO: (4) adding insar los rate image to the location map"
    gmt grdimage  -R -Cmy.cpt -J -O -K $grdfile -Q >> $ofile

    echo "[$PROG]INFO: adding earthquake"
    
    #plot USGS     
    file_usgs_new=${profiles_path}/usgs_new.csv
    if [ -s $file_usgs_new ]; then
      cat $file_usgs_new | awk -F, '{print $3,$2,$5*.05}' > _tmp_usgs_new
      gmt psxy -R -J _tmp_usgs_new -Sc -W1p -Gorange@50 -O -K -H1 >> $ofile
    fi
    
    #echo "Plot GCMT historical earthquakes ..."
    #earthquakes
    #file=../quakes.in.China/global.cmt.catalog.mw6.psmeca.asof.2007212
    #file=../quakes.in.China/global.cmt.catalog.mw5.psmeca
    #file=${GMT_pub}/quake/gcmt/tibet.M6+.psmeca
    #file=${GMT_pub}/quake/gcmt/china.psmeca
    #file=${GMT_pub}/quake/gcmt/psmeca/gcmt.psmeca
    file=${iGPS}/tables/gcmt.psmeca
    #file=${GMT_pub}/quake/gcmt/china.psmeca.m6
    #file=yigong.gcmt
    #file=${GMT_pub}/quake/gcmt/tianshan.psmeca
    grep -v '^ ' $file  | sed '/^$/d' > .tmp.gcmt
    #grep '^[1-9]' $file |grep -v 'lat' | sed '/^$/d' | awk '{if($4!=0){print $0}}' > .tmp.gcmt
    gmt psmeca -R -J .tmp.gcmt -Sm.33/-1 -W -Gdarkgray -O -K >> $ofile
    
    
    #Plot GCMT latest earthquakes
    file_gcmt_new=${profiles_path}/gcmt_new.txt
    if [ -s $file_gcmt_new ]; then
      gmt psmeca -R -J $file_gcmt_new -Sm.33/-1 -W -Gred -O -K >> $ofile
    fi


#    gmt psxy -R -J -O -K <<eob -N -Sa -W.25p,red -Gred >> $ofile
#101.26 37.770 0.6
#eob

    ##micro-seismicity
    #file=/cygdrive/d/ICD/projects/nsfc/2011/annual.report.2
    #file=${GMT_pub}/quake/xqc/pre-1970.txt
    #cat $file | awk '{print $1,$2,$3*.1}' > .tmp
    #file=${GMT_pub}/quake/xqc/post-1970.txt
    #cat $file | awk '{print $1,$2,$3*.1}' >> .tmp
    ##gmt psxy -R -J -h1 -O -K .tmp -Sc -W.35p,purple >> $ofile

    echo "[$PROG]INFO: adding fault lines"
    ##file=./fault/fault_gmt psxy.txt
    ##gmt psxy -R -J -O -K -W.5p,blue -m $file >> $ofile
    ##file=./tibet-fault.txt
    #file=../../faultline/mtab.mif.shp/yarlung-fixed.psxy
    ##gmt psxy -R -J -O -K -W.5p,black -Sf1i/.25+r+s+o.5i -m $file >> $ofile

    if [ -d ${iGPS}/tables/HimaTibetMap-master/gmt/ ]; then
      echo "[$PROG]INFO: dextral faults"
      file=${iGPS}/tables/HimaTibetMap-master/gmt/dextral.gmt
      gmt psxy -R -J -O -Sf1i/.25+r+s+o.5i -W.25p,blue -K  $file >> $ofile
      echo "[$PROG]INFO: sinistral faults"
      file=${iGPS}/tables/HimaTibetMap-master/gmt/sinistral.gmt
      gmt psxy -R -J -O -Sf2i/.25+l+s+o.5i -W.25p,red -K  $file >> $ofile
      echo "[$PROG]INFO: normal faults"
      file=${iGPS}/tables/HimaTibetMap-master/gmt/normal.gmt
      #gmt psxy -R -J -O -W.5p,black,- -K  $file >> $ofile
      gmt psxy -R -J -O -K -Sf.51/.0512+l+b -Gwhite -W.25p,black $file >> $ofile
      file=${iGPS}/tables/HimaTibetMap-master/gmt/thrust.gmt
      #gmt psxy -R -J -O -W.5p,black,- -K  $file >> $ofile
      gmt psxy -R -J -O -K -Sf.51/.0512+l+t -Gblack -W.25p,black $file >> $ofile
    fi
    #file=../gmt.plot/.tmp
    #cat $file | awk '{print $2,$3,$6,$10,$7,$11,$12,substr($1,1,4)}' > .tmp

    echo "[$PROG]INFO: adding gps velocity map"
    #file=vel.lhasa.2015oct
    #file=${GMT_pub}/gps/vel.lhasa.2016jul
    #file_gnss=${iGPS}/tables/wang_shen_2019JB018774_Table.S4S5.psvelo
    if [ -s $file_gnss ]; then
      #file=../../tibet.velrot/vel.tibet_cgps_sgps
      #*Station   Longitude   Latitude Ve_init Ve_incr    Ve     dVe   Vn_init Vn_incr    Vn     dVn   Cen
      # AIRA_GPS  130.5996   31.8241   -19.3    15.5   -34.8     0.2    23.2    27.6    -4.4     0.0
      ##grep "^ " $file | awk '{print $2,$3,$6,$10,$7,$7,0.0,tolower(substr($1,1,4))}' > .tmp.gps
      #grep "^ " $file_gnss | awk '{if($11<2&&$7<2){print $2,$3,$6,$10,$7,$11,$12,tolower(substr($1,1,4))}}' > .tmp.gps
  
      #file=${GMT_pub}/gps/Supp_Table_S1.psvelo
      cat $file_gnss | shuf | head -100 |sort > .tmp.gps
  
      #file=${GMT_pub}/gps/velo.psvelo
      #cat $file > .tmp.gps
  
      #   113.21    40.79 2.99667 -1.09333 0.13 0.17 A006
      #file=${GMT_pub}/gps/pingjun.vel
      #cat $file | awk '{print $1,$2,$3,$4,$5,$6,0,$7}' > .tmp.gps
  
      #file=${GMT_pub}/gps/wang.min.jgr2020/Table.S4
      #grep '^ ' $file | awk '{print $2,$3,$5,$8,$6,$9,$10,$1}' > .tmp.gps
  
      gmt psxy -R -J -Sc0.12c -W.5p -Gwhite .tmp.gps -O -K -h1 >> $ofile
      gmt psvelo -R -J -W0.35p,navy -Glightblue -Se.1/0.95/0   -L -A6p+e  .tmp.gps -O -K>> $ofile
    fi
    

if [ "$is_legend_defo" == "y" ]; then
    #echo "[$PROG]INFO: adding scale bar for InSAR rate "
    #gmt psscale -D3.2i/-.4i/4c/.23ch  -O -Cmy.cpt -K  -B5f1::/:"${profile_title_y}":  >> $ofile
    gmt psscale -D${disp_scale_x}i/.4i/${disp_scale_length}i/${disp_scale_height}ih    -O -Cmy.cpt -K  -B5f1::/:"${profile_title_y}":  >> $ofile
fi


    xw=`echo $X_MIN $sX | awk '{print $1+$2}'`
    xe=`echo $X_MAX $sX | awk '{print $1-$2}'`
    yw=`echo $Y_MAX $sY | awk '{print $1-$2}'`
    ye=$yw
    gmt pstext -R -J <<eob -O -K -F+f16p+a0+jCM -Gwhite>>  $ofile
$xw $yw $plot_id_a
#$xe $ye EAST
eob


    echo "[$PROG]INFO: plot profile information on the rate map"
    file=${profiles_path}/profile_${n}_vel.psxy
    if [ "$mdl_type" == "" ]; then
      file_mdl=${profiles_path}/profile_${n}_vel_mdl.txt
      #file_mdl=${profiles_path}/profile_${n}_vel_mdl_raw.txt
      file_rot=${profiles_path}/profile_${n}_vel_rot.txt
    else
      file_mdl=${profiles_path}/${mdl_type}/profile_${n}_vel_mdl.txt
      #file_mdl=${profiles_path}/profile_${n}_vel_mdl_raw.txt
      file_rot=${profiles_path}/${mdl_type}/profile_${n}_vel_rot.txt
    fi
    file_gps=${profiles_path_gps}/profile_${n}_vel.psxy

    if [ ! -s $file ]; then
        echo -e "[$PROG]\033[1;33;41mERROR\033[0m: profile file ($file) not exist!! Skipped."
        continue
    fi

    #for convert los velocity to fault-parallel and fault-perpendicular components
    #alpha - satellite heading direction
    #theta - satellite looking direction
    #beta  - fault strike

    echo "[$PROG]INFO: get the orbit type (ascending/descedning)"
    orbtyp1=`echo $file | awk '{if(index($1,"-a-")>0){print "asc" } else {print ""}}'`
    orbtyp2=`echo $file | awk '{if(index($1,"-d-")>0){print "des" } else {print ""}}'`
    if [ "$orbtyp1" = "" -a "$orbtyp2" = "" ]; then
        echo "[$PROG]WARNING: not orbit type information available!"
        orbtyp=""
    elif [ "$orbtyp1" = "asc" -a "$orbtyp2" = "des" ]; then
        echo "[$PROG]WARNING: conflict orbit types!"
        orbtyp=""
    elif [ "$orbtyp1" = "asc" ]; then
        orbtyp=$orbtyp1
        alpha=`echo -13 | awk '{print ($1+360)*3.1415927/180.}'`
    else
        orbtyp=$orbtyp2
        alpha=`echo 193 | awk '{print $1*3.1415927/180.}'`
    fi
    echo "[$PROG]INFO: orbtype is $orbtyp"
    #exit

    theta=`echo 38. | awk '{print $1*3.1415927/180.}'`



    echo "[$PROG]INFO: add orbit/looking directions"
    if [ "$orbtyp" = "asc" ]; then
        x_orb=`echo $X_MIN | awk '{print $1+1.5}'`
        y_orb=`echo $Y_MIN | awk '{print $1+1}'`
        #echo "x/y orb are $x_orb $y_orb"
        #exit
        gmt psvelo -R -J -W1p,black,- -Gblack -Se2/0.95/0   -L -A9p+e  <<eob -O -K>> $ofile
        $x_orb $y_orb -.2 0.866 0 0 0 Satellite (Ascending)
eob
        gmt psvelo -R -J -W1p,blue,. -Gred -Se2/0.95/0   -L -A9p+e  <<eob -O -K>> $ofile
        $x_orb $y_orb 0.6 0.14 0 0 0 LOS Direction
eob
        gmt pstext <<eob -R -D-.3i/.7i -J -N -F+f+a+j -O -K  >> $ofile
        $x_orb $y_orb 12 13 LB $lbl_sat_a 
#Satellite@+ (Ascending)@+
eob
        gmt pstext <<eob -R -D.5i/.1i  -J -N -F+f+a+j -O -K  >> $ofile
        $x_orb $y_orb 12 13 LB LOS
eob
        gmt pstext <<eob -R -D.3i/.08i  -J -N -F+f+a+j -O -K  >> $ofile
        $x_orb $y_orb 12p,red 13 LB -
eob
        gmt pstext <<eob -R -D.1i/.02i  -J -N -F+f+a+j -O -K  >> $ofile
        $x_orb $y_orb 12p,blue 13 LB +
eob
        gmt psxy <<eob -R -J -N -W.5p,black -Sj -O -K  >> $ofile
        $x_orb $y_orb 13 .2 .4
eob
    fi

    if [ "$orbtyp" = "des" ]; then
        x_orb=`echo $X_MAX | awk '{print $1-.5}'`
        y_orb=`echo $Y_MAX | awk '{print $1-1}'`
        #echo "x/y orb are $x_orb $y_orb"
        gmt psvelo -R -J -W1p,black,- -Gblack -Se2/0.95/0   -L -A9p+e  <<eob -O -K>> $ofile
        $x_orb $y_orb -.2 -0.866 0 0 0 DES
eob
        gmt psvelo -R -J -W1p,blue,. -Gred -Se2/0.95/0   -L -A9p+e  <<eob -O -K>> $ofile
        $x_orb $y_orb -0.6 0.14 0 0 0 LOS
eob
        gmt pstext <<eob -R -J -D-.5i/.1i  -N -F+f+a+j -O -K  >> $ofile
        $x_orb $y_orb 12 -13 RB LOS
eob
        gmt pstext <<eob -R -J -D-.2i/-.7i -N -F+f+a+j -O -K  >> $ofile
        $x_orb $y_orb 12 -13 CT $lbl_sat_d 
#Satellite@- (Descending)@-
eob
        gmt pstext <<eob -R -D-.3i/-.01i  -J -N -F+f+a+j -O -K  >> $ofile
        $x_orb $y_orb 12p,red -13 RB -
eob
        gmt pstext <<eob -R -D-.1i/-.05i  -J -N -F+f+a+j -O -K  >> $ofile
        $x_orb $y_orb 12p,blue -13 RB +
eob
        gmt psxy <<eob -R -J -N -W.5p,black -Sj -O -K  >> $ofile
        $x_orb $y_orb -13 .2 .4
eob
    fi

    #
    line_ending=`cat -v $file | head -1 | awk '{print substr($0,length($0)-1)}'`
    echo "[$PROG]INFO: line_ending is $line_ending"
    if [ "$line_ending" = '^M' ]; then
        echo "[$PROG]INFO: converting DOS text file to Linux/Unix line-ending format ($file) ..."
        dos2unix $file
    fi

    if [ -s $file_mdl ]; then
        line_ending=`cat -v $file_mdl | head -1 | awk '{print substr($0,length($0)-1)}'`
        #echo "line_ending is $line_ending"
        if [ "$line_ending" = '^M' ]; then
            echo "[$PROG]INFO: converting DOS text file to Linux/Unix line-ending format ($file_mdl) ..."
            dos2unix $file_mdl
        fi
        #
        rate=`grep 'far-field strike-slip rates' $file_mdl | awk '{printf("%6.2f", $5)}'`
        locking_depth=`grep 'far-field strike-slip rates' $file_mdl | awk '{if(NF>=8){printf("%4.1f", $8)}}'`
        echo locking_depth is $locking_depth
        #exit
        if [ "$locking_depth" == "" -o "$locking_depth" == "0.0" ]; then
          locking_depth=`grep 'locking depth' $file_mdl | awk '{printf ("%4.1f",$4)}'`
          echo locking_depth2 is $locking_depth
        fi
        echo "[$PROG]INFO: $rate $locking_depth"

        fts=`grep 'fault trace shift (km)' $file_mdl | awk '{printf("%4.1f", $6+0)}'`
        xm=`grep 'de-mean of velocity' $file_mdl | awk '{print $5+0}'`
        echo "[$PROG]INFO: rate= $rate $fts $xm"
    else    
      vp4=
      rate=
      locking_depth=
      fts=
    fi

    echo "[$PROG]INFO: create colormap for distance to profile line"
    grep "^ " $file | awk '{print$4}' >.tmp.dist
    #maxdist=`gmt gmtinfo -I.001 .tmp.dist|awk -F\/ '{print $2}'`
    #mindist=`gmt gmtinfo -I.001 .tmp.dist|awk -F\/ '{print -1*$2}'`
    mindist=`gmt gmtinfo -I.1 -C .tmp.dist | awk '{print $1}'`
    maxdist=`gmt gmtinfo -I.1 -C .tmp.dist | awk '{print $2}'`
    #mindist=-5
    #maxdist=5
    echo "gmt makecpt -Cno_green -T${mindist}/${maxdist}/.1 -Z> dist.cpt"
    gmt makecpt -Cno_green -T${mindist}/${maxdist}/.1 -Z> dist.cpt
    #exit


    #echo $file
    #
    #profile location
    x_pf1=`grep ' PSXY_PROFILE' $file |head -1| awk '{print $3}'`
    y_pf1=`grep ' PSXY_PROFILE' $file |head -1| awk '{print $4}'`
    x_pf2=`grep ' PSXY_PROFILE' $file |tail -1| awk '{print $3}'`
    y_pf2=`grep ' PSXY_PROFILE' $file |tail -1| awk '{print $4}'`
    rate_pf=`echo $x_pf1 $y_pf1 $x_pf2 $y_pf2 | awk '{print ($4-$2)/($3-$1)}'`
    rate_pf_angle=`echo $x_pf1 $y_pf1 $x_pf2 $y_pf2 | awk '{print atan2($4-$2,$3-$1)*180/3.1415926 }'`
    rate_pf_angle=`echo $rate_pf_angle | awk '{if($1<0) {print $1+180} else {print $1}}'`
    echo "[$PROG]INFO: rate of profile direction is $rate_pf ($rate_pf_angle degrees)"
    sign_pf=`echo $rate_pf | awk '{if($1>0){print 1}else{print -1}}'`
    rate_fa=`echo $rate_pf | awk '{print -1./$1}'`
    rate_fa_angle=`echo $rate_pf_angle | awk '{print $1-90 }'`
    beta=`echo $rate_fa_angle | awk '{print (90-$1)*3.1415927/180.}'`
    echo "[$PROG]INFO: rate of fault strike direction is $rate_fa ($rate_fa_angle degrees)"
    #echo $x_pf1 $y_pf1 $x_pf2 $y_pf2 $sign_pf
    if [ `echo $x_pf1 $x_pf2 | awk '{if($1<$2){print 1}else{print 0}}'` -eq 1 ]; then
      x_w=$x_pf1
      y_w=$y_pf1
      x_e=$x_pf2
      y_e=$y_pf2
    else
      x_w=$x_pf2
      y_w=$y_pf2
      x_e=$x_pf1
      y_e=$y_pf1
    fi
    #exit
    #
    grep ' PSXY_PROFILE' $file | awk '{print $3,$4}'> .tmp
    gmt psxy -R -J -O .tmp -W2p,yellow,- -K  >> $ofile
    gmt psxy -R -J -O .tmp -St.3c -W1.5p,navy -Gwhite -K >> $ofile
    grep "^ " $file |awk '{print $9,$10,$4}' > .tmp
    \cp -f .tmp .tmp1
    gmt psxy -R -J -Sc0.05c  -Cdist.cpt  .tmp -O -K >> $ofile
    #grep "^ " $file |awk '{printf(">\n%f %f \n %f %f\n", $2,$3, $9,$10)}' > .tmp
    #gmt psxy -R -J .tmp -O -W.35p,blue,- -m -K>> $ofile

    #plot fault-profile intersection
    #grep _FAULT_PROFILE_INTERSECT $file | awk '{print $3,$4}' > .tmp
    x_fa_pf=`grep ' PSXY_FAULT_PROFILE_INTERSECT' $file | awk '{print $3}' `
    y_fa_pf=`grep ' PSXY_FAULT_PROFILE_INTERSECT' $file | awk '{print $4}' `
    gmt psxy -R -J -O <<eob -Sd.3c -W1p,white -Gred -K >> $ofile
    $x_fa_pf $y_fa_pf
eob

    #plot fault trace
    grep ' PSXY_FAULT_TRACE' $file | awk '{print $3,$4}' > .tmp
    gmt psxy -R -J -O .tmp -W1.5p,blue -K >> $ofile

    #profile text label (W-E)
    gmt pstext -R -J -O -K -F+f8p,Helvetica-Oblique+a0+jLT  -Gwhite -W.5p,red <<eob >> $ofile
    $x_w $y_w W
    $x_e $y_e E
eob
    gmt pstext -R -J -O -K -F+f8p,Helvetica-Oblique+a0+jRB -Gwhite@50 <<eob >> $ofile
    $x_w $y_w @%2%p@%%@%6%@-${nold}@-@%%
    $x_e $y_e E
eob
    echo "[$PROG]INFO: plot strike-slip sense"
    
    
    if [ -s $file_mdl ]; then

        #convert LOS velocity to strike-slip/vertical components
        ##ds=los/( SIN(theta)*SIN(alpha-beta) ); Garthwaite et al., 2013, JGR. equation (2)
        ##;ds=los/( SIN(theta)*COS(alpha-beta) )
        ##dd=los*COS(theta)
        #rate_fa_pl=`echo $rate $alpha $beta $theta | awk '{print $1/( sin($4)*sin($2-$3) ) }'`
        #rate_fa_pd=`echo $rate $alpha $beta $theta | awk '{print $1*( cos($4) ) }'`
        #echo rate $rate alpha $alpha beta $beta theta $theta rate_fa_pl $rate_fa_pl rate_fa_pd $rate_fa_pd
        ###;Fattahi and Amelung [2016, GRL]
        ###;(Fattahi, H., and F. Amelung (2016), InSAR observations of strain accumulation and
        ###;fault creep along the Chaman Fault system, Pakistan and Afghanistan,
        ###;Geophys. Res. Lett., 43, doi:10.1002/2016GL070121)
        ###;Figure 2
        ###;  vp=v/(sin(az)cos(h)sin(theta)-cos(az)sin(h)sin(theta))
        ###;where, az-fault strike; h-satellite heading angle; theta-average radar incidence.
        vp4=`echo $rate $alpha $beta $theta | awk '{print $1/( sin($3)*cos($2)*sin($4)-cos($3)*sin($2)*sin($4) ) }' | awk '{printf("%6.2f",$1)}'`

        #direction of strike-slip sense arrows
        #
        #echo rate and orbtp are $rate $orbtyp
        strike_sense=`echo $rate $orbtyp | awk '{if( ($1>0&&$2=="des") || ($1<0&&$2=="asc") ){print 1}else{print -1}}'`
        strike_sense=`echo $strike_sense $sign_pf | awk '{print $1*$2}'`
        strike_sense_invert=`echo $strike_sense | awk '{print -1*$1}'`

        #color of strike-slip sense arrows
        strike_color1=black
        strike_color2=black
        if [ "$orbtyp" = "asc" ]; then
            if [ $strike_sense -eq -1 ]; then
                strike_color1=blue
                strike_color2=red
            else
                strike_color2=blue
                strike_color1=red
            fi
        elif [ "$orbtyp" = "des" ]; then
            if [ $strike_sense -eq 1 ]; then
                strike_color1=blue
                strike_color2=red
            else
                strike_color2=blue
                strike_color1=red
            fi
        else
            echo "no orbit information for strike-slip sense color"
        fi

        #
        y_strike_sense1=`echo $y_fa_pf | awk '{print $1+.25}'`
        y_strike_sense2=`echo $y_fa_pf | awk '{print $1-.25}'`
        #echo $x_fa_pf $y_strike_sense1 $y_strike_sense2 $strike_sense $strike_sense_invert

        #rotate by fault strike direction
        len_strike_sense=1
        dx1=`echo $len_strike_sense $rate_fa_angle $strike_sense | awk '{print $1*cos($2*3.1415926/180)*$3}'`
        dy1=`echo $len_strike_sense $rate_fa_angle $strike_sense | awk '{print $1*sin($2*3.1415926/180)*$3}'`
        dx2=`echo $len_strike_sense $rate_fa_angle $strike_sense_invert | awk '{print $1*cos($2*3.1415926/180)*$3}'`
        dy2=`echo $len_strike_sense $rate_fa_angle $strike_sense_invert | awk '{print $1*sin($2*3.1415926/180)*$3}'`

        #echo dx dy are $dx1 $dy1 $dx2 $dy2 $len_strike_sense $rate_fa
        gmt psvelo <<eob -R -J -N -W1p,yellow -G${strike_color1}   -Se1/0.95/0  -L -A18p+e -O -K >> $ofile
        $x_fa_pf $y_strike_sense1 $dx1 $dy1 0 0 0
eob
        gmt psvelo <<eob -R -J -N -W1p,yellow -G${strike_color2}   -Se1/0.95/0  -L -A18p+e -O -K >> $ofile
        $x_fa_pf $y_strike_sense2 $dx2 $dy2 0 0 0
eob

    fi
    
    

    x1=`echo $X_MIN $X_MAX | awk '{print $1+1*($2-$1)/60.}'`
    x2=`echo $X_MIN $X_MAX | awk '{print $1+1*($2-$1)/30.+1}'`
    x3=`echo $X_MIN $X_MAX | awk '{print $1+1*($2-$1)/60.+.4}'`
    
    #number of used legend option
    nleg=`echo "$is_legend_gps $is_legend_microseismicity $is_legend_current_earthquake $is_legend_gcmt $is_legend_north_arrow $is_legend_fault $is_legend_profile" | sed -e 's/n/ /g' | wc -w`
    echo nleg $nleg
    y0=`echo $Y_MIN $Y_MAX $sY $nleg | awk '{print ($1+$2)/2-$4/2*$3}'`
    y_last=`echo $y0 $sY $nleg | awk '{print $1+$2*$3}'`
    echo hello $y0 $x2 $y_last
    gmt psxy -R -J -L -O -K <<eob -Glightgray@10 -W.25p,lightgray >> $ofile
$X_MIN $y0
$x2 $y0
$x2 $y_last
$X_MIN $y_last
eob
    #y1=`echo $Y_MIN $Y_MAX | awk '{print $1+00*.3+1.1}'`
    y2=`echo $Y_MIN $Y_MAX | awk '{print $1+01*.3+1.1}'`
    y3=`echo $Y_MIN $Y_MAX | awk '{print $1+02*.3+1.1}'`
    y4=`echo $Y_MIN $Y_MAX | awk '{print $1+03*.3+1.1}'`
    y5=`echo $Y_MIN $Y_MAX | awk '{print $1+04*.3+1.1}'`
    y6=`echo $Y_MIN $Y_MAX | awk '{print $1+05*.3+1.1}'`
    y7=`echo $Y_MIN $Y_MAX | awk '{print $1+06*.3+1.1}'`
    y8=`echo $Y_MIN $Y_MAX | awk '{print $1+07*.3+1.1}'`
    y9=`echo $Y_MIN $Y_MAX | awk '{print $1+08*.3+1.1}'`
    echo x y are $x1 $y1 $y2 $y3 $y4 $y5 $y6 $y7 $y8 $y9 $y_last



i_leg=-1
if [ "$is_legend_gps" == "y" ]; then
    i_leg=`expr $i_leg + 1`
    y1=`echo $y0 $i_leg $sY | awk '{print $1+$2*$3+0.5*$3}'`
    echo adding gps legend
    echo $x1 $y1 10 0 0 0 0 |gmt psvelo -R -J -N -W0.5p,purple -Gpurple   -Se.1/0.95/0  -L -A6p+e   -O -K >> $ofile
# $x1 $y1 10 0 0 0 0
#eob
    echo "$x1 $y1 10mm/yr(GPS)" | gmt pstext  -R -J -D0.c/-.03c -F+f6p+a0+jLT -O -K -N  >> $ofile
# $x1 $y1 10mm/yr(GPS)
#eob
  echo ets
  #exit
fi
#exit
if [ "$is_legend_microseismicity" == "y" ]; then
    i_leg=`expr $i_leg + 1`
    y2=`echo $y0 $i_leg $sY | awk '{print $1+$2*$3+0.5*$3}'`
    gmt pstext <<eob -R -J -D.2c/0 -F+f8p+a0+jLT -O -K -N  >> $ofile
$x1 $y2 @%2%M@%%5
eob
    ##echo a
    gmt psxy -R -J -O -K <<eob -N -Sc -W.5p,96/96/96 -G96/96/96@50 >> $ofile
$x1 $y2 0.15
eob

fi

if [ "$is_legend_gcmt" == "y" ]; then
    i_leg=`expr $i_leg + 1`
    y3=`echo $y0 $i_leg $sY | awk '{print $1+$2*$3+0.5*$3}'`
    gmt psmeca -R -J <<eob -Sm.33/7/-.1c -N -W -O -K -Gdarkgray >> $ofile
`echo $x1 $x2 | awk '{print ($1+$2)/2}'` $y3 21 -0.27 -0.77 1.04 0.26 0.04 -0.53 25 X Y @%2%M@%%@-w@-6
eob
fi


if [ "$is_legend_current_earthquake" == "y" ]; then
    i_leg=`expr $i_leg + 1`
    y4=`echo $y0 $i_leg $sY | awk '{print $1+$2*$3+0.5*$3}'`
    gmt psxy -R -J -O -K <<eob -N -Sa -W.25p,red -Gred >> $ofile
$x1 $y4 0.3
eob
    gmt pstext <<eob -R -J -D.2c/0 -F+f7p+a0+jLM -O -K -N  >> $ofile
$x1 $y4 Recent earthquakes
eob
fi


if [ "$is_north_arrow" == "y" ]; then
    i_leg=`expr $i_leg + 1`
    y6=`echo $y0 $i_leg $sY | awk '{print $1+$2*$3+0.5*$3}'`
    echo "[$PROG]INFO: adding north arrow"
    gmt gmtset FONT_TITLE = 12p
    gmt pscoast  -R -Df -J -K -O -T$x1/$y5/.2i -L$x3/$y6/$y6/50+lkm -Wblack >> ${ofile}
fi

if [ "$is_legend_fault" == "y" ]; then
    i_leg=`expr $i_leg + 1`
    y7=`echo $y0 $i_leg $sY | awk '{print $1+$2*$3+0.5*$3}'`
    gmt psxy -R -J -O -K <<eob -W2p,blue >> $ofile
`echo $x1| awk '{print $1+.1}'` $y7
`echo $x1| awk '{print $1+.9}'` $y7
eob
    gmt pstext <<eob -R -J -D.2c/.2c -F+f12p+a0+jLT -O -K -N  >> $ofile
$x1 $y7 $lbl_fault
eob
fi

if [ "$is_legend_profile" == "y" ]; then
    i_leg=`expr $i_leg + 1`
    y8=`echo $y0 $i_leg $sY | awk '{print $1+$2*$3+0.5*$3}'`
    gmt psxy -R -J -O -K <<eob -W2p,yellow,- >> $ofile
`echo $x1| awk '{print $1+.1}'` $y8
`echo $x1| awk '{print $1+.9}'` $y8
eob
    gmt pstext <<eob -R -J -D.2c/.2c -F+f12p+a0+jLT -O -K -N  >> $ofile
$x1 $y8 $lbl_profile
eob
fi
#    if [ -s _tmp_gnss_ll ]; then
#      gmt psxy -R -J -O -K _tmp_gnss_ll -Ss.3c -W.5p,red -Gyellow >> $ofile
#    fi
    
   if [ -s $file_gps ]; then
      grep -h '^ ' $file_gps | sort | uniq | awk '{print $11,$12}' |  gmt psxy -R -J -O -K -Ss.3c -W.5p,red -Gyellow >> $ofile
    else
      echo "[]WARNING: GPS profile file not exist ($file_gps)!"
    fi

    lat_fp=0
    #echo "**lat of intersect of fault and profile: $lat_fp "

    echo "[$PROG]INFO: plot overview map"
    gmtset MAP_FRAME_TYPE                  = plain
    gmt gmtset FONT_TITLE = 7p
    gmt gmtset FONT_LABEL         = 6p
    gmt gmtset FONT_ANNOT_PRIMARY = 6p
    gmt gmtset MAP_FRAME_PEN               = .25p
    gmt gmtset MAP_FRAME_WIDTH             = 0.1c
    gmt gmtset MAP_TICK_LENGTH_PRIMARY = 2p/1p
    gmt gmtset MAP_TITLE_OFFSET = .051c


    #Plot overview inset
    if [ -s $dem_file_overview ]; then
      #grdimage $Ro $Jo  -B10f5/10f5WSEN $dem_file_overview -Cmytopo2.cpt -A250 -K -V -O  >> $ofile
      grdimage $dem_file_overview  -Cmytopo2.cpt $Ro -JQ${Jo}i    -B10f5:"":/10f5:""::."":EN -K -O >> ${ofile}
    else
      pscoast $Ro -JQ${Jo}i -B10f5:"":/10f5:""::."":EN -K -O -Wthin -I1 -Swhite >> $ofile
    fi
    #pscoast $R $J -Wthin -I1 -B10f5/10f5WSEN -Glightgray -Wthinnest,lightgray -A250 -K -V -O >> $ofile
    #pscoast $R $J -Wthin -I1 -B10f5/10f5WSEN -Glightgray -Wthinnest,lightgray -A250 -K -V -O >> $ofile
    psxy -R -J -O -K -L <<eob -Gblue@80 >> $ofile
    $X_MIN $Y_MAX
    $X_MAX $Y_MAX
    $X_MAX $Y_MIN
    $X_MIN $Y_MIN
eob

    #interferogram graph
    if [ "$is_plot_intf" == "y" ]; then
      pwd
      if [ ! -s intf.tab ]; then
        \cp ../intf.tab .
      fi
      if [ ! -s baseline_table.dat ]; then
        \cp ../baseline_table.dat .
      fi
      sar_intf_tab_2_psxy --o=.tmp_
      if [ "$Ri" == "" ]; then
      	Ri=`gmt gmtinfo -I2/50 .tmp_`
      fi
      #R=`echo $Ri | awk -F\/ '{print $1"/"$2"/-250/250"}'`
      echo Ri $Ri
      #gmt psxy $Ri -X5i -Y.5i -JX2i/1.6i -Sc.051c -Gyellow -W.25p,red -B2f1:"@%2%T@%%":/50f10:"@%2%B@%%@-@%12%\136@%%@- (m)"::."":/WSen -O -K .tmp_ >> $ofile
      gmt psxy $Ri -X${plot_intf_X}i -Y.55i -JX${plot_intf_JX}i/${plot_intf_JY}i -Sc.051c -Gyellow -W.25p,red -B2f1:"@%2%T@%%":/50f10:"@%2%B@%%@-@%12%\136@%%@- (m)"::."":/WSen -O -K .tmp_ >> $ofile
      gmt psxy -R -J -W0.2p,purple,- -O -K .tmp_  >> $ofile
      Xshift=`echo ${plot_intf_X} | awk '{print -1*$1}'`
      
      Yshift=-7
      Yshift=`echo $plot_size_ax .55 | awk '{print -1*6.5*$1/7-$2}'`
    else
          
      Xshift=0
      Yshift=-6.5
      Yshift=`echo $plot_size_ax 0.00 | awk '{print -1*6.5*$1/7-$2}'`
    fi

    #gmt gmtset MAP_TICK_LENGTH = -.1c
    #gmt gmtset MAP_FRAME_WIDTH = .2c
    #gmt gmtset MAP_FRAME_PEN               = 2p
    gmt gmtset FONT_TITLE = 18p
    gmt gmtset FONT_LABEL         = 12p
    gmt gmtset FONT_ANNOT_PRIMARY = 9p
    gmt gmtset MAP_FRAME_PEN               = .5p
    gmt gmtset MAP_FRAME_WIDTH             = 0.1c
    gmt gmtset MAP_TICK_LENGTH = .1c
    gmt gmtset MAP_TITLE_OFFSET = .1051c





    echo "[$PROG]INFO: plot (b). velocity profile"
    #* 01site           : name of location
    #* 02pLon           : longitude of point projected onto the profile line (deg)
    #* 03pLat           : latitude of point projected onto the profile line (deg)
    #* 04pDist          : distance from location to profile (km)
    #* 05VNor           : velocity along the profile (normal to the fault trace); positive-north (mm/yr)
    #* 06VeNor          : velocity uncertainty along the profile (mm/yr)
    #* 07VPar           : velocity tangent to the profile (parallel to the fault trace); positive-90deg-clockwise from v_along direction (mm/yr)
    #* 08VePar          : velocity uncertainty tangent to the profile (mm/yr)
    #* 09VUp            : vertical velocity; positive-up (mm/yr)
    #* 10VeUp           : vertical velocity uncertainty
    #* 11lon            : longitude of location (deg)
    #* 12lat            : latitude of location (deg)
    #* 13distFa         : distance from location to fault; positive-east (km)
    #* 14VLOS           : InSAR LOS velocity (mm/yr)
    #* 15VeLOS          : InSAR velocity uncertainty (mm/yr)
    #* 16VE             : east velocity of location; positive-east (mm/yr)
    #* 17VN             : north velocity of location; positive-north (mm/yr)
    #* 18VEe            : east velocity uncertainty (mm/yr)
    #* 19VNe            : north velocity uncertainty (mm/yr)
    #* 20CEN            : correlation coefficient between east and north
    #* 21CEU            : correlation coefficient between east and up
    #* 22CNU            : correlation coefficient between north and up
    if [ $data_index -lt 16 ]; then
      sigma_index=`expr $data_index + 1`
    else
      sigma_index=`expr $data_index + 1`
    fi
    grep "^ " $file | awk '{print $13,$di,$4,$ei}' di=$data_index ei=sigma_index >.tmp.los
    if [ -s $file_mdl ]; then
      grep "^ " $file_mdl | awk '{print $1,$2}' >.tmp.los.mdl
    fi

    if [ "$auto_axis" == "y" ]; then
        Rp=`gmtinfo -I50/5 .tmp.los`
        echo Rp is $Rp
        rx1=`echo $Rp | sed -e 's/-R//g' | awk -F/ '{print $1}'`
        rx2=`echo $Rp | sed -e 's/-R//g' | awk -F/ '{print $2}'`
        ry1=`echo $Rp | sed -e 's/-R//g' | awk -F/ '{print $3}'`
        ry2=`echo $Rp | sed -e 's/-R//g' | awk -F/ '{print $4}'`
        rx_step=`echo $rx1 $rx2 | awk '{print int( ($2-$1)/10. )}' | awk '{if($1<1){print 1}else{print int($1/5.)*5}}'`
        rx_step_half=`echo $rx_step | awk '{print $1/2.}'`
        #ry_step=`echo $ry1 $ry2 | awk '{print int( ($2-$1)/10. )}' | awk '{if($1<1){print 1}else{print int($1/5.)*5}}'`
        ry_step=`echo $ry1 $ry2 | awk '{print int( ($2-$1)/10. )}' | awk '{if($1>1){print int($1/5.)*5}else{print $1}}'`
        ry_step_half=`echo $ry_step | awk '{print $1/2.}'`
        Bx=${rx_step}f${rx_step_half}
        By=${ry_step}f${ry_step_half}
        echo ry1 ry2 ry_step ry_step_half $ry1 $ry2 $ry_step $ry_step_half
    else
      if [ "$RP" == "" ]; then
        Rp=-R-250/250/-29/29
        #Rp=-R-250/250/-20/20
        #Rp=-R-450/450/-29/29
      else
        Rp=$RP
      fi      
      rx1=`echo $Rp | sed -e 's/-R//g' | awk -F/ '{print $1}'`
      rx2=`echo $Rp | sed -e 's/-R//g' | awk -F/ '{print $2}'`
      ry1=`echo $Rp | sed -e 's/-R//g' | awk -F/ '{print $3}'`
      ry2=`echo $Rp | sed -e 's/-R//g' | awk -F/ '{print $4}'`
      if [ "$BP" == "" ]; then
        Bx=40f10
        Bx1=`echo $rx1 $rx2 | awk '{print (($2-$1)/10)}' | awk '{if($1>1){print int($1)}else{print $1}}'`
        Bx2=`echo $Bx1 | awk '{print $1*.5}'`
        Bx="${Bx1}f${Bx2}"
      else
        Bx=$BP
      fi
      By=5f1
    fi
    sx=`echo $rx1 $rx2 20 | awk '{print ($2-$1)/$3}'`
    sy=`echo $ry1 $ry2 20 | awk '{print ($2-$1)/$3}'`
    echo "[$PROG]INFO: (5)  the ranges of X and Y axes to $R"
    echo "[$PROG]INFO: steps of X/Y are $Bx and $By"

    if [ -s $file_rot ]; then      
      grep "^ " $file_rot | awk '{print $1,$2,$3,$4}' >.tmp.rot
      #gmt psxy -R -J -O -K .tmp.rot -Sc0.15c  -Cdist.cpt  >> $ofile
    fi
    
    #(b). InSAR LOS $data_type of profile_${n}
    echo $R $xmin $xmax
    echo Bx By $Bx $By
    echo Rp $Rp
    gmt psxy $Rp -JX${plot_size_ax}i/${plot_size_by}i -X${Xshift}i -Y${Yshift}i -Sc0.05c   -B${Bx}:"${profile_title_x}":/${By}:"${profile_title_y}"::."${profile_title}":/SWen -O -K   .tmp.los -Cdist.cpt >>$ofile
    if [ -s .tmp.los.mdl ]; then
      gmt psxy -R -J -O -K .tmp.los.mdl -W1p,red >> $ofile
    fi

    if [ -s $file_gps ]; then
      echo data_index $data_index sigma_index $sigma_index
      grep -h '^ ' $file_gps | sort | uniq | awk '{print $13,$di,$ei}'  di=$data_index ei=sigma_index | gmt psxy -R -J -O -K -Ss.3c -W.5p,red -Gyellow >> $ofile
    else
      echo "No GPS file ($file_gps)!"
    fi

#    if [ -s $file_profile_gnss_merge ]; then
#      gmt psxy -R -J -O -K $file_profile_gnss_merge -Ss.3c -W.5p,red -Gyellow >> $ofile
#    fi
    
   if [ -s $file_mdl ]; then
      echo "[$PROG]INFO: plot rorated axis"
      grep PSXY_AXIS_MDL_RAW $file_mdl | awk '{print $3,$4}' > .tmp.mdl.rot.axis
      gmt psxy -R -J -O .tmp.mdl.rot.axis -W.5p,blue -K >> $ofile
    fi

    echo "disp_scale_x $disp_scale_x $disp_scale_length $disp_scale_height"
    gmt psscale -D${disp_scale_x}i/.4i/${disp_scale_length}i/${disp_scale_height}ih    -O -Cdist.cpt -K  -B2f1::/:"${profile_title_s}":  >> $ofile




    #if [ -s $file_gps ]; then      
    #  grep "^ " $file_gps | awk '{print $11,$20}' >.tmp.gps.los
    #  gmt psxy -R -J -O -K .tmp.gps.los -Ss0.15c  -W.5p,black -Ggreen >> $ofile
    #fi



    if [ "$data_type" = "Velocity" ]; then


        if [ "$rate" != "" ]; then
          y1=`echo $ry2 $sy | awk '{print $1-$2}'`
          y2=`echo $ry2 $sy | awk '{print $1-2*$2}'`
          y3=`echo $ry2 $sy | awk '{print $1-3*$2}'`
          y4=`echo $ry2 $sy | awk '{print $1-4*$2}'`
          gmt pstext -R -J <<eob -O -K -F+f${lbl_font_size}p+a0+jRM >>  $ofile
          0 $y1 ${lbl_slip_rate} =
          0 $y2 (@%2%S@%%@-LOS@- =
          0 $y3 ${lbl_locking_depth} =
          0 $y4 ${lbl_fault_trace_shift} =
#0 17 shift of velocity mean =
eob
            gmt pstext -R -J <<eob -O -K -F+f${lbl_font_size}p+a0+jLM >>  $ofile
            10 $y1 $vp4 mm/yr
            10 $y2 $rate mm/yr)
            10 $y3 $locking_depth km
            10 $y4 $fts km
#10 17 $xm mm/yr
eob
        fi
    fi

    xw=`echo $rx1 $sx | awk '{print $1+$2}'`
    xe=`echo $rx2 $sx | awk '{print $1-$2}'`
    yw=`echo $ry1 $sy | awk '{print $1+10.5*$2}'`
    yb=`echo $ry2 $sy | awk '{print $1-$2}'`
    ye=$yw
    echo "xw $xw $xe $yw $ye"
    gmt pstext -R -J <<eob -O -K -F+f16p+a0+jCM -Gwhite@50>>  $ofile
$xw $yb $plot_id_b
##$xe $ye EAST
eob
#    gmt pstext -R -J <<eob -O -K -F+f12p+a0+jCM >>  $ofile
#-220 -26 W
#220  -26 E
#eob
    #profile text label (W-E)
    gmt pstext -R -J -O -K -F+f8p,Helvetica-Oblique+a0+jLT  -Gwhite -W.5p,red <<eob >> $ofile
    $xw $yw W 
    $xe $ye E
eob
    gmt pstext -R -J -O -K -F+f8p,Helvetica-Oblique+a0+jRB    <<eob >> $ofile
    $xw $yw @%2%p@%%@%6%@-${nold}@-@%%
eob


    gmt psxy -R -J -O -K <<eob -W1p,red,- >> $ofile
    $lat_fp -10000
    $lat_fp 10000
eob
    gmt psxy -R -J -O -K <<eob -W.25p,black,- >> $ofile
-1000 $xm
1000 $xm
eob
    echo "$fts -1000" > a
    gmt psxy -R -J -O -K <<eob -W.25p,black,- >> $ofile
$fts -1000
$fts 1000
eob
    if [ "$is_icon" == "y" ]; then 

    echo "[$PROG]INFO: plot date-and-time (versions)"
    dt_rate_map=`stat $grdfile | grep Modify | awk '{print $2"T"$3}'`
    dt_plot_map=`date --rfc-3339=seconds | awk '{print $1"T"$2}'`


    x1=`echo $rx1 $sx | awk '{print $1+$2/2}'`
    y1=`echo $ry1 $sy | awk '{print $1+1*$2/2}'`
    y2=`echo $ry1 $sy | awk '{print $1+2*$2/2}'`
    y3=`echo $ry1 $sy | awk '{print $1+3*$2/2}'`
    y4=`echo $ry1 $sy | awk '{print $1+4*$2/2}'`
    y5=`echo $ry1 $sy | awk '{print $1+5*$2/2}'`
    gmt pstext -R -J <<eob -O -K -F+f${icon_font_size}p+a0+jLM >>  $ofile
${x1} $y5 InSAR ${data_type} Map Version $dt_rate_map
${x1} $y4 Plot Version $dt_plot_map
${x1} $y3 Yunfeng Tian (tianyf@@gmail.com  13522218117)
${x1} $y2 @%12%\343@%% NINH, MEMC
#${x1} $y2 National Institute of Natural Hazards (NINH), Ministry of Emergency Management of China (MEMC)
#-246 -23 Institute of Crustal Dynamics (ICD), China Earthquake Administration (CEA)
${x1} $y1 1 Anningzhuang Road, Haidian, Beijing, China  100085
eob

    echo "[$PROG]INFO: add ICD icon"
    file_icd_icon=${iGPS}/tables/ninh.png
    if [ -s $file_icd_icon ]; then
      #gmt psimage $file_icd_icon -Dx.1i/.9i+w2i  -O -K >> $ofile
      gmt psimage $file_icd_icon -Dx.1i/${icon_Y}i+w${icon_w}i  -O -K >> $ofile
    fi
    fi #<<icon
    
    
    #add an annotation text
    fig_cap= #blank
    #fig_cap="LOS Rate Map by Sentinel-1 [${orb}] Using GMT5SAR Time Series Analysis (SBAS) (Positive: move towards satellite (des-right; asc-left) )"
    gmt pstext -R0/100/0/100 -JX4.6i  -F+f+a+j  -Y-.7i -X-0i -O  <<eob >> $ofile
50 2 8 0 2 ${fig_cap}
eob

    echo "[$PROG]INFO: converting JPEG (`pwd`/$ofile)..."
    gmt psconvert -A -Tj -E200 -Z $ofile
    #echo "converting PDF ..."
    #psconvert -A -Tf $ofile

    #exit
done  #end-of-profile-loop

echo -e "[${PROG}]INFO:\033[1;33;44m done :)\033[0m\n"
