
;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
FUNCTION IGPS_CHECK_TSTYPE,EV,$
    TS_TYPE=TS_TYPE
    
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  TS_TYPE=ST.TS_TYPE
  IF ST.TS_TYPE NE 'SIO NEU' && ST.TS_TYPE NE 'SIO NEU [ATS]' THEN BEGIN
    MSGBOX,['Note:', $
      '  Currently, iGPS only accept SIO NEU file format as input of this operation.'], $
      TITLE='iGPS',/ERROR,DIALOG_PARENT=EV.TOP
    RETURN,1
  ENDIF
  
  RETURN,0
  
END

;CHECK WHICH SITES ARE SELECTED.
;NEARLY ALL MENUS ARE OPERATED ON THE SELECTED SITES, SAY, PLOTTING, RESIDUAL ANALYSIS.
FUNCTION IGPS_CHECK_LIST_SITE,EV, $
    SELECT=SELECT, $
    ALL=ALL, $
    INDEX=INDEX, $
    VERBOSE=VERBOSE
    
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='LST_SITE')
  WIDGET_CONTROL, ID, GET_UVALUE=ALL
  IF N_ELEMENTS(ALL) LT 0 || ALL[0] EQ '' THEN BEGIN
    MSGBOX,'No sites available!',TITLE='iGPS',/INFO,DIALOG_PARENT=EV.TOP,/ERROR
    RETURN,1
  ENDIF
  
  IF ARG_PRESENT(SELECT) || ARG_PRESENT(INDEX) THEN BEGIN
    INDEX=WIDGET_INFO(ID, /LIST_SELECT)
    IF INDEX[0] EQ -1 THEN BEGIN
      IF (KEYWORD_SET(VERBOSE) || $
        (N_ELEMENTS(VERBOSE) GT 0 && VERBOSE EQ 1 )) THEN BEGIN
        MSGBOX,'No sites selected!',TITLE='iGPS',/ERROR,DIALOG_PARENT=EV.TOP
      ENDIF
      RETURN,1
    ENDIF
    SELECT=ALL[INDEX]
  ENDIF
  
  RETURN,0
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
FUNCTION IGPS_CHECK_PATH, EV,PATH=PATH,OPATH=OPATH
  IF ARG_PRESENT(PATH) EQ 1 THEN BEGIN
    ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='TXT_IN')
    WIDGET_CONTROL, ID, GET_VALUE=PATH
    PATH = STRTRIM(PATH[0],2)
    IF PATH EQ '' THEN BEGIN
      MSGBOX,'No input path!',TITLE='iGPS', DIALOG_PARENT=EV.TOP,/ERROR
      RETURN,1
    ENDIF
  ENDIF
  
  IF ARG_PRESENT(OPATH) EQ 1 THEN BEGIN
    ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='TXT_OUT')
    WIDGET_CONTROL, ID, GET_VALUE=OPATH
    OPATH = STRTRIM(OPATH[0],2)
    IF OPATH EQ '' THEN BEGIN
      MSGBOX,'No output path!',TITLE='iGPS', DIALOG_PARENT=EV.TOP,/ERROR
      RETURN,1
    ENDIF
    
  ENDIF
  
  RETURN,0
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
;>>>
;THE BELOW TWO SUBROUTINES ARE USED TO CLEAN EAST/VERT PLOTS WHEN DRAW
;CORRELATION EFFICIENTS.
PRO IGPS_CLEAR_DRAW_E, EV
  IDE = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='DRAW_E')
  INFO=WIDGET_INFO(IDE,/GEOMETRY)
  WIDGET_CONTROL,IDE,GET_VALUE=TMPIDE
  WSET,TMPIDE[0]
  TV,MAKE_ARRAY(INFO.SCR_XSIZE,INFO.SCR_YSIZE,VALUE=255)
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_CLEAR_DRAW_U, EV
  IDE = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='DRAW_U')
  INFO=WIDGET_INFO(IDE,/GEOMETRY)
  WIDGET_CONTROL,IDE,GET_VALUE=TMPIDE
  WSET,TMPIDE[0]
  TV,MAKE_ARRAY(INFO.SCR_XSIZE,INFO.SCR_YSIZE,VALUE=255)
END
;<<<

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_CLEAR_DRAWS, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  
  INFO=WIDGET_INFO(ST.DRAWIDS[0],/GEOMETRY)
  WSET, ST.DRAWID[0]
  TV,MAKE_ARRAY(INFO.SCR_XSIZE,INFO.SCR_YSIZE,VALUE=255)
  
  INFO=WIDGET_INFO(ST.DRAWIDS[1],/GEOMETRY)
  WSET, ST.DRAWID[1]
  TV,MAKE_ARRAY(INFO.SCR_XSIZE,INFO.SCR_YSIZE,VALUE=255)
  
  INFO=WIDGET_INFO(ST.DRAWIDS[2],/GEOMETRY)
  WSET,ST.DRAWID[2]
  TV,MAKE_ARRAY(INFO.SCR_XSIZE,INFO.SCR_YSIZE,VALUE=255)
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_UPDATE_DRAW, EV, DI=DI
  IF N_ELEMENTS(DI) EQ 0 THEN DI=0  ;DI/TI is the component index (usually 0-north, 1-east, and 2-vertical)
  ;PRINT,DI
  TI=DI
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;;
  YTITLES=['North','East','Up']
  NEUSTR=['N','E','U']
  
  IF ST.TS_TYPE EQ 'CORRCOEF' THEN BEGIN
    NEUIS=ST.IND_NEU[0]
  ENDIF ELSE BEGIN
    NEUIS=(ST.IND_NEU)[WHERE(ST.IND_NEU NE -1)]
    NEUERRIS = ST.IND_NEUERR
  ENDELSE
  
  IF N_ELEMENTS(NEUIS) LE TI THEN BEGIN
    RETURN
  ENDIF
  
  CAPLEN=ST.CAPLEN
  
  DATA_ORI=*(ST.DATA)
  TIME_AXES_VAL_ORI=*ST.TIME_AXES_VAL
  TIME_AXES_VAL=*ST.TIME_AXES_VAL
  DRAW_N_XRANGE_VIS=ST.DRAW_N_XRANGE_VIS_USE
  ;PRINT, 'DRAW_N_XRANGE_VIS:',DRAW_N_XRANGE_VIS
  DRAW_IDS=ST.DRAWID
  ;STOP
  
  IND=WHERE(*ST.TIME_AXES_VAL_MJD GE ST.DRAW_N_XRANGE_VIS[0] $
    AND *ST.TIME_AXES_VAL_MJD LE ST.DRAW_N_XRANGE_VIS[1])
  ;HELP, IND
  IF IND[0] EQ -1 THEN BEGIN
    PRINT,'Out of range [draw_n]! (', ST.DRAW_N_XRANGE_VIS,MIN(*ST.TIME_AXES_VAL_MJD), $
      '~',MAX(*ST.TIME_AXES_VAL_MJD),')'
    RETURN
  ENDIF
  ;;
  DATA=DATA_ORI[*,IND]
  TIME_AXES_VAL=(*ST.TIME_AXES_VAL)[IND]
  TIME_AXES_VAL_DYR=(*ST.TIME_AXES_VAL_DYR)[IND]
  
  ;REMOVE NaN VALUES; BY TIANYF ON Thu, Mar 31, 2016 10:32:06 PM
  IND_NOT_NAN=WHERE(FINITE(DATA[NEUIS[TI],*]) EQ 1)
  IF IND_NOT_NAN[0] EQ -1 THEN RETURN
  DATA=DATA[*,IND_NOT_NAN]
  TIME_AXES_VAL=TIME_AXES_VAL[IND_NOT_NAN]
  TIME_AXES_VAL_DYR=TIME_AXES_VAL_DYR[IND_NOT_NAN]
  
  
  ;CHECK WHETHER DISPLAY CLEANED TIME SERIES (NO OUTLIERS; PREVIEW CLEANED SEREIS)
  IF PTR_VALID((*ST.OUTLIERS)[TI]) && ST.PANEL_OUTLIER_CKB_PREVIEW EQ 1 THEN BEGIN
    IND_OUTLIER=[*((*ST.OUTLIERS)[TI])]
    IND_REM=INV_IND(IND_OUTLIER,TOP=N_ELEMENTS(IND))
    DATA=DATA[*,IND_REM]
    TIME_AXES_VAL=TIME_AXES_VAL[IND_REM]
    TIME_AXES_VAL_DYR=(*ST.TIME_AXES_VAL_DYR)[IND_REM]
  ;help, data, time_axes_val
  ENDIF
  
  ;;
  INFO=WIDGET_INFO(st.DRAWIDS[TI],/GEOMETRY)
  ;WINDOW,/FREE,XSIZE=678,YSIZE=178,/PIXMAP
  WINDOW,/FREE,XSIZE=info.SCR_XSIZE,YSIZE=info.SCR_YSIZE,/PIXMAP
  OLD_WIN=!D.WINDOW
  ;WSET,DRAW_IDS[TI]
  DEVICE, DECOMPOSED=1
  !P.MULTI=0
  IF ST.TS_TYPE EQ 'CORRCOEF XY' THEN BEGIN
    IF TI GT 0 THEN RETURN
    ;;SORT BEFORE PLOT
    X=REFORM(DATA[ST.IND_TIME,*])
    Y=REFORM(DATA[NEUIS[TI],*])
    ;help,x,y
    INDX=SORT(X)
    X=X(INDX)
    Y=Y(INDX)
    IF PTR_VALID(ST.PANEL_CORR_SITES) NE 1 THEN BEGIN
      SITES=STRARR(N_ELEMENTS(INDX))
    ENDIF ELSE BEGIN
      SITES=(*(ST.PANEL_CORR_SITES))[INDX]
    ENDELSE
    ;PRINT,[MIN(X),MAX(X)]
    PLOT,X,Y, $
      YRANGE=[-1,1], $
      ;;XRANGE=[MIN(ALOG10(DATA[IND_TIME,*])),MAX(ALOG10(DATA[IND_TIME,*]))],  $
      ;XRANGE=[0.0,180], $
      ;XRANGE=[MIN(X)+.0001,MAX(X)],  $
      YTITLE='Corr. Coef.',  $
      XTITLE='Distance', $
      XTICK_GET=XTICKVAL, $
      BACKGROUND = 255 + 256L * (255 + 256L *255), $
      YMARGIN=[4,1], $
      XMARGIN=[8,1], $
      ;XSTYLE=1, $
      ;/XLOG, $
      ;/YLOG, $
      COLOR='000000'X, $
      PSYM=0
    OPLOT,[XTICKVAL[0], LAST(XTICKVAL)],[0,0],COLOR='FF0000'X
    OPLOT,X,Y, PSYM=ST.PSYM, COLOR='00FF00'X
    GOTO, ENDIT
  ENDIF
  
  YMARGINS=[[2,1],[2,1],[2,1]]
  ;;DEVICE,DECOMPOSED=1
  ;;IF ST.TS_TYPE EW 1 OR ST.TS_TYPE EQ 3 THEN BEGIN
  IF ST.ERROR_BAR EQ 1 &&  NEUERRIS[TI] NE -1 && N_ELEMENTS(DATA[*,0]) GT MAX(NEUERRIS) THEN BEGIN
    YU=DATA[NEUIS[TI],*]+DATA[NEUERRIS[TI],*]
    YL=DATA[NEUIS[TI],*]-DATA[NEUERRIS[TI],*]
    Y=REFORM(DATA[NEUIS[TI],*])
    YE=DATA[NEUERRIS[TI],*]
  ENDIF ELSE BEGIN
    YU=DATA[NEUIS[TI],*]
    YL=DATA[NEUIS[TI],*]
    YE=[-9999D0]
  ENDELSE
  ;;ENDIF
  ;PRINT, 'DRAW_N_XRANGE_VIS:',DRAW_N_XRANGE_VIS
  YTITLE=YTITLES[TI]
  IF ST.UNIT NE '' THEN BEGIN
    ;YTITLE=YTITLE+' ('+ST.UNIT+')'
    YTITLE=YTITLE+' ('+'mm'+')'
  ENDIF
  CASE ST.TS_TYPE OF
    'CORRCOEF MAT': BEGIN
      YRANGE=[-1,1]
      ;YRANGE=[.3,1]
      YTITLE='Corr. Coef.'
    END
    'CATS PSD': BEGIN
      YTITLE='Power (mm^2/Hz)'
    END
    'POWER SPECTRUM': BEGIN
      YTITLE='Power (mm^2/Hz)'
    END
    ELSE: BEGIN
      ;STOP
      ;PRINT,DRAW_N_XRANGE_VIS
      POS_VIS=WHERE(TIME_AXES_VAL GE DRAW_N_XRANGE_VIS[0] AND TIME_AXES_VAL LE DRAW_N_XRANGE_VIS[1])
      ;IF POS_VIS[0] EQ -1 OR N_ELEMENTS(POS_VIS) LE 1 THEN BEGIN
      IF POS_VIS[0] EQ -1 OR N_ELEMENTS(POS_VIS) LT 1 THEN BEGIN
        RETURN
      ENDIF
      
      ;MORE REASAONABLE Y-AXIS RANGE WHEH LARGE ERROR SIGMA EXIST.  ;2011APR20 TIANYF
      INDS=-1
      IF YE[0] NE -9999D0 THEN BEGIN
        INDS=WHERE(ABS(YE)*ST.SF LT 100) ;DATA GOOD: SIGMA LESS THAN 100 MM
      ENDIF
      ;HELP,INDS,ST.SF
      IF INDS[0] EQ -1 THEN BEGIN
        POS_YL=WHERE(YL[*] GT MIN(YL[POS_VIS],/NAN))
        POS_YU=WHERE(YU[*] LT MAX(YU[POS_VIS],/NAN))
        IF POS_YL[0] NE -1 && POS_YU[0] NE -1 THEN BEGIN
          YRANGE=[MIN(YL[POS_YL],/NAN),MAX(YU[POS_YU],/NAN)]
        ENDIF ELSE BEGIN
          YRANGE=[MIN(YL,/NAN),MAX(YU,/NAN)]
        ENDELSE
      ;PRINT, YRANGE
      ENDIF ELSE BEGIN
        ;PRINT,INDS[0]
        ;HELP,POS_VIS
        INDS0=SET_INTERSECT(INDS,POS_VIS)
        ;YRANGE=[MIN(YL[WHERE(YL[INDS] GT MIN(YL[POS_VIS]))]),MAX(YU[WHERE(YU[INDS] LT MAX(YU[POS_VIS]))])]
        ;YRANGE=[MIN(YL[INDS0]),MAX(YU[INDS0])]
        YRANGE=[MIN(Y[INDS0],/NAN)-MEDIAN(ye[INDS0]), MAX(Y[INDS0],/NAN)+MEDIAN(ye[INDS0])]
      ;PRINT,YRANGE
      ;PRINT,MEDIAN(YE[INDS0])
      ENDELSE
    END
  ENDCASE
  
  IF ST.TS_TYPE EQ 'POWER SPECTRUM' || ST.TS_TYPE EQ 'CATS PSD' THEN BEGIN
    PLOT,TIME_AXES_VAL,DATA[NEUIS[TI],*], $
      YRANGE=YRANGE, $
      XRANGE=[DRAW_N_XRANGE_VIS[0],DRAW_N_XRANGE_VIS[1]], $
      YTITLE=YTITLE,  $
      BACKGROUND = 255 + 256L * (255 + 256L *255), $
      COLOR='000000'X, $
      YMARGIN=REFORM(YMARGINS[*,TI]), $
      XMARGIN=[8,1], $
      XSTYLE=1, $
      ;YSTYLE=1, $
      CHARSIZE=.8, $
      XTICK_GET=XTICK_GET, $
      YTICK_GET=YTICK_GET, $
      /XLOG,/YLOG, $
      /NODATA
    ;STOP
    OPLOT, TIME_AXES_VAL,DATA[NEUIS[TI],*],COLOR='000000'X, $
      PSYM=0
    ;ANNUAL
    ;DAYS=[365.25,365.25/2,365.25/4,365.25/12,365.25/24,14,30,365.25/3.12,365.25/5.20]
    DAYS=[365.25,365.25/2,365.25/4,365.25/12,14,365.25/3.12,365.25/5.20,365.25/4.16,365.25/6.24,365.25/1.040]
    FOR J=0,N_ELEMENTS(DAYS)-1 DO BEGIN
      FNI=1/(DAYS[J]*24*3600)
      OPLOT,[FNI,FNI],[MIN(YTICK_GET),MAX(YTICK_GET)], COLOR='0000FF'X,LINESTYLE=3
      STR=STRING(365.25/DAYS[J],FORMAT='(F4.2)')
    ;XYOUTS,FNI, MAX(YTICK_GET)-DAYS*((MAX(YTICK_GET)-MIN(YTICK_GET))/20), STR,/DATA,COLOR=0
    ;XYOUTS,FNI, MIN(YTICK_GET), STR,/DATA,COLOR=0
    ENDFOR
    FOR J=0,4 DO BEGIN
    
      FNI=1/(DAYS[J]*24*3600)
      OPLOT,[FNI,FNI],[MIN(YTICK_GET),MAX(YTICK_GET)], COLOR='AAAA00'X,LINESTYLE=0
      STR=STRING(365.25/DAYS[J],FORMAT='(I2)')
      ;XYOUTS,FNI, MAX(YTICK_GET)-DAYS*((MAX(YTICK_GET)-MIN(YTICK_GET))/20), STR,/DATA,COLOR=0
      XYOUTS,FNI, MIN(YTICK_GET), STR,/DATA,COLOR=0;,FONT='ARIAL'
    ENDFOR
  ENDIF ELSE BEGIN
    ;STOP
    IF ST.IS_FROM_TO_FIXED EQ 1 && ST.FROM NE -1 && ST.TO NE -1 THEN BEGIN
      FROM=ST.FROM
      TO=ST.TO
      XRANGE=[FROM,TO]
      ;PRINT,'FIXED:',XRANGE
      
      POS_VIS=WHERE(TIME_AXES_VAL GE FROM AND TIME_AXES_VAL LE TO)
      IF POS_VIS[0] EQ -1 THEN RETURN ;EXIT WHEN NO DATA WITHIN CURRENT VIEW
      
      ;GET THE NEW RANGE
      ;YRANGE=[MIN(YL[WHERE(YL GT MIN(YL[POS_VIS]))]),MAX(YU[WHERE(YU LT MAX(YU[POS_VIS]))])]
      ;YRANGE=[MIN(YL[WHERE(YL GE MIN(YL[POS_VIS]))]),MAX(YU[WHERE(YU LE MAX(YU[POS_VIS]))])]
      ;STOP
      
      ;RE-ADJUST THE Y-RANGES   2011OCT02, TIANYF
      INDS=-1
      IF YE[0] NE -9999D0 THEN BEGIN
        INDS=WHERE(ABS(YE[POS_VIS])*ST.SF LT 100) ;DATA GOOD: SIGMA LESS THAN 100 MM
      ENDIF
      ;HELP,INDS,ST.SF
      ;STOP
      IF INDS[0] EQ -1 THEN BEGIN
        IF N_ELEMENTS(POS_VIS) EQ 1 THEN BEGIN  ;FIX A BUG WHEN THERE IS ONLY ONE DATA POINT. BY TIANYF ON Fri, Mar 25, 2016  7:35:20 AM
          YRANGE=[YL[POS_VIS],YL[POS_VIS]]
        ENDIF ELSE BEGIN
          ;YRANGE=[MIN(YL[WHERE(YL[POS_VIS] GT MIN(YL[POS_VIS],/NAN))],/NAN),MAX(YU[WHERE(YU[POS_VIS] LT MAX(YU[POS_VIS],/NAN))],/NAN)]
          ;FIX A BUG WHEN ALL DATA POINTS ARE THE SAME. BY TINYF ON Tue, Apr 19, 2016  2:57:00 PM
          YRANGE=[MIN(YL[WHERE(YL[POS_VIS] GE MIN(YL[POS_VIS],/NAN))],/NAN),MAX(YU[WHERE(YU[POS_VIS] LE MAX(YU[POS_VIS],/NAN))],/NAN)]
        ENDELSE
      ENDIF ELSE BEGIN
        ;PRINT,INDS[0]
        ;HELP,POS_VIS
        ;INDS0=SET_INTERSECT(INDS,POS_VIS)
        ;YRANGE=[MIN(YL[WHERE(YL[INDS] GT MIN(YL[POS_VIS]))]),MAX(YU[WHERE(YU[INDS] LT MAX(YU[POS_VIS]))])]
        ;YRANGE=[MIN(YL[INDS0]),MAX(YU[INDS0])]
        YRANGE=[MIN(YL[POS_VIS[INDS]],/NAN),MAX(YU[POS_VIS[INDS]],/NAN)]
      ;PRINT,YRANGE
      ENDELSE
      
      ;PRINT,'YRANGE:', YRANGE
      CAPLEN=(TO-FROM)/200D0
    ENDIF ELSE BEGIN
      XRANGE=[DRAW_N_XRANGE_VIS[0],DRAW_N_XRANGE_VIS[1]]
    ENDELSE
    ;PRINT,'PLOTTING...'
    PLOT,TIME_AXES_VAL,DATA[NEUIS[TI],*]*ST.SF, $
      YRANGE=YRANGE*ST.SF, $
      XRANGE=XRANGE, $
      YTITLE=YTITLE,  $
      BACKGROUND = 255 + 256L * (255 + 256L *255), $
      COLOR='000000'X, $
      YMARGIN=REFORM(YMARGINS[*,TI]), $
      XMARGIN=[8,1], $
      XSTYLE=1, $
      YSTYLE=1, $ ;ADDED BY TIANYF ON Thu, Dec 04, 2014 12:35:02 PM
      XTICKFORMAT=ST.XTICK_FMT, $
      CHARSIZE=.78, $
      XTICK_GET=XTICK_GET, $
      YTICK_GET=YTICK_GET, $
      /NODATA
      
  ENDELSE
  ;FOR CORRELATION COEFFICIENTS PLOT, DRAW THE HORIZONTAL AXES (Y=0).
  IF ST.TS_TYPE EQ 'CORRCOEF MAT' THEN BEGIN
    OPLOT, [DRAW_N_XRANGE_VIS[0],DRAW_N_XRANGE_VIS[1]], [0,0], COLOR='000000'X
  ENDIF
  
  ;PRINT, 'DRAW_N:',ST.DRAW_N_XRANGE_VIS
  ;FIRST, PLOT THE ERROR BAR
  IF NEUERRIS[TI] NE -1 && ST.ERROR_BAR EQ 1 THEN BEGIN
    ;PRINT,'LEN-OF-CAP: ',CAPLEN,DRAW_N_XRANGE_VIS[1]-DRAW_N_XRANGE_VIS[0]
    ;OPLOT,[ TIME_AXES_VAL[*],TIME_AXES_VAL[*] ],[ YU[*],YL[*] ]*ST.SF, COLOR='0000FF'X
    ;help,[ TIME_AXES_VAL[*],TIME_AXES_VAL[*] ],TIME_AXES_VAL,yu
    ERRPLOT, TIME_AXES_VAL, REFORM(Yl)*ST.SF, REFORM(Yu)*ST.SF , COLOR='0000FF'X
  ;print,moment(ye)
  ;stop
    
  ;    FOR I=0,N_ELEMENTS(YU)-1 DO BEGIN
  ;      OPLOT,[ TIME_AXES_VAL[I],TIME_AXES_VAL[I] ],[ YU[I],YL[I] ]*ST.SF, COLOR='0000FF'X
  ;      OPLOT,[ TIME_AXES_VAL[I]-CAPLEN,TIME_AXES_VAL[I]+CAPLEN ],[ YU[I],YU[I] ]*ST.SF, COLOR='0000FF'X
  ;      OPLOT,[ TIME_AXES_VAL[I]-CAPLEN,TIME_AXES_VAL[I]+CAPLEN ],[ YL[I],YL[I] ]*ST.SF, COLOR='0000FF'X
  ;    ENDFOR
  ENDIF
  ;RETURN
  ;PLOT THE TIME SERIES IN SPECIFIED SYMBOM.
  OPLOT,TIME_AXES_VAL,DATA[NEUIS[TI],*]*ST.SF,PSYM=ST.PSYM, COLOR='00FF00'X
  ;RETURN
  ;STOP
  
  ;;>>>-BEGIN-OF-PLOT-CUT-SPANS
  ;;PLOT CUTTING EPOCHES, IF THERE ARE ANY.
  ;PRINT,'CUT'
  IF PTR_VALID(ST.CUTS) THEN BEGIN
    CAPLEN_V=(MAX(YTICK_GET)-MIN(YTICK_GET))/50
    FOR CI=N_ELEMENTS((*ST.CUTS)[0,*])-1,0,-1 DO BEGIN
      CUT=(*ST.CUTS)[*,CI]
      OPLOT, [CUT[0],CUT[0]],[ $
        MAX(YTICK_GET)-(CI+1)*(MAX(YTICK_GET)-MIN(YTICK_GET))/50-CAPLEN_V, $
        MAX(YTICK_GET)-(CI+1)*(MAX(YTICK_GET)-MIN(YTICK_GET))/50+CAPLEN_V], COLOR='FF0000'X
        
      IF CUT[1] EQ -9999 THEN CONTINUE
      OPLOT, [CUT[1],CUT[1]],[ $
        MAX(YTICK_GET)-(CI+1)*(MAX(YTICK_GET)-MIN(YTICK_GET))/50-CAPLEN_V, $
        MAX(YTICK_GET)-(CI+1)*(MAX(YTICK_GET)-MIN(YTICK_GET))/50+CAPLEN_V], COLOR='FF0000'X
        
      OPLOT, [CUT[0],CUT[1]], $
        [MAX(YTICK_GET)-(CI+1)*(MAX(YTICK_GET)-MIN(YTICK_GET))/50, $
        MAX(YTICK_GET)-(CI+1)*(MAX(YTICK_GET)-MIN(YTICK_GET))/50], COLOR='FF0000'X
        
      POS=WHERE(TIME_AXES_VAL GE CUT[0] AND TIME_AXES_VAL LE CUT[1])
      IF POS[0] NE -1 THEN BEGIN
        OPLOT,TIME_AXES_VAL[POS],DATA[NEUIS[TI],POS]*ST.SF,COLOR='AAAAAA'X,PSYM=ST.PSYM
      ENDIF
      
    ENDFOR;
  ENDIF
  ;<<<-END-OF-PLOT-CUT-SPANS
  ;
  ;;>>>
  ;;PLOT MUANUALY SELECTED OFFSET EPOCHES, IF THERE ARE ANY.
  ;* OFFSET, CUT, PSDECAY WILL NOT BE SEEN WHEN THE X-AXIS IS IN MJD/JD.
  ;PRINT,'OFFSETS'
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OFFSET')
  CKB_OFFSET=WIDGET_INFO(ID,/BUTTON_SET)
  ;HELP,CKB_OFFSET
  IF PTR_VALID(ST.OFFSETS)&& CKB_OFFSET EQ 1 THEN BEGIN
    OFFARR=*ST.OFFS
    ;HELP,OFFARR
    ;HELP,ST.SITE_CUR
    POS=WHERE( (OFFARR[0,*] EQ 'ALL' OR OFFARR[0,*] EQ STRUPCASE(ST.SITE_CUR)) AND OFFARR[1,*] EQ STRUPCASE(NEUSTR[TI]) )
    ;PRINT, POS
    IF POS[0] NE -1 THEN BEGIN
      OFFARR1=OFFARR[*,POS]
      ;HELP,OFFARR1
      ;PRINT,OFFARR1
      FOR OI=0, N_ELEMENTS(OFFARR1[0,*])-1 DO BEGIN
        TIME=DOUBLE(OFFARR1[2,OI])
        ;STOP
        IF TIME LT MIN(TIME_AXES_VAL) || TIME GT MAX(TIME_AXES_VAL) THEN CONTINUE
        ;PLOT VERTICAL LINE
        OPLOT, [DOUBLE(OFFARR1[2,OI]),DOUBLE(OFFARR1[2,OI])], [-1D32,1D32], $
          PSYM=0, COLOR='FFFF00'X
        ;PLOT OFFSET POINT, IF PRESENTS.
        TMP_MIN = MIN(ABS(TIME_AXES_VAL - DOUBLE(OFFARR1[2,OI])), POS_MIN)
        IF TMP_MIN GE 1D0/366 THEN CONTINUE
        OPLOT, [DOUBLE(OFFARR1[2,OI])], [DATA[ST.IND_NEU[TI],POS_MIN]]*ST.SF, $
          PSYM=ST.PSYM, COLOR='FF0000'X
      ;PRINT,[DOUBLE(OFFARR1[2,OI])], [DATA[ST.IND_NEU[TI],POS_MIN]]*ST.SF,FORMAT='(2F30.15)'
      ENDFOR
    ENDIF
  ENDIF
  ;PRINT,'DONE WITH OFFSET'
  ;<<<
  
  ;;>>>START-OF-PSDECAYS
  ;;PLOT PSDECAY EPOCHES, IF THERE ARE ANY.
  ;PRINT,'PSDECAY'
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PSDECAY')
  CKB_PSDECAY=WIDGET_INFO(ID,/BUTTON_SET)
  IF PTR_VALID(ST.PSDECAYS) && CKB_PSDECAY EQ 1 THEN BEGIN
    OFFARR=*ST.PSS
    ;HELP,OFFARR
    ;HELP,ST.SITE_CUR
    POS=WHERE( (OFFARR[0,*] EQ 'ALL' OR OFFARR[0,*] EQ STRUPCASE(ST.SITE_CUR)) AND OFFARR[1,*] EQ STRUPCASE(NEUSTR[TI]) )
    ;PRINT, POS
    IF POS[0] NE -1 THEN BEGIN
      OFFARR1=OFFARR[*,POS]
      ;HELP,OFFARR1
      ;PRINT,OFFARR1
      FOR OI=0, N_ELEMENTS(OFFARR1[0,*])-1 DO BEGIN
        TIME=DOUBLE(OFFARR1[2,OI])
        ;STOP
        IF TIME LT MIN(TIME_AXES_VAL) || TIME GT MAX(TIME_AXES_VAL) THEN CONTINUE
        ;PLOT VERTICAL LINE
        OPLOT, [DOUBLE(OFFARR1[2,OI]),DOUBLE(OFFARR1[2,OI])], [-1D32,1D32], $
          PSYM=0, COLOR='FF2211'X, LINESTYLE=1,THICK=2
        ;PLOT OFFSET POINT, IF PRESENTS.
        TMP_MIN = MIN(ABS(TIME_AXES_VAL - DOUBLE(OFFARR1[2,OI])), POS_MIN)
        IF TMP_MIN GE 1D0/366 THEN CONTINUE
        OPLOT, [DOUBLE(OFFARR1[2,OI])], [DATA[ST.IND_NEU[TI],POS_MIN]]*ST.SF, $
          PSYM=ST.PSYM, COLOR='FF0000'X
      ENDFOR
    ENDIF
  ENDIF
  ;<<<END-OF-PSDECAYS
  ;
  ;>>>
  ;OVERPLOT TREND/SEASONAL LINES
  ;PRINT,'MODELED'
  IF TOTAL(ST.OVERPLOT) GT 0 THEN BEGIN
    CASE ST.TS_TYPE OF
      'JPL LAT/LON/RAD': BEGIN
        SF=10D0
      END
      
      ELSE: BEGIN
        SF=1000D0
      END
    ENDCASE
    DATA1=DATA[[ST.IND_TIME,ST.IND_NEU],*]*SF
    DATA1[0,*] = TIME_AXES_VAL
    ;STOP
    T=REFORM(TIME_AXES_VAL_DYR)
    ;T=REFORM(TIME_AXES_VAL)
    X=REFORM(DATA[ST.IND_NEU[TI],*])
    IF ST.IND_NEUERR[TI] NE -1 THEN BEGIN
      XE=REFORM(DATA[ST.IND_NEUERR[TI],*])
    ENDIF ELSE BEGIN
      XE=!VALUES.D_NAN
    ENDELSE
    ;STOP
    ;help,t,x,xe
    PLIST=[0,0,0,0,0,0]
    CMDSTR='TS_MODEL,T,X,YFIT=YFIT,RMSE=RMS,RESIDUAL=RTS,COEF=COEF,SLOPE=SLOPE,SIGMA=SIGMA'
    ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_TREND')
    CKB_TREND=WIDGET_INFO(ID,/BUTTON_SET)
    PLIST[0]=CKB_TREND
    ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_ANNUAL')
    CKB_ANNUAL=WIDGET_INFO(ID,/BUTTON_SET)
    PLIST[1]=CKB_ANNUAL
    ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_SEMIANNUAL')
    CKB_SEMIANNUAL=WIDGET_INFO(ID,/BUTTON_SET)
    PLIST[2]=CKB_SEMIANNUAL
    
    IF CKB_ANNUAL EQ 1 THEN BEGIN
      CMDSTR=CMDSTR+',/ANNUAL'
    ENDIF
    IF CKB_SEMIANNUAL EQ 1 THEN BEGIN
      CMDSTR=CMDSTR+',/SEMIANNUAL'
    ENDIF
    
    ;PRINT,' RATE OFFSET'
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OFFSET')
    CKB_OFFSET=WIDGET_INFO(ID,/BUTTON_SET)
    IF PTR_VALID(ST.OFFSETS) && CKB_OFFSET THEN BEGIN
      OFFARR=*ST.OFFS
      ;STOP
      POS=WHERE( (OFFARR[0,*] EQ 'ALL' OR OFFARR[0,*] EQ STRUPCASE(ST.SITE_CUR)) AND OFFARR[1,*] EQ STRUPCASE(NEUSTR[TI]) )
      IF POS[0] NE -1 THEN BEGIN
        OFFS=DOUBLE(OFFARR[2,POS])
        OFFSETS=DBLARR(3,N_ELEMENTS(OFFS))
        OFFSETS[*,*]=-9999
        OFFSETS[2,*]=OFFS
        ;PRINT,OFFSETS
        POS=WHERE(OFFS GE FIRST(T) AND OFFS LE LAST(T))
        IF POS[0] NE -1 THEN BEGIN
          OFFSETS=OFFSETS[*,POS]
          ;PRINT,OFFSETS
          CMDSTR=CMDSTR+',OFFSET=OFFSETS'
        ENDIF
      ENDIF;
    ENDIF
    
    ;FOR PSDECAY
    ;PRINT,' RATE PSDECAY'
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PSDECAY')
    CKB_PSDECAY=WIDGET_INFO(ID,/BUTTON_SET)
    IF PTR_VALID(ST.PSDECAYS) && CKB_PSDECAY THEN BEGIN
      PSARR=*ST.PSS
      POS=WHERE( (PSARR[0,*] EQ 'ALL' OR PSARR[0,*] EQ STRUPCASE(ST.SITE_CUR)) AND PSARR[1,*] EQ STRUPCASE(NEUSTR[TI]) )
      IF POS[0] NE -1 THEN BEGIN
        PSDECAY=DOUBLE(PSARR[2,POS])
        PSDECAYS=DBLARR(4,N_ELEMENTS(PSDECAY))
        PSDECAYS[*,*]=-9999
        PSDECAYS[3,*]=PSDECAY
        ;STOP
        POS=WHERE(PSDECAY GE FIRST(T) AND PSDECAY LE LAST(T))
        IF POS[0] NE -1 THEN BEGIN
          PSDECAYS=PSDECAYS[*,POS]
          ;PRINT,PSDECAYS
          ;QUERY PS_TYPE (0: EXP; 1-LOG)
          ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_DPL_PSDECAY')
          PS_TYPE=WIDGET_INFO(ID,/DROPLIST_SELECT)
          CMDSTR=CMDSTR+',PSDECAY=PSDECAYS, PS_TYPE=PS_TYPE'
        ENDIF
      ENDIF
      
    ENDIF
    ;STOP
    ;PRINT,CMDSTR
    IF N_ELEMENTS(X) LT 2 THEN BEGIN  ;If too few data point
      YFIT=X
    ENDIF ELSE BEGIN
      TMP=EXECUTE(CMDSTR)
      ;HELP, RTS, YFIT
      ;HELP, CCOV
      ;PRINT,COEF
      IF N_ELEMENTS(YFIT) NE 0 THEN BEGIN
        OPLOT,TIME_AXES_VAL,REFORM(YFIT)*ST.SF,PSYM=0, COLOR='000000'X
      ENDIF
      ;HELP,COEF,YFIT,RTS,SIGMA
      ;HELP,CMDSTR
      IF N_ELEMENTS(RMS) EQ 0 THEN RMS=0  ;??
      ;
      IF FINITE(XE[0]) EQ 1 && N_ELEMENTS(RTS) GT 0 THEN BEGIN
        W=1D0/XE^2
        CHISQR=TOTAL(RTS^2*W)
        NP=N_ELEMENTS(COEF)
        NUMDATA=N_ELEMENTS(RTS)
        NRMS=SQRT(CHISQR/(NUMDATA-NP))
        WRMS=SQRT((NUMDATA/(NUMDATA-NP))*CHISQR/TOTAL(W))
        ;HELP,NRMS,WRMS
        ;STOP
        CKB_REALSIG=1
        IF CKB_REALSIG EQ 1 THEN BEGIN
          ;STOP
          ;always use dyr when calculating realistic sigma (instead of current type of time axis)
          REALISTIC_SIGMA,TRANSPOSE([[TIME_AXES_VAL_DYR],[X],[XE]]), RTS,NRMSr=NRMSR
          ;PRINT,'NRMS:',NRMS,NRMSR
          IF FINITE(nrmsr) THEN BEGIN  ;Tue, Mar 29, 2016 10:51:21 PM
            SLOPE[1]=SQRT(SLOPE[1]^2*(nrmsR/nrms)^2)
          ENDIF
        ENDIF
        
      ENDIF
      ;
      TMPSTR='slope: '+STRTRIM(STRING(SLOPE[0]*ST.SF,FORMAT='(F9.2)'),2)+' +-'+ $
        STRTRIM(STRING(SLOPE[1]*ST.SF,FORMAT='(F9.2)'),2)+'!Lmm/yr!N '+ $
        'rms: '+STRTRIM(STRING(ABS(RMS)*ST.SF,FORMAT='(F9.2)'),2)+'!Lmm!N'
        
      IF FINITE(XE[0]) EQ 1 && N_ELEMENTS(RTS) GT 0 THEN BEGIN
        TMPSTR=TMPSTR+' wrms: '+STRTRIM(STRING(WRMS*1D3,FORMAT='(F9.2)'),2)+'!Lmm!N'
        TMPSTR=TMPSTR+' nrms: '+STRTRIM(STRING(NRMS*1D0,FORMAT='(F9.2)'),2)
      ;STOP
      ENDIF
      
      XYOUTS,MAX(TIME_AXES_VAL), $
        MAX(YTICK_GET)-3*!D.Y_CH_SIZE*(MAX(YTICK_GET)-MIN(YTICK_GET))/300D0, $
        TMPSTR,/DATA, COLOR='ff0000'x,ALIGNMENT=1, $
        CHARSIZE=1.1
        
    ENDELSE
  ENDIF
  ;<<<
  
  ;>>>
  ;PLOT OUTLIERS
  ;PRINT,'PLOT OUTLIERS'
  ;HELP, (*ST.OUTLIERS)[TI]
  IF PTR_VALID((*ST.OUTLIERS)[TI]) && ST.PANEL_OUTLIER_CKB_PREVIEW EQ 0 THEN BEGIN
    OUTLIERS=[*((*ST.OUTLIERS)[TI])]
    OPLOT,TIME_AXES_VAL_ORI(OUTLIERS), DATA_ORI[NEUIS[TI],OUTLIERS]*ST.SF,  $
      COLOR='FF0000'X, PSYM=(ST.PSYM > 1)
  ENDIF
  ;<<<
  ;;HOW TO PLOT USING THE TOTAL WINDOW AREA??
  ENDIT:
  ST.CURDRAW=NEUSTR[TI]
  ;  ;SAVE AXISES RANGE
  ;  ST.X=PTR_NEW(!X)
  ;  ST.Y=PTR_NEW(!Y)
  ;  ST.Z=PTR_NEW(!Z)
  ;
  ;   PRINT,(*(ST.Y)).RANGE
  ;PRINT,!Y.RANGE
  ;stop
  
  WSET,DRAW_IDS[TI]
  ;DEVICE,COPY=[0,0,678,178,0,0,OLD_WIN]
  DEVICE,COPY=[0,0,info.SCR_XSIZE,info.SCR_YSIZE,0,0,OLD_WIN]
  WDELETE,OLD_WIN
  ;PRINT,OLD_WIN
  WIDGET_CONTROL,EV.TOP, SET_UVALUE=ST,/NO_COPY
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_UPDATE_DRAW_NEU, EV, _EXTRA=_EX
  ;HELP, _EX,/ST
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF NOT PTR_VALID(ST.DATA) THEN BEGIN
    IGPS_CLEAR_DRAWS, EV
    RETURN
  ENDIF
  
  IF ST.TS_TYPE NE 'CORRCOEF XY' && $
    ST.TS_TYPE NE 'CORRCOEF MAT' && $   Z< , DMS,. .
  ST.TS_TYPE NE 'POWER SPECTRUM' && $
    ST.TS_TYPE NE 'CATS PSD' THEN BEGIN
    IGPS_CONVERT_TIME_AXES, EV
  ENDIF
  
  IGPS_CLEAR_DRAWS, EV
  
  ;STOP
  NCOL=N_ELEMENTS(WHERE(ST.IND_NEU NE -1))
  FOR I=0,NCOL-1 DO BEGIN
    IGPS_UPDATE_DRAW, EV,DI=I, _EXTRA=_EX
  ENDFOR
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_UPDATE_LBL_STATUS_BUSY, EV, DIRECTION=DIRE, PERCENT=PERCENT
  IF N_ELEMENTS(DIRE) EQ 0 THEN BEGIN
    DIRE=ULONG64(SYSTIME(1) MOD 4)
  ;PRINT,DIRE
  ENDIF
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE DIRE OF
    0: BEGIN
      STR='-'
    END
    1: BEGIN
      STR='\'
    END
    2: BEGIN
      STR='|'
    END
    3: BEGIN
      STR='/'
    END
  ENDCASE
  
  IF N_ELEMENTS(PERCENT) GT 0 THEN BEGIN
    STR=STRING(STR,STRTRIM(PERCENT,2)+'%',FORMAT='(A1,1X,A)')
  ENDIF
  
  WIDGET_CONTROL, ST.LBL_ID, SET_VALUE=STR
;WIDGET_CONTROL, ST.LBL_ID, TIMER=1
END

;Sun Nov 22 22:03:14 CST 2009   tianyf
;There is a bug when the "fix" checkbox is selected. When "Fix" is YES, then the
;FROM and TO textboxes cannot be updated, which caused that no time series plots
;will be shown when switched among "dyr", "mjd", and "jd" radio buttons.
;This bug has no solution as of now.
;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_UPDATE_TXT_FROM_TO, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF ST.IS_FROM_TO_FIXED EQ 1 THEN BEGIN
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
    RETURN
  ENDIF
  WIDGET_CONTROL, ST.ID_FROM, SET_VALUE=STRTRIM(ST.DRAW_N_XRANGE_VIS_USE[0],2)
  WIDGET_CONTROL, ST.ID_TO, SET_VALUE=STRTRIM(ST.DRAW_N_XRANGE_VIS_USE[1],2)
  
  ST.FROM=(ST.DRAW_N_XRANGE_VIS_USE)[0]
  ST.TO=(ST.DRAW_N_XRANGE_VIS_USE)[1]
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
;PLOT RAW OR RESIDUAL TIME SERIES?
PRO IGPS_UPDATE_ST_DATA, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF NOT PTR_VALID(ST.DATA_RAW) THEN RETURN
  CASE ST.DATA_AXES_TYPE OF
    'RAW': BEGIN
      ST.DATA=ST.DATA_RAW
    END
    'RESID': BEGIN
      DATA=*ST.DATA_RAW
      NEUSTR=['N','E','U']
      ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_ANNUAL')
      CKB_ANNUAL=WIDGET_INFO(ID,/BUTTON_SET)
      ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_SEMIANNUAL')
      CKB_SEMIANNUAL=WIDGET_INFO(ID,/BUTTON_SET)
      ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OFFSET')
      CKB_OFFSET=WIDGET_INFO(ID,/BUTTON_SET)
      ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PSDECAY')
      CKB_PSDECAY=WIDGET_INFO(ID,/BUTTON_SET)
      
      T=REFORM(*ST.TIME_AXES_VAL)
      ;print,first(t)
      ;STOP
      IND_NEU=ST.IND_NEU
      POS=WHERE(IND_NEU NE -1)
      IND_NEU=IND_NEU[POS]
      FOR NEUI=0,N_ELEMENTS(IND_NEU)-1 DO BEGIN
        X=REFORM(DATA[IND_NEU[NEUI],*])
        CMDSTR='TS_MODEL,T,X,YFIT=YFIT,RMSE=RMS,RESIDUAL=RTS,COEF=COEF,SLOPE=SLOPE,SIGMA=SIGMA'
        IF CKB_ANNUAL EQ 1 THEN BEGIN
          CMDSTR=CMDSTR+',/ANNUAL'
        ENDIF
        IF CKB_SEMIANNUAL EQ 1 THEN BEGIN
          CMDSTR=CMDSTR+',/SEMIANNUAL'
        ENDIF
        
        ;FOR OFFSET
        IF PTR_VALID(ST.OFFSETS) && CKB_OFFSET THEN BEGIN
          OFFARR=*ST.OFFS
          POS=WHERE( (OFFARR[0,*] EQ 'ALL' OR OFFARR[0,*] EQ STRUPCASE(ST.SITE_CUR)) AND OFFARR[1,*] EQ STRUPCASE(NEUSTR[NEUI]) )
          IF POS[0] NE -1 THEN BEGIN
            OFFS=DOUBLE(OFFARR[2,POS])
            ;FIX THE BUG WHEN OFFSETS ARE OUTSIDE CURRENT TIM SPAN   2011OCT07 TIANYF
            POSOFFS=WHERE(OFFS GT FIRST(T) AND OFFS LT LAST(T))
            IF POSOFFS[0] NE -1 THEN BEGIN
              OFFSETS=DBLARR(3,N_ELEMENTS(OFFS))
              OFFSETS[*,*]=-9999
              OFFSETS[2,*]=OFFS
              CMDSTR=CMDSTR+',OFFSET=OFFSETS'
            ENDIF
          ENDIF
        ENDIF
        
        ;FOR PSDECAY
        IF PTR_VALID(ST.PSDECAYS) && CKB_PSDECAY THEN BEGIN
          PSARR=*ST.PSS
          POS=WHERE( (PSARR[0,*] EQ 'ALL' OR PSARR[0,*] EQ STRUPCASE(ST.SITE_CUR)) AND PSARR[1,*] EQ STRUPCASE(NEUSTR[NEUI]) )
          IF POS[0] NE -1 THEN BEGIN
            PSDECAY=DOUBLE(PSARR[2,POS])
            ;POSPSDECAYS=WHERE(PSDECAY GT FIRST(T) AND OFFS LT LAST(T))
            POSPSDECAYS=WHERE(PSDECAY GT FIRST(T) AND PSDECAY LT LAST(T)) ;2012jan04
            IF POSPSDECAYS[0] NE -1 THEN BEGIN
              PSDECAYS=DBLARR(4,N_ELEMENTS(PSDECAY))
              PSDECAYS[*,*]=-9999
              PSDECAYS[3,*]=PSDECAY
              CMDSTR=CMDSTR+',PSDECAY=PSDECAYS'
            ENDIF
          ENDIF
        ENDIF
        ;PRINT,CMDSTR
        ;PRINT,OFFSETS
        ;PRINT,FIRST(T)
        ;STOP
        TMP=EXECUTE(CMDSTR)
        ;+bug fixed by tianyf on 2015JUN25
        ;  when only one epoch of data, the residual will be null
        IF N_ELEMENTS(rts) GT 0 THEN $
          DATA[IND_NEU[NEUI],*]=RTS
      ENDFOR
      ;IF PTR_VALID(ST.DATA) THEN PTR_FREE,ST.DATA
      ST.DATA=PTR_NEW(DATA)
    END
  ENDCASE
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
;PURPOSE:
;  Detect outliers positions for each component of current series.
;  Also called by de-outliers (clean) program to find outliers.
PRO IGPS_DETECT_OUTLIERS, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;IF PTR_VALID(ST.OUTLIERS) THEN PTR_FREE,ST.OUTLIERS
  ST.OUTLIERS=PTR_NEW(REPLICATE(PTR_NEW(),3))
  IND_NEU = ST.IND_NEU
  IND_NEUERR = ST.IND_NEUERR
  NEUSTR=['N','E','U']
  ;
  ;Check checkbox status
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_CKB_B')
  IS_CKB_B = WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_CKB_C')
  IS_CKB_C = WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_CKB_D')
  IS_CKB_D = WIDGET_INFO(ID,/BUTTON_SET)
  ;PRINT, IS_CKB_B, IS_CKB_C, IS_CKB_D
  DATA=*ST.DATA
  BDATA=DATA
  T=REFORM(*ST.TIME_AXES_VAL)
  
  TIME_FIRST=FIRST(T)
  TIME_LAST=LAST(T)
  
  
  
  
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_OFFSET')
  CKB_OFFSET=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_PSDECAY')
  CKB_PSDECAY=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_ANNUAL')
  CKB_ANNUAL=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_SEMIANNUAL')
  CKB_SEMIANNUAL=WIDGET_INFO(ID,/BUTTON_SET)
  
  IF IS_CKB_B || IS_CKB_C THEN BEGIN
    RESID=DBLARR(3,N_ELEMENTS(T))
    FOR NEUI=0,N_ELEMENTS(IND_NEU)-1 DO BEGIN
      INDS=-1 ; WE NOW SAVE OUTLIERS FOR EACH COMPONENT.
      ;CALCULATE RMSE FOR EACH COMPONENT
      Y=REFORM(DATA[IND_NEU[NEUI],*])
      CMDSTR='TS_MODEL,T, Y, COEF=COEF, YFIT=YFIT,RMSE=RMSE,SIGMA=SIGMA, RESIDUAL=RESIDUAL,SLOPE=SLOPE'
      ;PRINT,CMDSTR
      IF CKB_ANNUAL THEN BEGIN
        CMDSTR=CMDSTR+', ANNUAL=ANNUAL'
      ENDIF
      IF CKB_SEMIANNUAL THEN BEGIN
        CMDSTR=CMDSTR+', SEMIANNUAL=SEMIANNUAL'
      ENDIF
      ;
      ;CHECK WHTHER THERE ARE ANY OFFSETS
      IF PTR_VALID(ST.OFFSETS) THEN BEGIN
        OFFSETS_STR=*ST.OFFSETS
        OFFSET=[-9999,-9999,-9999D0]
        ;STOP
        FOR OI=0,N_ELEMENTS(OFFSETS_STR)-1 DO BEGIN
          OFF=OFFSETS_STR[OI]
          TMP=STRSPLIT(OFF,'-',/EXTRACT)
          SITE_OI=TMP[0]
          ;PRINT,SITE_OI
          IF STRUPCASE(SITE_OI) NE STRUPCASE(ST.SITE_CUR) THEN CONTINUE
          ;SKIP OTHER COMPONENT (ADDED BY TIANYF ON MAR-20-2016
          IF NEUSTR[NEUI] NE STRUPCASE(TMP[1]) THEN CONTINUE
          ;
          DECYR=DOUBLE(TMP[2])
          IF OFFSET[2] EQ -9999 THEN BEGIN
            OFFSET=[-9999,-9999,DECYR]
          ENDIF ELSE BEGIN
            OFFSET=[[[OFFSET]],[-9999,-9999,DECYR]]
          ENDELSE
        ENDFOR
      ENDIF
      ;
      IF CKB_OFFSET && N_ELEMENTS(OFFSET) GE 3 && OFFSET[2,0] NE -9999 THEN BEGIN
        ;STOP
        ;CHECK PSDECAY/OFFSET EPOCHS ARE IN THE RANGE OF OBSERVATIONS
        IND=INDGEN(N_ELEMENTS(OFFSET[0,*]))
        FOR OI=0,N_ELEMENTS(OFFSET[0,*])-1 DO BEGIN
          IF OFFSET[2,OI] LT TIME_FIRST || OFFSET[2,OI] GT TIME_LAST THEN IND[OI]=-1
        ENDFOR
        POS=WHERE(IND GT -1)
        ;stop
        IF POS[0] NE -1 THEN BEGIN
          OFFSET=OFFSET[*,POS]
          CMDSTR=CMDSTR+', OFFSET=OFFSET'
        ENDIF
      ENDIF
      ;
      ;
      ;CHECK PSDECAY
      IF PTR_VALID(ST.PSDECAYS) THEN BEGIN
        PSDECAYS_STR=*ST.PSDECAYS
        PSDECAY=[-9999,-9999,-9999,-9999D0]
        ;STOP
        FOR PI=0,N_ELEMENTS(PSDECAYS_STR)-1 DO BEGIN
          PS=PSDECAYS_STR[PI]
          TMP=STRSPLIT(PS,'-',/EXTRACT)
          SITE_PI=TMP[0]
          ;PRINT,SITE_OI
          IF STRUPCASE(SITE_PI) NE STRUPCASE(ST.SITE_CUR) THEN CONTINUE
          IF NEUSTR[NEUI] NE STRUPCASE(TMP[1]) THEN CONTINUE
          DECYR=DOUBLE(TMP[2])
          IF PSDECAY[3] EQ -9999 THEN BEGIN
            PSDECAY=[-9999,-9999,-9999,DECYR]
          ENDIF ELSE BEGIN
            PSDECAY=[[[PSDECAY]],[-9999,-9999,-9999,DECYR]]
          ENDELSE
        ENDFOR
      ENDIF
      IF CKB_PSDECAY && N_ELEMENTS(PSDECAY) GE 4 && PSDECAY[3,0] NE -9999 && NEUI NE 2 THEN BEGIN
        ;CHECK PSDECAY/OFFSET EPOCHS ARE IN THE RANGE OF OBSERVATIONS
        IND=INDGEN(N_ELEMENTS(PSDECAY[0,*]))
        FOR PI=0,N_ELEMENTS(PSDECAY[0,*])-1 DO BEGIN
          IF PSDECAY[3,PI] GE TIME_LAST THEN IND[PI]=-1
        ENDFOR
        POS=WHERE(IND GT -1)
        IF POS[0] NE -1 THEN BEGIN
          PSDECAY=PSDECAY[*,POS]
          CMDSTR=CMDSTR+', PSDECAY=PSDECAY, PS_TYPE=1'
        ENDIF
      ENDIF
      
      ;PRINT,CMDSTR
      ;PRINT,'RAD_OPT:',RAD_OPT
      ;CONTINUE
      Y=REFORM(DATA[IND_NEU[NEUI],*])
      ;PERFORM THE MODELLING [CALL TS_MODEL, ...]
      ;STOP
      IF N_ELEMENTS(Y) LT 2 THEN BEGIN
        RETURN  ;TOO FEW DATA POINT
      ENDIF
      TMP=EXECUTE(CMDSTR)
      IF N_ELEMENTS(RESIDUAL) LT 2 THEN BEGIN
        MSGBOX,!ERROR_STATE.MSG
        ;STOP
        RETURN  ;TOO FEW DATA POINT
      ENDIF
      RESID[NEUI,*]=RESIDUAL
    ENDFOR
    
  ENDIF
  
  
  ;PRINT,'[DEBUG]SEARCHING FOR OUTLIERS...'
  IF IS_CKB_B THEN BEGIN
    ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_TXT_NRMS')
    WIDGET_CONTROL, ID, GET_VALUE=NRMS
    NRMS=STRTRIM(NRMS[0],2)
    IF NRMS EQ '' || DOUBLE(NRMS) LE 0 THEN BEGIN
      MSGBOX, 'Factor of RMS ['+NRMS+'] cannot be empty or <= 0!', TITLE='iGPS', DIALOG_PARENT=EV.TOP,/ERROR
      RETURN
    ENDIF
    NRMS=DOUBLE(NRMS)
    FOR NEUI=0,N_ELEMENTS(IND_NEU)-1 DO BEGIN
      INDS=-1 ; WE NOW SAVE OUTLIERS FOR EACH COMPONENT.
      REGRESI=REFORM(RESID[NEUI,*])
      REGSSE=TOTAL(REGRESI^2)
      REGMSE=REGSSE/N_ELEMENTS(DATA[IND_NEU(NEUI),*])
      REGRMSE=SQRT(REGMSE)
      ;PRINT,'REGRMSE FOR '+NEUSTR[NEUI]+':',REGRMSE ;,MOMENT(REGRESI)
      FOR PI=0, N_ELEMENTS(DATA[IND_NEU[NEUI],*])-1 DO BEGIN
        IF ABS(REGRESI[PI]) GT NRMS*REGRMSE THEN BEGIN
          ;PRINT, 'OUTLIER TYPE B:', (*ST.TIME_AXES_VAL)[PI]
          IF INDS[0] EQ -1 THEN BEGIN
            INDS=PI
          ENDIF ELSE BEGIN
            INDS=[INDS,PI]
          ENDELSE
        ENDIF
      ENDFOR
      IF INDS[0] NE -1 THEN BEGIN
        IF NOT PTR_VALID((*ST.OUTLIERS)[NEUI]) THEN BEGIN
          (*ST.OUTLIERS)[NEUI]=PTR_NEW(INDS)
        ENDIF ELSE BEGIN
          (*ST.OUTLIERS)[NEUI]=PTR_NEW([*((*ST.OUTLIERS)[NEUI]),INDS])
        ENDELSE
      ENDIF
    ENDFOR
  ENDIF
  
  ;HELP, ST.OUTLIERS
  
  IF IS_CKB_C THEN BEGIN
    ;
    INDS=-1
    ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_TXT_NIQR')
    WIDGET_CONTROL, ID, GET_VALUE=NIQR
    NIQR=FIX(STRTRIM(NIQR[0]))
    IF NIQR LE 0 THEN BEGIN
      MSGBOX, 'Invalid factor for IQR! Use default [3].',TITLE='iGPS',/WARNING,DIALOG_PARENT=EV.TOP
      NIQR=3
    ENDIF
    ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_TXT_IQR_WIN')
    WIDGET_CONTROL, ID, GET_VALUE=SZ_WIN
    SZ_WIN=FIX(STRTRIM(SZ_WIN[0]))
    IF SZ_WIN LE 0 THEN BEGIN
      MSGBOX, 'Invalid IQR window width! Use default [365].',TITLE='iGPS',/WARNING,DIALOG_PARENT=EV.TOP
      SZ_WIN=365
    ENDIF
    
    HSZWIN=SZ_WIN/2
    ;INDS=-1
    FOR NEUI=0,N_ELEMENTS(IND_NEU)-1 DO BEGIN
    
      FOR PI=0, N_ELEMENTS(DATA[IND_NEU[NEUI],*])-1 DO BEGIN
        XMIN=PI-HSZWIN
        XMAX=PI+HSZWIN
        IF XMIN LT 0 THEN BEGIN
          XMIN=0
          XMAX=HSZWIN*2
        ENDIF
        IF XMAX GT N_ELEMENTS(DATA[IND_NEU[NEUI],*])-1 THEN BEGIN
          XMAX=N_ELEMENTS(DATA[IND_NEU[NEUI],*])-1
          XMIN=XMAX-HSZWIN*2
          IF XMIN LT 0 THEN XMIN=0
        ENDIF
        ;THE LENGTH OF TIME SERIES IS AT LEAST HSZWIN*2+1
        ;X=DATA[IND_NEU[NEUI],XMIN:XMAX]
        X=RESID[NEUI,XMIN:XMAX]
        XMEDIAN=MEDIAN(X)
        XIQR=IQR(X)
        ;VI=DATA[IND_NEU[NEUI],PI]
        VI=RESID[NEUI,PI]
        IF ABS(VI-XMEDIAN) GT NIQR*XIQR THEN BEGIN
          IF INDS[0] EQ -1 THEN BEGIN
            INDS=PI
          ENDIF ELSE BEGIN
            INDS=[INDS, PI]
          ENDELSE
        ;PRINT,'OUTLIER TYPE C:', (*ST.TIME_AXES_VAL)[PI]
        ;HELP, INDS
        ENDIF
        
      ENDFOR
      IF INDS[0] NE -1 THEN BEGIN
        IF NOT PTR_VALID((*ST.OUTLIERS)[NEUI]) THEN BEGIN
          (*ST.OUTLIERS)[NEUI]=PTR_NEW(INDS)
        ENDIF ELSE BEGIN
          (*ST.OUTLIERS)[NEUI]=PTR_NEW([*((*ST.OUTLIERS)[NEUI]),INDS])
        ENDELSE
      ;HELP, INDS,*((*ST.OUTLIERS)[NEUI])
      ENDIF
    ENDFOR ;END-OF-EACH-COMPONENT-LOOP
  ENDIF
  
  IF IS_CKB_D THEN BEGIN
    INDS=-1
    ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_TXT_FET')
    WIDGET_CONTROL, ID, GET_VALUE=MM_VAL
    MM_VAL=STRTRIM(MM_VAL[0])
    
    IF MM_VAL EQ '' THEN BEGIN
      NOT_VALID_FET:
      MSGBOX, 'Invalid position errors! Use default [10,10,20 mm].',TITLE='iGPS',/WARNING,DIALOG_PARENT=EV.TOP
      MM_VAL=[.01,.01,.02]
    ENDIF  ELSE BEGIN
      MM_VAL=STRSPLIT(MM_VAL, ',', /EXTRACT)
      IF N_ELEMENTS(MM_VAL) NE 3 THEN GOTO, NOT_VALID_FET
      MM_VAL=DOUBLE(MM_VAL)
      POS=WHERE(MM_VAL LE 0)
      IF POS[0] NE -1 THEN GOTO, NOT_VALID_FET
    ENDELSE
    
    
    ;PRINT,MM_VAL
    IND_ERR = ST.IND_NEUERR
    IF IND_ERR[0] EQ -1 THEN GOTO, OUT_CKB_D
    FOR NEUI=0,N_ELEMENTS(IND_NEU)-1 DO BEGIN
      INDS=WHERE(DATA[IND_ERR[NEUI],*]*ST.SF GE MM_VAL[NEUI])
      IF INDS[0] NE -1 THEN BEGIN
        ;PRINT,'OUTLIERS TYPE D:',(*ST.TIME_AXES_VAL)[INDS]
        IF NOT PTR_VALID((*ST.OUTLIERS)[NEUI]) THEN BEGIN
          (*ST.OUTLIERS)[NEUI]=PTR_NEW(INDS)
        ENDIF ELSE BEGIN
          (*ST.OUTLIERS)[NEUI]=PTR_NEW([*((*ST.OUTLIERS)[NEUI]),INDS])
        ENDELSE
      ENDIF
    ENDFOR
  ENDIF ;ENC-OF-TYPE-D
  OUT_CKB_D:
  
  ;PRINT,'[DEBUG]DONE'
  
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_RESET, EV

  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;;HELP, EV,/ST
  ID_IN=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_IN')
  WIDGET_CONTROL,ID_IN,GET_VALUE=PATH
  PATH = STRTRIM(PATH[0],2)
  ST.PATH = PATH
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_OUT')
  WIDGET_CONTROL,ID,GET_VALUE=OPATH
  OPATH = STRTRIM(OPATH[0],2)
  ST.OPATH = OPATH
  
  ;;;;QUERY DATA TYPE
  ID = WIDGET_INFO( EV.TOP, FIND_BY_UNAME='TS_TYPE')
  WIDGET_CONTROL, ID, GET_VALUE=TS_TYPE
  ;PRINT, 'DT:', TS_TYPE
  
  ST.SF=1000D0  ;SCALE FACTOR (FROM M TO MM IN UNIT)
  ST.IND_NEU[*]=-1
  ST.UNIT=''
  ID_TXT_IN=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='TXT_IN')
  IF TS_TYPE EQ  'CORRCOEF MAT' THEN BEGIN
    WIDGET_CONTROL, ID_TXT_IN, SET_VALUE='STYLE:FILE'
    WIDGET_CONTROL, ID_TXT_IN, SET_VALUE='TITLE:Input File:'
    WIDGET_CONTROL, ID_TXT_IN, SET_VALUE='FILTER:*.snx'
  ENDIF ELSE BEGIN
    WIDGET_CONTROL, ID_TXT_IN, SET_VALUE='STYLE:DIRECTORY'
    WIDGET_CONTROL, ID_TXT_IN, SET_VALUE='TITLE:Input Path:'
  ENDELSE
  
  ID_PLUS_SIO=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_PLUS_SIO_BASE')
  WIDGET_CONTROL,ID_PLUS_SIO,SENSITIVE=0
  ;;SET QUERY STRING
  CASE TS_TYPE OF
    'SIO NEU [ATS]': BEGIN
      DT_QUERYSTR = '*.neu'
      ST.UNIT='m'
      ST.SF=1D0
      ST.FMT='((1x,F10.5,3F10.5,1x,3F10.5))'
      ;SET PANEL_MODEL_CKB_PLUS_SIO ACCORDINGLY
      WIDGET_CONTROL,ID_PLUS_SIO,SENSITIVE=1
    END
    'SIO NEU': BEGIN
      DT_QUERYSTR = '*.neu'
      ST.UNIT='m'
      ST.FMT='((1x,F10.5,1x,I4,1x,I3,3(1x,F12.7),1x,3(1x,F12.7) ))'
      ;SET PANEL_MODEL_CKB_PLUS_SIO ACCORDINGLY
      WIDGET_CONTROL,ID_PLUS_SIO,SENSITIVE=1
    END
    'QOCA MAP': BEGIN
      DT_QUERYSTR = '*.list'
      ST.UNIT='mm'
      ST.SF=1D0
    ;ST.FMT='(F10.5,1x,I4,1x,I3,3F10.5,1x,3F10.5)'
    END
    'SIO XYZ': BEGIN
      DT_QUERYSTR = '*.xyz'
      ST.UNIT='m'
      ST.FMT='(1x,F10.5,I5,I4,3F20.5,3F10.5)'
    END
    'SIO RAW XYZ': BEGIN
      DT_QUERYSTR = '*.xyz'
      ST.UNIT='m'
    ;ST.FMT='(1x,F10.5,I5,I4,3F20.5,3F10.5)'
    END
    'PBO XYZ': BEGIN
      DT_QUERYSTR = '*.pos'
      ST.UNIT='m'
    ;ST.SF=1D0 ; LONGITUDE AND LATITUDE
    END
    'PBO NEU': BEGIN
      DT_QUERYSTR = '*.pos'
      ST.UNIT='m'
    ;ST.SF=1D0 ; LONGITUDE AND LATITUDE
    END
    'CORRCOEF XY': BEGIN
      DT_QUERYSTR = '*.corr'
    END
    'CORRCOEF MAT': BEGIN
      DT_QUERYSTR = '*.snx'  ;TIME-SERIES CORRELATION-COEFFICIENTS MATRIX
      ;WIDGET_CONTROL, ID_TXT_IN, SET_VALUE='/home/tianyf/data/data-out.unavco.org/pub/products/position/pbo.final_frame.pos.pbo.2y.neu/.CORR/PBO_FINAL_SITES_CORR_211_NEU.snx'
      WIDGET_CONTROL, ID_TXT_IN, GET_VALUE=FILE
      FILE=STRTRIM(FILE[0], 2)
      IF FILE EQ '' THEN RETURN
      ;HELP, FILE
      IF ~ FILE_TEST(FILE, /REGULAR) THEN RETURN
      READ_CORR_SNX, $
        FILE, $
        SITES=SITES, $
        CORR=CORR, $
        BLEN_DEG=BLEN_DEG, $
        BLEN_KM=BLEN_KM
      ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='LST_SITE')
      WIDGET_CONTROL, ID, SET_VALUE=SITES
      WIDGET_CONTROL, ID, SET_UVALUE=SITES
      ST.PANEL_CORR_CORR = PTR_NEW(CORR)
      ST.PANEL_CORR_BLEN = PTR_NEW(BLEN_DEG)
    ;STOP
    ;ST.PANEL_CORR_SITES = PTR_NEW(SITES)
      
    END
    'CMONOC TS': BEGIN
      DT_QUERYSTR = '*.list'
      ;DT_QUERYSTR = '*.neu'
      ST.UNIT='m'
    END
    'ISCEA': BEGIN
      DT_QUERYSTR = '*.neu'
      ST.UNIT='m'
    END
    'ISCEA [Detrend]': BEGIN
      DT_QUERYSTR = '*.neu'
      ST.UNIT='m'
    END
    'ISCEA BERN': BEGIN
      DT_QUERYSTR = '*.neu'
      ST.UNIT='m'
    END
    'JPL LAT/LON/RAD': BEGIN
      DT_QUERYSTR = '*.lat'
      ;ST.SF=100D0   ;JPL SEIRES ARE IN CM UNIT.
      ST.SF=10D0 ; scale value used to produce positions in meter
      ST.UNIT='cm'
    END
    'USGS PASADENA': BEGIN
      DT_QUERYSTR = '*.ts'
    END
    'GLOBK': BEGIN
      DT_QUERYSTR = 'mb_*.dat1'
      ST.SF=1D3 ; scale value used to produce positions in meter
      ST.UNIT='m'
    END
    'QOCA ATML LOAD': BEGIN
      DT_QUERYSTR = '*.aload'
      ST.SF=1
      ST.UNIT='mm'
      ST.FMT='(1x,F10.5,1x,I04,1x,I03,3(1x,F12.7))'
    END
    'QOCA OTL LOAD': BEGIN
      DT_QUERYSTR = '*.oload'
      ST.SF=1
      ST.UNIT='mm'
      ST.FMT='(1x,F10.5,1x,I04,1x,I03,3(1x,F12.7))'
    END
    'QOCA SNOW LOAD': BEGIN
      DT_QUERYSTR = '*.snow'
      ST.SF=1
      ST.UNIT='mm'
      ST.FMT='(1x,F10.5,1x,I04,1x,I03,3(1x,F12.7))'
    END
    'QOCA SOIL LOAD': BEGIN
      DT_QUERYSTR = '*.soil'
      ST.SF=1
      ST.UNIT='mm'
    END
    'APLO LOAD COMB': BEGIN
      DT_QUERYSTR = '*.load'
      ST.SF=1
    END
    'SBL LOAD': BEGIN
      DT_QUERYSTR = '*.txt'
      ST.SF=1
    END
    'SBL LOAD [Operational]': BEGIN
      DT_QUERYSTR = '*.neu'
      ST.SF=1D0
    END
    'CATS': BEGIN
      DT_QUERYSTR = '*.cats'
      ;DT_QUERYSTR = '*.neu'
      ST.FMT='(1x,F10.5,3F10.4,1X,3F10.4)'
    END
    'CATS PSD': BEGIN
      DT_QUERYSTR = '*.psd'
      ST.SF=1D-3
    END
    'POWER SPECTRUM': BEGIN
      DT_QUERYSTR = '*.psd'
      ST.SF=1
    END
    'ITRF05 RESIDUAL': BEGIN
      DT_QUERYSTR='*.DN'
      ST.SF=1
    END
    'EABM NEU': BEGIN
      DT_QUERYSTR='*.txt'
      ST.SF=1
    END
    'EST_NOISE OTD': BEGIN
      DT_QUERYSTR='*.n'
      ST.SF=1
    END
    'EST_NOISE OTR': BEGIN
      DT_QUERYSTR='*.n'
      ST.SF=1
    END
    'EST_NOISE OTX': BEGIN
      DT_QUERYSTR='*.n'
      ST.SF=1
    END
    'EST_NOISE RESID': BEGIN
      DT_QUERYSTR='*.n_*.resid.out'
      ST.SF=1
      ST.FMT='(1x,F10.5,1X,I4,1X,I3,1X,3F20.5)'
    END
    'EST_NOISE RESID MODEL': BEGIN
      DT_QUERYSTR='*.n_*.resid.out'
      ST.SF=1
      ST.FMT='(1x,F10.5,1X,I4,1X,I3,1X,3F20.5)'
    END
    'EST_NOISE RESID DATA': BEGIN
      DT_QUERYSTR='*.n_*.resid.out'
      ST.SF=1
      ST.FMT='(1x,F10.5,1X,I4,1X,I3,1X,3F20.5)'
    END
    'GSI': BEGIN
      DT_QUERYSTR='*.pos'
      ST.SF=1
      ST.FMT='(1x,F10.5,1X,I4,1X,I3,1X,3F20.5)'
    END
    'Tah mb_ files': BEGIN
      DT_QUERYSTR='mb_*.dat1'
    END
    'SCEC Transient CSV': BEGIN
      DT_QUERYSTR='*.csv'
    END
    'TRACK': BEGIN
      DT_QUERYSTR='*.trk'
    END
    'Caltech Nepal': BEGIN
      DT_QUERYSTR='*_up.plt'
    END
    'USGS RNEU': BEGIN
      DT_QUERYSTR='*.rneu'
    END
    'GEONET': BEGIN
      DT_QUERYSTR='*_n.plt'
    END
    'Highrate NEU': BEGIN
      DT_QUERYSTR='*.hneu'
    END
    'YICE': BEGIN
      DT_QUERYSTR='*.dat'
    END
    'ERCE': BEGIN
      DT_QUERYSTR='*.list'
      ST.SF=1
    END
    'GPS LAB': BEGIN
      DT_QUERYSTR='*.cor'
    END
    'EOST Loading Service': BEGIN
      DT_QUERYSTR='*.*'
    END
    ELSE: BEGIN
      DT_QUERYSTR = ''
      MSGBOX,'Not supported data type.',TITLE='iGPS',DIALOG_PARENT=EV.TOP,/ERROR
    END
  ENDCASE
  ;HELP, DT_QUERYSTR
  
  ST.DT_QUERYSTR=DT_QUERYSTR
  
  ;STOP
  
  ;;UPDATE LIST (SITE LIST)
  CASE TS_TYPE OF
    'CORRCOEF MAT': BEGIN
    
    END
    'GLOBK': BEGIN  ;THE SAME SITE MIGHT HAVE SEVERAL FILES.
      FILES=FILE_SEARCH(PATH+PATH_SEP()+DT_QUERYSTR, COUNT=NN)
      IF NN LE 0 THEN BEGIN
        STRBUF=''
      ENDIF ELSE BEGIN
        STRBUF=STRMIDS(GETFILENAME(FILES),3,4)
        STRBUF1=STRBUF[SORT(STRBUF)]
        STRBUF2=STRBUF1[UNIQ(STRBUF1)]
        STRBUF=STRBUF2
      ENDELSE
    END
    'GSI': BEGIN
      FILES=FILE_SEARCH(PATH+PATH_SEP()+DT_QUERYSTR, COUNT=NN)
      ;HELP, NN
      IF NN LE 0 THEN BEGIN
        STRBUF=''
      ENDIF ELSE BEGIN
        ;POS=STRPOS(FILES[NN-1],GETFILESUFFIX(FILES[NN-1]))
        ;PRINT,POS
        STRBUF=STRMIDS(GETFILENAME(FILES),2,4)
      ;HELP, STRBUF
      ;PRINT,STRBUF
      ;STOP
      ENDELSE
      
    END
    'Tah mb_ files': BEGIN  ;The same as the above globk files.
      FILES=FILE_SEARCH(PATH+PATH_SEP()+DT_QUERYSTR, COUNT=NN)
      ;HELP, NN
      IF NN LE 0 THEN BEGIN
        STRBUF=''
      ENDIF ELSE BEGIN
        ;POS=STRPOS(FILES[NN-1],GETFILESUFFIX(FILES[NN-1]))
        ;PRINT,POS
        STRBUF=STRMIDS(GETFILENAME(FILES),3,4)
      ;HELP, STRBUF
      ;PRINT,STRBUF
      ;STOP
      ENDELSE
      
    END
    'SBL LOAD': BEGIN
      FILES=FILE_SEARCH(PATH+PATH_SEP()+DT_QUERYSTR, COUNT=NN)
      IF NN LE 0 THEN BEGIN
        STRBUF=''
      ENDIF ELSE BEGIN
        POS=STRPOS(FILES[NN-1],GETFILESUFFIX(FILES[NN-1]))
        STRBUF=STRMIDS(FILES,POS-17,4)
      ENDELSE
    END
    'SBL LOAD [Operational]': BEGIN
      FILES=FILE_SEARCH(PATH+PATH_SEP()+DT_QUERYSTR, COUNT=NN)
      ;HELP, NN
      IF NN LE 0 THEN BEGIN
        STRBUF=''
      ENDIF ELSE BEGIN
        POS=STRPOS(FILES[NN-1],GETFILESUFFIX(FILES[NN-1]))
        STRBUF=STRMIDS(FILES,POS-5,4)
      ENDELSE
    END
    ELSE: BEGIN
      IF DT_QUERYSTR NE '' THEN  BEGIN
        ;;NOT INCLUDE SUB-DIRECTORIES WHEN SEARCHING FILES
        FILES=FILE_SEARCH(PATH+PATH_SEP()+DT_QUERYSTR,COUNT=NN)
        STRBUF=STRMIDS(DESUFFIX(GETFILENAME(FILES)),0,4)
      ;;
      ENDIF ELSE BEGIN
        STRBUF=''
      ENDELSE
    END
  ENDCASE
  
  ;;IF NO FILES FOUND, THEN CLEAR THE PREVIOUS WORK.
  ;;  -DATA
  ;;  -SITE
  ;;  -ETC.
  
  ;IF PTR_VALID(ST.SITES) THEN PTR_FREE,ST.SITES
  ST.SITES=PTR_NEW(STRBUF)
  
  ;IF PTR_VALID(ST.FILES) THEN PTR_FREE,ST.FILES
  IF N_ELEMENTS(FILES) GT 0 && FILES[0] NE '' THEN BEGIN
    ST.FILES=PTR_NEW(FILES)
  ENDIF ELSE BEGIN
    ST.FILES=PTR_NEW()
  ENDELSE
  ST.SITE_CUR=''
  ;IF PTR_VALID(ST.DATA) THEN PTR_FREE,ST.DATA
  ST.DATA=PTR_NEW()
  
  ST.TS_TYPE=TS_TYPE
  IF N_ELEMENTS(FILES) GT 0 && FILES[0] NE '' THEN BEGIN
    CAPTION=ST.CAPTION+' #['+STRTRIM(N_ELEMENTS(FILES),2)+']: '+PATH
  ENDIF ELSE BEGIN
    CAPTION=ST.CAPTION
  ENDELSE
  WIDGET_CONTROL,EV.TOP,BASE_SET_TITLE=CAPTION
  
  ;STR='To start, select input time series path and choose the right type. Then click site name to display.'
  WIDGET_CONTROL, ST.LBL_ID, SET_VALUE=ST.LBL_TEXT
  
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  ;;CLEAR THE DISPLAY
  IGPS_CLEAR_DRAWS, EV
  ;;CLEAR THE LABEL
  ;;WIDGET_CONTROL, ST.
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='LST_SITE')
  WIDGET_CONTROL,ID,SET_VALUE=STRBUF
  WIDGET_CONTROL,ID,SET_UVALUE=STRBUF,/NO_COPY
;;
  
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_CONVERT_TIME_AXES, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;HOW TO DO THIS CONVERSION?
  ;THE SOURCE FORMAT?
  NDAYS=N_ELEMENTS(*ST.TIME_AXES_VAL_MJD)
  ;STOP
  ;HELP, ST.TIME_AXES_TYPE
  CASE ST.TIME_AXES_TYPE OF
    'DYR': BEGIN
      IF ST.TS_TYPE EQ 'SIO NEU' THEN BEGIN
        DECYRS=REFORM((*ST.DATA)[ST.IND_TIME,*])
      ENDIF ELSE BEGIN
        ;        DECYRS=DBLARR(NDAYS)
        ;        FOR I=0, NDAYS-1 DO BEGIN
        ;          JD_TO_DECYRS,(*ST.TIME_AXES_VAL_MJD)[I], DECYR
        ;          DECYRS[I]=DECYR
        ;        ENDFOR
        JD_TO_DECYRSS,*ST.TIME_AXES_VAL_MJD+0d0, DECYRS
      ;print,total(abs(decyrs-decyrs2))
      ENDELSE
      ;IF PTR_VALID(ST.TIME_AXES_VAL) THEN PTR_FREE,ST.TIME_AXES_VAL
      ST.TIME_AXES_VAL=PTR_NEW(DECYRS)
      JD_TO_DECYRS,ST.DRAW_N_XRANGE_VIS[0], DECYR0
      JD_TO_DECYRS,ST.DRAW_N_XRANGE_VIS[1], DECYR1
      ST.DRAW_N_XRANGE_VIS_USE=[DECYR0,DECYR1]
    ;stop
    END
    'MJD': BEGIN
      ST.TIME_AXES_VAL=ST.TIME_AXES_VAL_MJD
      ST.DRAW_N_XRANGE_VIS_USE=ST.DRAW_N_XRANGE_VIS
    ;PRINT, ST.DRAW_N_XRANGE_VIS_USE
    ;PRINT, ST.DRAW_N_XRANGE_VIS
    END
    'JD': BEGIN
      ;IF PTR_VALID(ST.TIME_AXES_VAL) THEN PTR_FREE,ST.TIME_AXES_VAL
      ST.TIME_AXES_VAL=PTR_NEW(*ST.TIME_AXES_VAL_MJD+2400000.5d0)
      ST.DRAW_N_XRANGE_VIS_USE=ST.DRAW_N_XRANGE_VIS+2400000.5d0
    END
    'YDOY': BEGIN
      PRINT,'Not supported yet'
    END
    'YMD': BEGIN
      PRINT,'Not supported yet'
    END
    ELSE: BEGIN
      PRINT,'iGPS ERROR: unknown x-axes type!'
      RETURN
    END
  ENDCASE
  ;PRINT, 'DRAW_N_XRANGE_VIS_USE:',ST.DRAW_N_XRANGE_VIS_USE
  ST.CAPLEN=(ST.DRAW_N_XRANGE_VIS_USE[1]-ST.DRAW_N_XRANGE_VIS_USE[0])/200D0
  ;PRINT,'ST.CAPLEN:',ST.CAPLEN
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_PANEL_HIDE_ALL, EV
  ;AND SET THE ST.PANEL_CUT_DEF TO 1
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ST.PANEL_CUT_DEF=0
  PANELS=ST.PANELS
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  FOR PI=0, N_ELEMENTS(PANELS)-1 DO BEGIN
    PANEL=PANELS[PI]
    CMDSTR='ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME="PANEL_'+PANEL+'")'
    TMP=EXECUTE(CMDSTR)
    IF ID LE 0 THEN BEGIN
      PRINT,' INVALID PANEL: '+PANEL
      CONTINUE
    ENDIF
    
    WIDGET_CONTROL,ID,MAP=0
    CMDSTR='ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME="BTN_'+PANEL+'")'
    TMP=EXECUTE(CMDSTR)
    WIDGET_CONTROL,ID,SET_BUTTON=0
  ENDFOR
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_PANEL_SHOW, EV, OPT=OPT
  ;;FIRST, HIDE ALL PANELS
  IGPS_PANEL_HIDE_ALL, EV
  
  ;SHOW CURRENT
  CMDSTR='ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME="PANEL_'+OPT+'")'
  TMP=EXECUTE(CMDSTR)
  IF ID EQ 0 THEN BEGIN
    PRINT,'[iGPS_PANEL_SHOW]ERROR: cannot access panel:'+OPT+'!',FORMAT='(A)'
    RETURN
  ENDIF
  WIDGET_CONTROL,ID,MAP=1
  
  ;UPDATE ST.CURDRAW
  ;??ANY USE?
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  ST.CURPANEL=STRUPCASE(OPT)
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_KILL, WWIDGET
;STOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_INIT, WWIDGET
  RESOLVE_ROUTINE,'TS_MODEL',/COMPILE_FULL_FILE
  RESOLVE_ROUTINE,'MSGBOX',/COMPILE_FULL_FILE
  
  
  ;
  ;;SET X-AXIS TIME
  ID = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='RAD_TIME_DYR')
  WIDGET_CONTROL, ID, /SET_BUTTON
  
  ;;CLEAR THE DRAWS
  IDN = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='DRAW_N')
  WIDGET_CONTROL,IDN,GET_VALUE=TMPIDN
  WSET,TMPIDN[0]
  INFO=WIDGET_INFO(IDN,/GEOMETRY)
  ;;HELP,INFO,/ST
  TV,MAKE_ARRAY(INFO.SCR_XSIZE,INFO.SCR_YSIZE,VALUE=255)
  IDE = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='DRAW_E')
  WIDGET_CONTROL,IDE,GET_VALUE=TMPIDE
  WSET,TMPIDE[0]
  TV,MAKE_ARRAY(INFO.SCR_XSIZE,INFO.SCR_YSIZE,VALUE=255)
  IDU = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='DRAW_U')
  WIDGET_CONTROL,IDU,GET_VALUE=TMPIDU
  WSET,TMPIDU[0]
  TV,MAKE_ARRAY(INFO.SCR_XSIZE,INFO.SCR_YSIZE,VALUE=255)
  
  ID_SLIDER = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='SLD_DRAW_N_POS')
  ;;WIDGET_CONTROL, ID_SLIDER, SENSITIVE=0
  ;;PLOT,INDGEN(10),XRANGE=[0,1],YRANGE=[0,1],BACKGROUND='FFFFFF'X,COLOR='000000'X,/NODATA
  
  LST_ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='LST_SITE')
  LBL_ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='LBL_STATUS')
  LBL_TEXT='To start, select input time series path and choose the right type. Then click site name to display.'
  
  LST_OFFSET_ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_OFFSET_LST_OFFSETS')
  LST_PSDECAY_ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_PSDECAY_LST_PSDECAYS')
  
  ;
  ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='RAD_RAW')
  WIDGET_CONTROL, ID, /SET_BUTTON
  
  ID_FROM=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='TXT_FROM')
  ID_TO=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='TXT_TO')
  
  FMT='((F10.5,I5,I4,6(F10.5)))'
  
  PANELS=['FORMAT','COMBINE_ADD','COMBINE_MINUS','SELECTOR','SELECTOR_NET', $
    'SELECTOR_GEOG','CUT', 'DEMEAN','SMOOTH', $
    'STACKING','TS_CORR','CMC_CWSF', 'MODEL','PLOT','STAT', $
    'OUTLIER','OFFSET','PSDECAY','FILEMGR','HARMONICS']
    
    
  ;;SET TLB'S UVALUE
  ST = { $
    DATA:PTR_NEW(), $
    DATA_RAW: PTR_NEW(), $
    
    SITES: PTR_NEW(), $
    SITE_CUR: '', $
    FILES: PTR_NEW(), $
    
    OFFS: PTR_NEW(), $
    OFFSETS: PTR_NEW(), $ ;; TO HOLD ALL OFFSETS, E.G.: LHAS-N-2003-190
    OFF_SORT: 0, $
    
    PSS: PTR_NEW(), $
    PSDECAYS: PTR_NEW(), $
    PS_SORT: 0, $
    
    OUTLIERS: PTR_NEW(REPLICATE(PTR_NEW(),3)), $
    
    ;TSTYPE:'SIO', $
    PATH:'', $
    OPATH:'', $
    TS_TYPE:'SIO NEU', $
    PRESSED_N: 0, $
    IND_NEU: [-1,-1,-1], $
    IND_NEUERR: [-1,-1,-1], $
    IND_TIME: -1, $
    DATA_N: PTR_NEW(), $
    PT_OLD: -1, $
    
    
    
    LST_ID: LST_ID, $
    LST_OFFSET_ID: LST_OFFSET_ID, $
    LST_PSDECAY_ID: LST_PSDECAY_ID, $
    
    DT_QUERYSTR: '*.neu', $
    PANEL_CORR_SOURCE_TYPE: 'CORRFILE', $
    PANEL_CORR_BASELINE_UNIT: 'KM', $
    PANEL_CORR_BASELINE_FILE: '', $
    PANEL_CORR_CORR: PTR_NEW(), $
    PANEL_CORR_BLEN: PTR_NEW(), $
    PANEL_CORR_SITES: PTR_NEW(), $
    PANEL_CORR_SITE_CUR:'', $
    
    SLIDER_PAN_ID: ID_SLIDER, $
    SLIDER_PAN_RANGE: DBLARR(2), $
    SLIDER_PAN_POS: -1D0, $
    
    DRAW_N_PRESSED:0, $
    DRAW_N_RELEASED:0, $
    DRAW_E_PRESSED:0, $
    DRAW_E_RELEASED:0, $
    DRAW_U_PRESSED:0, $
    DRAW_U_RELEASED:0, $
    
    DRAW_N_XRANGE: DBLARR(2), $
    DRAW_N_XRANGE_VIS: DBLARR(2), $
    DRAW_N_XRANGE_VIS_USE: DBLARR(2), $
    DRAW_N_XRANGE_POS_OLD: 1D0, $
    DRAW_N_XRANGE_POS_NEW: 1D0, $
    DRAW_N_XRANGE_SCALE_OLD: 1D0, $
    DRAWID:[TMPIDN[0],TMPIDE[0],TMPIDU[0],-1], $
    DRAWIDS:[IDN,IDE,IDU], $
    LBL_ID:LBL_ID, $  ;STATUS BAR
    LBL_TEXT: LBL_TEXT, $
    
    CURPANEL:'NONE', $
    CURPANELOFFSETRAD:'NEW', $ ;;OPTIONS: NEW/EDIT/DEL (IN UPPERCASE)
    
    CURDRAW:'N', $  ;LAST DRAW N/E/U
    
    ;FOR DEFINE CUTTING DATA SPANS
    PANEL_CUT_DEF: 0, $
    PANEL_CUT_DEF_STARTED: 0, $
    
    ;STYLE FOR PLOTTING
    PSYM:2, $
    
    ;TIME AXES TYPE
    TIME_AXES_TYPE: 'DYR', $
    TIME_AXES_VAL_MJD:PTR_NEW(), $
    TIME_AXES_VAL:PTR_NEW(), $
    TIME_AXES_VAL_DYR:PTR_NEW(), $
    ;MJD:PTR_NEW(), $
    FROM:-1D0, $
    TO:-1D0, $
    ID_FROM: ID_FROM, $
    ID_TO: ID_TO, $
    ;IS FROM~TO FIXED?
    IS_FROM_TO_FIXED:0, $
    
    DATA_AXES_TYPE: 'RAW', $ ;TWO TYPES: RAW & RESID
    
    ;FOR DRAWING ERROR BAR
    CAPLEN: 0D0, $
    ERROR_BAR: 1, $
    
    ;OVERPLOT VARIABLES
    OVERPLOT: INTARR(3), $  ;[TREND,ANNUAL,SEMI-ANNUAL], 1 OR 0.
    
    ;OVERPLOT OUTLIERS
    OVERPLOT_OUTLIER: 0, $
    
    ;FORMAT STRING OF X-AXES TICKS
    XTICK_FMT: '(F7.2)', $
    
    SF:1000D0, $  ;SCALE FACTOR CONVERT POSITIONS TO MILLIMETER (MM)
    UNIT: 'm', $
    
    ;CURRENT TOOL BUTTON
    CUR_TOOL:'', $
    
    ;FOR WRITTING OUT RESULTS
    FMT:FMT, $
    
    ;FOR CURRENT SELECTED SITE
    POS:-1, $
    
    ;WINDOW CAPTION
    CAPTION:'iGPS-IDL toolbox for GPS', $
    
    ;FOR DEFINING STARTING AND ENDING LINES OF CUTTING SPAN
    CUT_START: 0, $  ;0=THIS IS A STARTING POINT; 1=THIS IS THE ENDING POINT.
    CUTS: PTR_NEW(), $ ;FOR STORE CUTTING EPOCHS
    
    ;FOR OUTPUT HEADERS
    HEADER: PTR_NEW(), $
    
    ;PANELS
    PANELS:PANELS, $
    
    ;CONFIRMATION ON DELETION
    IS_CONFIRM_DEL: 1, $
    
    ;WHETHER PREVIEW RESULT OF REMOVING OUTLIERS OR NOT?
    PANEL_OUTLIER_CKB_PREVIEW: 0, $ ;DEFAULT "NO".
    
    ;time series interval in days.
    INTERVAL: 1D0, $ ;default is 1 for daily data. changed to the minimum interval when loading data
    
    DUMMY:PTR_NEW()}
    
  ID  = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='DP_PSYM')
  WIDGET_CONTROL, ID, SET_DROPLIST_SELECT=ST.PSYM
  
  WIDGET_CONTROL,WWIDGET,SET_UVALUE=ST,/NO_COPY
  
  ID = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_OFFSET_BTN_NEW')
  WIDGET_CONTROL, ID, /SET_BUTTON
  
  ID = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='CKB_ERRORBAR')
  WIDGET_CONTROL, ID, /SET_BUTTON
  ;
  ;UPDAET SITE LIST IF INPUT PATH EXISTS.
  ID = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='TXT_IN')
  WIDGET_CONTROL, ID, GET_VALUE=PATH
  PATH=STRTRIM(PATH[0],2)
  IF FILE_TEST(PATH,/DIRECTORY) THEN BEGIN
    EV={TOP:WWIDGET}
    IGPS_RESET, EV
  ENDIF
  ;
  ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_OUTLIER_TXT_NRMS')
  WIDGET_CONTROL, ID, SENSITIVE=0
  ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_OUTLIER_TXT_NIQR')
  WIDGET_CONTROL, ID, SENSITIVE=0
  ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_OUTLIER_TXT_IQR_WIN')
  WIDGET_CONTROL, ID, SENSITIVE=0
  ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_OUTLIER_TXT_FET')
  WIDGET_CONTROL, ID, SENSITIVE=0
  
  ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_MODEL_CKB_TREND')
  WIDGET_CONTROL, ID, /SET_BUTTON
  
  ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_HEADERS')
  WIDGET_CONTROL, ID, /SET_BUTTON
  ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_OLD_HEADER')
  WIDGET_CONTROL, ID, /SET_BUTTON
  ;WIDGET_CONTROL, ID, SENSITIVE=A
  ;ID=WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_MERGE_HEADERS')
  ;WIDGET_CONTROL, ID, SENSITIVE=A
  
  ;FOR PANEL SELECTOR_NET
  ID = WIDGET_INFO(WWIDGET, FIND_BY_UNAME='PANEL_SELECTOR_NET_TXT_SITEFILE')
  WIDGET_CONTROL,ID,SENSITIVE=0
  
  ;update offset/psdecay list when items changed.
  ID = WIDGET_INFO(WWIDGET,FIND_BY_UNAME='PANEL_OFFSET_CKB_UPDATE_LIST')
  WIDGET_CONTROL,ID,/SET_BUTTON
  ID = WIDGET_INFO(WWIDGET,FIND_BY_UNAME='PANEL_PSDECAY_CKB_UPDATE_LIST')
  WIDGET_CONTROL,ID,/SET_BUTTON
  
END



;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_UPD, EV
  ;STOP
  ;HELP,ev,/st
  ;Modification:
  ;  + on May 10, 2015 by tianyf
  ;    Only select the text in input path field now does not refresh the sites list.
  ;
  IF( TAG_NAMES(EV, /STRUCTURE_NAME) EQ 'WIDGET_TEXT_CH' || $ ;insert characters
    TAG_NAMES(EV, /STRUCTURE_NAME) EQ 'WIDGET_TEXT_DEL' || $ ;delete
    TAG_NAMES(EV, /STRUCTURE_NAME) EQ 'WIDGET_DROPLIST' || $ ;Input Type droplist action
    TAG_NAMES(EV, /STRUCTURE_NAME) EQ 'WIDGET_BUTTON' || $ ;select a path, or press the refresh button, or send output path to input field
    TAG_NAMES(EV, /STRUCTURE_NAME) EQ 'WIDGET_TEXT_DEL')THEN $ ;paste
    IGPS_RESET, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_UPD_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Search the time series in input path. '+ $
        'If you delete/copy files elsewhere, you may need to refresh the site list'
    END
  ENDCASE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_LOAD, EV, SITE=SITE,UPDATE=UPDATE, PATH=PATH, $
    FILE=FILE, $
    SIT_ID=SITE_ID
    
    
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='LST_SITE')
  
  IF N_ELEMENTS(SITE) EQ 0 && N_ELEMENTS(SITE_ID) EQ 0 THEN BEGIN
    RET_LST_SITE=IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX)
    IF RET_LST_SITE NE 0 THEN RETURN
  ENDIF ELSE BEGIN
    IF N_ELEMENTS(SITE) NE 0 THEN BEGIN
      RET_LST_SITE=IGPS_CHECK_LIST_SITE(EV,ALL=SITES)
      POS=WHERE(STRUPCASE(SITES) EQ STRUPCASE(SITE))
      IF POS[0] NE -1 THEN BEGIN
        CUR=POS[0]
        WIDGET_CONTROL, ID, SET_LIST_SELECT=CUR
      ENDIF ELSE BEGIN
        ;IGPS_CLEAR_DRAWS,EV
        ON_IGPS_BTN_NONE, EV
        RETURN
      ENDELSE
    ENDIF ELSE BEGIN
      RET_LST_SITE=IGPS_CHECK_LIST_SITE(EV,ALL=SITES,INDEX=INDEX)
    ENDELSE
  ENDELSE
  ;;
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;;
  IF N_ELEMENTS(SITE) EQ 0 && N_ELEMENTS(SITE_ID) EQ 0 THEN BEGIN
    CUR=INDEX
  ENDIF
  ;;HELP,CUR
  IF N_ELEMENTS(SITE_ID) NE 0 THEN BEGIN
    CUR=SITE_ID
    WIDGET_CONTROL, ID, SET_LIST_SELECT=CUR
  ENDIF
  IF CUR[0] EQ -1 THEN RETURN
  
  CAPTION=ST.CAPTION+' #['+STRTRIM(N_ELEMENTS(CUR),2)+'/'+ $
    STRTRIM(N_ELEMENTS(*ST.FILES),2)+ $
    ';'+STRING(SITES[CUR],FORMAT='(10000(A4,:,","))')+ $
  ']: '+ST.PATH
  WIDGET_CONTROL,EV.TOP,BASE_SET_TITLE=CAPTION
  ;HELP,*ST.FILES,/ST
  CUR=LAST(CUR) ;USE THE LAST ONE IF NAME ARE DUPLICATED OR MULTIPLE SITES ARE SELECTED.
  
  ;;
  ;;HELP,SITES
  ;stop
  
  ;;
  ;;PRINT,SITES[CUR]
  ST.PANEL_CORR_SITE_CUR=SITES[CUR]
  
  ST.POS=CUR
  ;;
  ;;QUERY DATA TYPE
  ID = WIDGET_INFO( EV.TOP, FIND_BY_UNAME='TS_TYPE')
  WIDGET_CONTROL, ID, GET_VALUE=TS_TYPE
  ;PRINT, 'DT:', TS_TYPE
  ST.TS_TYPE = TS_TYPE
  
  IF N_ELEMENTS(FILE) EQ 0 && PTR_VALID(ST.FILES) THEN BEGIN
    FILE=(*ST.FILES)[CUR]
  ;PRINT,FILE
  ENDIF
  
  
  ;;SET QUERY STRING
  CASE TS_TYPE OF
    'SIO NEU [ATS]': BEGIN
      READ_SIO, FILE, SITE = SITE, $
        FIRSTEPOCH = FIRSTEPOCH, $
        LASTEPOCH = LASTEPOCH, $
        XYZREF = XYZREF, $
        NEUREF = NEUREF, $
        DATA = DATA, $
        NH=NH, $
        NS=NS, $
        NL=NL, $
        HEADERS = HEADER, $
        ;ON APRIL 14, 2012 BY TIANYF
        ;ADDED CODE TO RETURN WHEN THE INPUT FILE IS ZERO
        IOERR=IOERR
      IF IOERR NE 0 THEN BEGIN
        ST.DATA=PTR_NEW()
        WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
        IGPS_CLEAR_DRAWS,EV
        RETURN
      ENDIF
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [-1,-1,-1]
      NEUERRIS = [-1,-1,-1]
      IF N_ELEMENTS(DATA[*,0])-3 GT 0 THEN BEGIN
        NEUIS[0:N_ELEMENTS(DATA[*,0])-3-1 < 2]=INDGEN(N_ELEMENTS(DATA[*,0])-3 < 3)+3
      ENDIF
      IND=WHERE(NEUIS NE -1)
      IF IND[0] NE -1 && N_ELEMENTS(DATA[*,0])-3-N_ELEMENTS(IND) GT 0 THEN $
        NEUERRIS[IND] = NEUIS[IND]+N_ELEMENTS(IND)
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0ull, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        ;stop
      ;        MJDS[I]=MJD
      ;      ;MJDS[I]=DOUBLE(STRING(MJD,FORMAT='(F9.1)'))
      ;      ;PRINT,DECYRS[I],MJDS[I], FORMAT='(2F20.8)'
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;HELP,MJDS,DATA
    ;stop
    END
    'SIO NEU': BEGIN
      READ_SIO, FILE, SITE = SITE, $
        FIRSTEPOCH = FIRSTEPOCH, $
        LASTEPOCH = LASTEPOCH, $
        XYZREF = XYZREF, $
        NEUREF = NEUREF, $
        DATA = DATA, $
        NH=NH, $
        NS=NS, $
        NL=NL, $
        HEADERS = HEADER, $
        ;ON APRIL 14, 2012 BY TIANYF
        ;ADDED CODE TO RETURN WHEN THE INPUT FILE IS ZERO
        IOERR=IOERR
      IF IOERR NE 0 THEN BEGIN
        ST.DATA=PTR_NEW()
        WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
        IGPS_CLEAR_DRAWS,EV
        RETURN
      ENDIF
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME=[0]  ;decimal-year column index
      NEUIS = [-1,-1,-1]
      NEUERRIS = [-1,-1,-1]
      IF N_ELEMENTS(DATA[*,0])-3 GT 0 THEN BEGIN
        NEUIS[0:N_ELEMENTS(DATA[*,0])-3-1 < 2]=INDGEN(N_ELEMENTS(DATA[*,0])-3 < 3)+3
      ENDIF
      IND=WHERE(NEUIS NE -1)
      IF IND[0] NE -1 && N_ELEMENTS(DATA[*,0])-3-N_ELEMENTS(IND) GT 0 THEN $
        NEUERRIS[IND] = NEUIS[IND]+N_ELEMENTS(IND)
      ;
      TIME_AXES_TYPE='DYR'
      ;MJDS=YDOY2MJD(DATA[1,*], DATA[2,*])
      
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0ull, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I]+0d0, MJD=MJD
      ;        ;stop
      ;        MJDS[I]=MJD
      ;      ;MJDS[I]=DOUBLE(STRING(MJD,FORMAT='(F9.1)'))
      ;      ;PRINT,DECYRS[I],MJDS[I], FORMAT='(2F20.8)'
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;HELP,MJDS,DATA
    ;STOP
    END
    'QOCA MAP': BEGIN
      READ_QOCA_MAP, FILE, $
        DATA = DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = [4,5,6]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0ull, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        ;stop
      ;        MJDS[I]=MJD
      ;      ;MJDS[I]=DOUBLE(STRING(MJD,FORMAT='(F9.1)'))
      ;      ;PRINT,DECYRS[I],MJDS[I], FORMAT='(2F20.8)'
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;HELP,MJDS,DATA
    ;stop
    END
    'SIO XYZ': BEGIN
      READ_SIO, FILE, SITE = SITE, $
        FIRSTEPOCH = FIRSTEPOCH, $
        LASTEPOCH = LASTEPOCH, $
        XYZREF = XYZREF, $
        NEUREF = NEUREF, $
        DATA = DATA, $
        NH=NH, $
        NS=NS, $
        NL=NL, $
        HEADERS = HEADERS
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;HELP,MJDS,DATA
    END
    'SIO RAW XYZ': BEGIN
      READ_SIO_RAWXYZ, FILE,  $
        DATA = DATA
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'PBO XYZ': BEGIN
      READ_PBO, FILE[0], DATA=DATA, HEADERS=HEADER
      IND_TIME=2
      NEUIS = [3,4,5]
      ;NEUIS = [12,13,14]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='MJD'
      TIME_AXES_VAL_MJD=PTR_NEW(REFORM(DATA[IND_TIME,*]))
      MJDS=REFORM(DATA[IND_TIME,*])
      MJD2DECYRS,DATA[IND_TIME,*],DECYRS
    END
    'PBO NEU': BEGIN
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      READ_PBO, FILE[0], DATA=DATA, HEADERS=HEADER
      IND_TIME=2
      ;NEUIS = [3,4,5]
      NEUIS = [12,13,14]+3
      NEUERRIS = NEUIS+6-3
      TIME_AXES_TYPE='MJD'
      TIME_AXES_VAL_MJD=PTR_NEW(REFORM(DATA[IND_TIME,*]))
      MJDS=REFORM(DATA[IND_TIME,*])
      MJD2DECYRS,DATA[IND_TIME,*],DECYRS
    ;stop
    END
    'CORRCOEF XY': BEGIN
      READ_COLS, FILE, DATA=DATA, HEADERS=HEADERS,  $
        SKIP=8, COLUMN_SKIP=1
      IND_TIME=0
      NEUIS = [1]
      ;NEUIS=[1,2,3]
      TIME_AXES_VAL_MJD=PTR_NEW(REFORM(DATA[IND_TIME,*]))
      ST.SF=1D0
    END
    'CORRCOEF MAT': BEGIN
      ;PRINT,'CORRMAT'
      ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='LST_SITE')
      ;;GET CURRENT SELECTED ITEM
      CUR=WIDGET_INFO(ID,/LIST_SELECT)
      
      IND_TIME=0
      NEUIS=[1,2,3]
      CORR=*(ST.PANEL_CORR_CORR)
      BLEN=*(ST.PANEL_CORR_BLEN)
      NDAYS=N_ELEMENTS(BLEN[0,*])
      DATA=DBLARR(4,NDAYS)
      DATA[0,*]=REFORM(BLEN[CUR,*])
      DATA[1,*]=REFORM(CORR[CUR,*,0])
      DATA[2,*]=REFORM(CORR[CUR,*,1])
      DATA[3,*]=REFORM(CORR[CUR,*,2])
      TIME_AXES_VAL_MJD=PTR_NEW(REFORM(DATA[IND_TIME,*]))
      ST.SF=1D0
    ;STOP
    END
    'CMONOC TS': BEGIN
      ;;
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      ;STOP
      READ_CMONOC, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'ISCEA': BEGIN
      ;;
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      ;STOP
      READ_ISCEA, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'ISCEA [Detrend]': BEGIN
      ;;
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      ;STOP
      READ_ISCEA_DETREND, FILE, DATA=DATA
      IND_TIME = 2
      NEUIS = [7,9,11]
      NEUERRIS = NEUIS+1
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1D0
    END
    'ISCEA BERN': BEGIN
      ;;
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      ;STOP
      READ_ISCEA_BERN, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'JPL LAT/LON/RAD': BEGIN
      ;FILE = FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      READ_JPL_L_L_R, FILE, DATA=DATA
      ;stop
      IND_TIME = 0
      NEUIS = [1,2,3]+3
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;STOP
    ;RETURN
    END
    'JPL LLR_MAT': BEGIN
      READ_SIO, FILE, SITE = SITE, $
        FIRSTEPOCH = FIRSTEPOCH, $
        LASTEPOCH = LASTEPOCH, $
        XYZREF = XYZREF, $
        NEUREF = NEUREF, $
        DATA = DATA, $
        NH=NH, $
        NS=NS, $
        NL=NL, $
        HEADERS = HEADERS
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;HELP,MJDS,DATA
    END
    'USGS PASADENA': BEGIN
      READ_USGS, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [2,4,6]
      NEUERRIS = [3,5,7]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'GLOBK': BEGIN
      ;DATA MIGHT EXIST IN MULTIPLE FILES; THUS, FIND THOSE FILES BY NAME
      DFILES=''
      FOR DFI=0,N_ELEMENTS(*ST.FILES)-1 DO BEGIN
        IF STRMID(GETFILENAME((*ST.FILES)[DFI]),3,4) NE SITES[CUR] THEN CONTINUE
        IF DFILES[0] EQ '' THEN BEGIN
          DFILES=(*ST.FILES)[DFI]
        ENDIF ELSE BEGIN
          DFILES=[DFILES, (*ST.FILES)[DFI] ]
        ENDELSE
      ENDFOR
      ;STOP
      READ_GLOBK, DFILES, DATA=DATA
      IND_TIME = 0
      ;SORT THE DATA IN MULTIPLE IN CHRONOLOGICAL ORDER IF THERE ARE MULTIPLE FILES
      ;IF N_ELEMENTS(DFILES) GT 1 THEN BEGIN
      IF N_ELEMENTS(DFILES) GT 0 THEN BEGIN ; EVEN FOR ONLY ONE DATA FILE
        IND=SORT(DATA[IND_TIME,*])
        DATA=DATA[*,IND]
      ENDIF
      NEUIS = [1,2,3]
      NEUERRIS = [4,5,6]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'QOCA ATML LOAD': BEGIN
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      READ_QOCA_ALOAD, FILE, DATA=DATA
      IND_TIME = 4
      NEUIS = [6,7,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='JD'
      TIME_AXES_VAL_MJD=PTR_NEW(REFORM(DATA[IND_TIME,*])-2400000.5D0)
      MJD2DECYRS,DATA[IND_TIME,*],DECYRS
    END
    'QOCA OTL LOAD': BEGIN
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      READ_QOCA_ALOAD, FILE, DATA=DATA
      IND_TIME = 4
      NEUIS = [6,7,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='JD'
      TIME_AXES_VAL_MJD=PTR_NEW(REFORM(DATA[IND_TIME,*])-2400000.5D0)
      MJD2DECYRS,DATA[IND_TIME,*],DECYRS
    END
    'QOCA SNOW LOAD': BEGIN
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      READ_QOCA_ALOAD, FILE, DATA=DATA
      IND_TIME = 4
      NEUIS = [6,7,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='JD'
      TIME_AXES_VAL_MJD=PTR_NEW(REFORM(DATA[IND_TIME,*])-2400000.5D0)
      MJD2DECYRS,DATA[IND_TIME,*],DECYRS
    END
    'QOCA SOIL LOAD': BEGIN
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      READ_QOCA_ALOAD, FILE, DATA=DATA
      IND_TIME = 4
      NEUIS = [6,7,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='JD'
      TIME_AXES_VAL_MJD=PTR_NEW(REFORM(DATA[IND_TIME,*])-2400000.5D0)
      MJD2DECYRS,DATA[IND_TIME,*],DECYRS
    END
    'APLO LOAD COMB': BEGIN
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      READ_QOCA_ALOAD, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [4,5,6]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'SBL LOAD': BEGIN
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+'*'+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      ;STOP
      READ_SBL, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='MJD'
      TIME_AXES_VAL_MJD=PTR_NEW(REFORM(DATA[IND_TIME,*]))
    END
    'SBL LOAD [Operational]': BEGIN
      ;STOP
      READ_SBL_OPERATIONAL, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [5,6,7]
      ;DISCARD HORIZONTAL COMPONENTS
      ;NEUIS = [7]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;STOP
    END
    'CATS': BEGIN
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      READ_SIO, FILE, SITE = SITE, $
        FIRSTEPOCH = FIRSTEPOCH, $
        LASTEPOCH = LASTEPOCH, $
        XYZREF = XYZREF, $
        NEUREF = NEUREF, $
        DATA = DATA, $
        NH=NH, $
        NS=NS, $
        NL=NL, $
        HEADERS = HEADERS
      IND_TIME = 0
      ;stop
      NEUIS = [1,2,3]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;HELP,MJDS,DATA
    END
    'CATS PSD': BEGIN
      READ_SIO, FILE, DATA = DATA_PSD
      DATA=DBLARR(4,N_ELEMENTS(DATA_PSD[0,*])/3-1)
      POS=WHERE(DATA_PSD[0,*] EQ 0)
      DATA[0:1,*]=DATA_PSD[0:1,0:POS[0]-1]
      DATA[2,*]=DATA_PSD[1,POS[0]+1:POS[1]-1]
      DATA[3,*]=DATA_PSD[1,POS[1]+1:POS[2]-1]
      IND_TIME = 0
      NEUIS = [1,2,3]
      TIME_AXES_TYPE='DYR'
      ST.SF=1
      DECYRS=REFORM(DATA[IND_TIME,*])
      TIME_AXES_VAL_MJD=PTR_NEW(DECYRS)
    ;STOP
    ;HELP,MJDS,DATA
    END
    'POWER SPECTRUM': BEGIN
      ;FILE=FILE_SEARCH(PATH+PATH_SEP()+SITES[CUR]+ST.DT_QUERYSTR, COUNT=NN)
      READ_SIO, FILE[0], $
        DATA = DATA, $
        HEADERS = HEADERS
      IND_TIME = 0
      ;HELP, DATA
      NEUIS = INDGEN(N_ELEMENTS(DATA[*,0])-1)+1
      ;NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;MJDS[I]=MJD
      ;ENDFOR
      TIME_AXES_VAL_MJD=PTR_NEW(DECYRS)
    ;HELP,MJDS,DATA
    END
    'ITRF05 RESIDUAL': BEGIN
      READ_ITRF05_DNDEDH, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'EABM NEU': BEGIN
      READ_EABM, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;STOP
    END
    'EST_NOISE OTD': BEGIN
      DT_QUERYSTR='*.n'
      ST.SF=1e-3
      MSGBOX,'No supported yet!'
      RETURN
    END
    'EST_NOISE OTR': BEGIN
      READ_OTR, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'EST_NOISE OTX': BEGIN
      DT_QUERYSTR='*.n'
      ST.SF=1e-3
      MSGBOX,'No supported yet!'
      RETURN
    END
    'EST_NOISE RESID': BEGIN
      READ_ESTNOISE_RESID, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'EST_NOISE RESID MODEL': BEGIN
      READ_SIO, FILE, DATA=DATA_N
      FILE=STRREP(FILE,'.n_','.e_')
      READ_SIO, FILE, DATA=DATA_E
      FILE=STRREP(FILE,'.e_','.u_')
      READ_SIO, FILE, DATA=DATA_U
      DATA=DBLARR(6,N_ELEMENTS(DATA_U[0,*]))
      DATA[1:2,*]=DATA_U[0:1,*]
      FOR DI=0,N_ELEMENTS(DATA[0,*])-1 DO BEGIN
        DOY,DATA[1,DI],DATA[2,DI],DYEAR=DYR
        ;PRINT,DATA[1,DI],DATA[2,DI],DYR
        DATA[0,DI]=DYR
      ENDFOR
      ;STOP
      di=2
      di=3
      ;di=4
      DATA[3,*]=DATA_N[di,*]
      DATA[4,*]=DATA_E[di,*]
      DATA[5,*]=DATA_U[di,*]
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'EST_NOISE RESID DATA': BEGIN
      READ_SIO, FILE, DATA=DATA_N
      FILE=STRREP(FILE,'.n_','.e_')
      READ_SIO, FILE, DATA=DATA_E
      FILE=STRREP(FILE,'.e_','.u_')
      READ_SIO, FILE, DATA=DATA_U
      DATA=DBLARR(6,N_ELEMENTS(DATA_U[0,*]))
      DATA[1:2,*]=DATA_U[0:1,*]
      FOR DI=0,N_ELEMENTS(DATA[0,*])-1 DO BEGIN
        DOY,DATA[1,DI],DATA[2,DI],DYEAR=DYR
        ;PRINT,DATA[1,DI],DATA[2,DI],DYR
        DATA[0,DI]=DYR
      ENDFOR
      ;STOP
      di=2
      di=3
      di=4
      DATA[3,*]=DATA_N[di,*]
      DATA[4,*]=DATA_E[di,*]
      DATA[5,*]=DATA_U[di,*]
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'GSI': BEGIN
      READ_GSI, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'Tah mb_ files': BEGIN
      READ_MB_NONEQUAL, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = [6,7,8]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    END
    'SCEC Transient CSV': BEGIN
      READ_SCEC_TRANSIENT_CSV, FILE, DATA=DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ;MJDS[I]=DOUBLE(STRING(MJD,FORMAT='(F9.1)'))
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1e-3
    END
    'TRACK': BEGIN
      READ_TRACK, FILE, DATA=DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      ;IND_TIME = 12
      IND_TIME = 0
      ;STOP
      NEUIS = [7,9,11];-1
      NEUERRIS = NEUIS+1
      TIME_AXES_TYPE='DYR'
      ;DECYRS=REFORM(DATA[IND_TIME,*])
      DECYRS=REFORM(DATA[0,*])+REFORM(DATA[16,*])/365.25D0
      DATA1=DBLARR(N_ELEMENTS(DATA[*,0])+1,N_ELEMENTS(DATA[0,*]))
      DATA1[0,*]=DECYRS
      DATA1[1:*,*]=DATA
      DATA=DATA1
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        ;MJDS[I]=DOUBLE(STRING(MJD,FORMAT='(F9.1)'))
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1e-0
    ;STOP
    END
    'Caltech Nepal': BEGIN
      READ_CALTECH_NEPAL, FILE, DATA=DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ;MJDS[I]=DOUBLE(STRING(MJD,FORMAT='(F9.1)'))
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1;e-3
    END
    'USGS RNEU': BEGIN
      READ_USGS_RNEU, FILE, DATA=DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ;MJDS[I]=DOUBLE(STRING(MJD,FORMAT='(F9.1)'))
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1;e-3
    END
    'GEONET': BEGIN
      READ_GEONET, FILE, DATA=DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [3,4,5]
      NEUERRIS = [-1,-1,-1]
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ;MJDS[I]=DOUBLE(STRING(MJD,FORMAT='(F9.1)'))
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1;e-3
    END
    'Highrate NEU': BEGIN
      READ_SIO, FILE, DATA=DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [7,8,9]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        ;MJDS[I]=DOUBLE(STRING(MJD,FORMAT='(F9.1)'))
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1e-0
    ;STOP
    END
    'YICE': BEGIN
      READ_YICE, FILE, DATA=DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1D0
    ;STOP
    END
    'ERCE':  BEGIN
      READ_CMONOC, FILE, DATA=DATA
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = NEUIS+3
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      ;      MJDS=DBLARR(N_ELEMENTS(DECYRS))
      ;      FOR I=0, N_ELEMENTS(DECYRS)-1 DO BEGIN
      ;        DECYRS_TO_MJD, DECYRS[I], MJD=MJD
      ;        MJDS[I]=MJD
      ;      ENDFOR
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
    ;stop
    END
    'GPS LAB': BEGIN
      READ_GPSLAB, FILE, DATA=DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [1,2,3]+3
      NEUERRIS = REPLICATE(-1,3)
      TIME_AXES_TYPE='DYR'
      DECYRS=REFORM(DATA[IND_TIME,*])
      DECYRS_TO_JDS, DECYRS+0d0, JDS
      MJDS = JDS - 2400000.5D0
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1D0
    ;STOP
    END
    'EOST Loading Service': BEGIN
      READ_COLS, FILE, DATA=DATA
      ;STOP
      IF N_ELEMENTS(DATA) EQ 0 THEN BEGIN  ;NO DATA
        IGPS_RESET, EV
        RETURN
      ENDIF
      IND_TIME = 0
      NEUIS = [1,2,3]
      NEUERRIS = REPLICATE(-1,3)
      TIME_AXES_TYPE='DYR'
      MJDS=REFORM(DATA[IND_TIME,*])
      JD_TO_DECYRSS, MJDs, DECYRS
      TIME_AXES_VAL_MJD=PTR_NEW(MJDS)
      ST.SF=1D0
    ;STOP
    END
    ELSE: BEGIN
      PRINT, '[ON_IGPS_BTN_LOAD]!!WARNING: unknown data type. Exiting..'
      RETURN
    END
  ENDCASE
  ;HELP, DATA
  ;BUG FIXED BY TIANYF ON Tue, Feb  9, 2016  9:27:10 AM
  ;When the file deleted and the site remains in the site list, we now
  ;return null plots when the site name is clicked.
  IF N_ELEMENTS(DATA) EQ 1 AND DATA[0] EQ '' THEN BEGIN
    ST.DATA=PTR_NEW()
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    IGPS_CLEAR_DRAWS,EV
    RETURN
  ENDIF
  ;Sat Oct 22 19:53:04 CST 2011 TIANYF
  ;FIX NULL HEADER PROBLEM (WHEN NO HEADER FOR CURRENT SITE, WILL NOT EMPTY OLD HEADER INFO)
  IF N_ELEMENTS(HEADER) NE 0 THEN BEGIN
    ST.HEADER=PTR_NEW(HEADER)
  ENDIF ELSE BEGIN
    ST.HEADER=PTR_NEW()
  ENDELSE
  
  ST.IND_TIME = IND_TIME
  ST.IND_NEU  = NEUIS
  IF N_ELEMENTS(NEUERRIS) GT 0 THEN  $
    ST.IND_NEUERR = NEUERRIS
    
  ;stop
  IF 1 THEN BEGIN
    ;by tianyf on Tue, Oct 25, 2016 11:06:39 AM
    ;handle the NaN data values
    pos=WHERE(neuis GE 0)
    ind_valid=LINDGEN(N_ELEMENTS(data[0,*]))
    FOR pi=0,N_ELEMENTS(pos)-1 DO BEGIN
      pos_pi=WHERE(FINITE(data[neuis[pi],*]) EQ 1)
      IF pos_pi[0] EQ -1 THEN RETURN
      tmp=set_intersect(ind_valid,pos_pi,ind0=ind0,ind1=ind1)
      IF ind0[0] EQ -1 THEN RETURN
      ind_valid=ind_valid[ind0]
    ENDFOR
    data=data[*,ind_valid]
    TIME_AXES_VAL_MJD=PTR_NEW((*TIME_AXES_VAL_MJD)[ind_valid])
    decyrs=decyrs[ind_valid]
    mjds=mjds[ind_valid]
  ENDIF
  
  
  
  ;IF PTR_VALID(ST.TIME_AXES_VAL_MJD) THEN PTR_FREE,ST.TIME_AXES_VAL_MJD
  ST.TIME_AXES_VAL_MJD=PTR_NEW(*TIME_AXES_VAL_MJD)
  
  ;observation interval
  MJDALL=REFORM(*TIME_AXES_VAL_MJD)
  IF N_ELEMENTS(MJDALL) GE 2 THEN BEGIN ; If there are two or more data points
    MJDALL=MJDALL[SORT(MJDALL)]
    MJDALL=MJDALL[UNIQ(MJDALL)]
    MJDDIF=MJDALL-SHIFT(MJDALL,1)
    MJDDIF=MJDDIF[WHERE(MJDDIF GT 0)]
    TMP=MIN(MJDDIF, IND)
    INTERVAL=MJDDIF[IND[0]]
    ;PRINT,'minimum interval:',INTERVAL
    ST.INTERVAL=INTERVAL  ;in unit of UTC days
  ;stop
  ENDIF ELSE BEGIN
    INTERVAL=ST.INTERVAL
  ENDELSE
  
  
  ;ST.DRAW_N_XRANGE=[MIN(*TIME_AXES_VAL_MJD), MAX(*TIME_AXES_VAL_MJD)];;
  ;ST.DRAW_N_XRANGE_VIS=[MIN(*TIME_AXES_VAL_MJD), MAX(*TIME_AXES_VAL_MJD)];;
  ;+add left and right padding by tianyf on May 13, 2015.
  ST.DRAW_N_XRANGE=[MIN(*TIME_AXES_VAL_MJD)-INTERVAL/2, MAX(*TIME_AXES_VAL_MJD)+INTERVAL/2];;
  ;PRINT,ST.DRAW_N_XRANGE
  ST.DRAW_N_XRANGE_VIS=[MIN(*TIME_AXES_VAL_MJD)-INTERVAL/2, MAX(*TIME_AXES_VAL_MJD)+INTERVAL/2];;
  ;
  ST.SLIDER_PAN_RANGE = [MIN(*TIME_AXES_VAL_MJD), MAX(*TIME_AXES_VAL_MJD)]
  ;PTR_FREE,TIME_AXES_VAL_MJD
  
  ;IF PTR_VALID(ST.TIME_AXES_VAL) THEN PTR_FREE,ST.TIME_AXES_VAL
  ST.TIME_AXES_VAL=PTR_NEW(REFORM(DATA[IND_TIME,*]))
  IF N_ELEMENTS(DECYRS) EQ 0 THEN DECYRS=REFORM(DATA[IND_TIME,0])
  ;IF PTR_VALID(ST.TIME_AXES_VAL_DYR) THEN PTR_FREE,ST.TIME_AXES_VAL_DYR
  ST.TIME_AXES_VAL_DYR=PTR_NEW(DECYRS)
  ;STOP
  ;ST.TIME_AXES_VAL=PTR_NEW(DATA[IND_TIME,*])
  
  ST.SITE_CUR = SITES[CUR]
  ;;
  ;IF PTR_VALID(ST.DATA) THEN PTR_FREE,ST.DATA
  ST.DATA = PTR_NEW(DATA)
  ;IF PTR_VALID(ST.DATA_RAW) THEN PTR_FREE,ST.DATA_RAW
  ST.DATA_RAW = PTR_NEW(DATA)
  ;;
  ;;SET PLOT X-RANGES
  ;ST.DRAW_N_XRANGE=[MIN(DATA[IND_TIME,*]), MAX(DATA[IND_TIME,*])];;
  ST.DRAW_N_XRANGE_VIS_USE=[MIN(DATA[IND_TIME,*]), MAX(DATA[IND_TIME,*])];;
  ;ST.DRAW_N_XRANGE_VIS_USE=[MIN(*TIME_AXES_VAL_MJD), MAX(*TIME_AXES_VAL_MJD)]
  ;PRINT, 'NEW:',ST.DRAW_N_XRANGE, ST.DRAW_N_XRANGE_VIS, ST.DRAW_N_XRANGE_VIS_USE
  ;HELP, *TIME_AXES_VAL_MJD
  ;STOP
  ;;SET SLIDER PAN RANGE
  ;ST.SLIDER_PAN_RANGE = [MIN(DATA[IND_TIME,*]), MAX(DATA[IND_TIME,*])]
  ;ST.SLIDER_PAN_POS = 50
  
  ST.SLIDER_PAN_POS = 50
  
  ;;WIDGET_CONTROL, ST.SLIDER_PAN_ID, SET_SLIDER_MIN = ST.SLIDER_PAN_RANGE[0]
  ;;WIDGET_CONTROL, ST.SLIDER_PAN_ID, SET_SLIDER_MAX = ST.SLIDER_PAN_RANGE[1]
  ;;WIDGET_CONTROL, ST.SLIDER_PAN_ID, SET_VALUE=ST.SLIDER_PAN_POS
  ;;NOTE: WIDGET_SLIDER DOES NOT SUPPORT DECIMAL VALUES. IT ONLY SUPPORT INTEGER!
  ;;  DEFAULT RANGE : 0~100
  ;; THUS, WE SHOULD RESCALE THE CURRENT POSITION TO ITS PERCENTAGE.
  WIDGET_CONTROL, ST.SLIDER_PAN_ID, SET_VALUE=50
  ;;PRINT, ST.SLIDER_PAN_RANGE, ST.SLIDER_PAN_POS
  
  ;;PRINT, ST.DRAW_N_XRANGE_VIS
  
  ST.PT_OLD = -1
  ST.PANEL_CUT_DEF_STARTED=0
  ;ST.PANEL_CUT_DEF=0
  
  
  ;IF PTR_VALID(ST.OUTLIERS) THEN PTR_FREE,ST.OUTLIERS
  ST.OUTLIERS=PTR_NEW(REPLICATE(PTR_NEW(),3))
  
  
  ;STOP
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  
  ;Modification by tianyf on Sat, Feb  6, 2016 11:04:14 AM
  ; Now update the time axis when loading time series.
  ;  (the old code does these operations separately)
  IGPS_CONVERT_TIME_AXES, EV
  
  ;DEVICE, DECOMPOSED=1
  
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_OUTLIER')
  CKB_OUTLIER=WIDGET_INFO(ID,/BUTTON_SET)
  IF CKB_OUTLIER EQ 1 THEN BEGIN
    IGPS_DETECT_OUTLIERS, EV
  ENDIF
  
  
  IGPS_UPDATE_ST_DATA, EV
  ;IF ~ (ARG_PRESENT(UPDATE) && UPDATE EQ 0) THEN BEGIN
  IF N_ELEMENTS(UPDATE) EQ 0 || UPDATE EQ 1 THEN BEGIN
    IGPS_UPDATE_DRAW_NEU, EV
  ENDIF
  ;IF ST.IS_FROM_TO_FIXED NE 1 THEN BEGIN
  IGPS_UPDATE_TXT_FROM_TO, EV
;ENDIF
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_LST_SITE_CLICK, EV
  ;HELP,EV,/ST
  ;STOP
  ;WHEN CLICK THE SITE LIST
  ;
  ;CHECK WHETHER TO LOAD SIO OFFSET DEFINITION IN FILE HEADER.
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_OFFSET')
  CKB_OFFSET=WIDGET_INFO(ID,/BUTTON_SET)
  IF CKB_OFFSET THEN BEGIN
    ;LOAD OFFSETS EPOCHS?
    ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OFFSET_CKB_SIO_NEU')
    OPT=WIDGET_INFO(ID,/BUTTON_SET)
    ON_IGPS_PANEL_OFFSET_CKB_SIO_NEU, EV, OPT=OPT
  ENDIF
  
  ;CHECK WHETHER TO LOAD SIO PSDECAY DEFINITION IN FILE HEADER.
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_PSDECAY')
  CKB_PSDECAY=WIDGET_INFO(ID,/BUTTON_SET)
  IF CKB_PSDECAY THEN BEGIN
    ;LOAD CKB_PSDECAY EPOCHS?
    ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_PSDECAY_CKB_SIO_NEU')
    OPT=WIDGET_INFO(ID,/BUTTON_SET)
    ON_IGPS_PANEL_PSDECAY_CKB_SIO_NEU, EV, OPT=OPT
  ENDIF
  
  ;DISPLAY THE TIME SERIES
  ON_IGPS_BTN_LOAD,EV
  
;
  
  
END

;;ON DOUBLE CLICK LIST ITEM.
PRO ON_IGPS_LST_SITE_DBC, EV
  ;HELP,EV,/ST
  ;RETURN
  ;STOP
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST,/NO_COPY
  CURPANEL=ST.CURPANEL
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  IF CURPANEL EQ 'PSDECAY' THEN BEGIN  ;SET CURRENT SELECTION IN PSDECAY LIST TO SELECTED SITE.
    ON_IGPS_PANEL_PSDECAY_SET_LIST_CUR,EV
  ENDIF
;RETURN
;A DOUBLE CLICK IN SITE LIST WIDGET WILL ALSO CREATE A SINGLE
;CLICK EVENT PRECEDING THIS ONE. THUS, NO NEED TO PROCESS THIS EVENT NOW.
  
END



;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_TOOL, EV, TOOL=TOOL
  IGPS_PANEL_SHOW, EV, OPT=TOOL
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST, /NO_COPY
  PANELS=ST.PANELS
  FOR I=0, N_ELEMENTS(PANELS)-1 DO BEGIN
    CHECKED=(TOOL EQ PANELS[I])
    ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='BTN_'+PANELS[I])
    IF ID LE 0 THEN BEGIN
      PRINT,'[iGPS:ON_IGPS_BTN_TOOL]ERROR: cannot access '+PANELS[I]+'.',FORMAT='(A)'
      CONTINUE
    ENDIF
    WIDGET_CONTROL, ID, SET_BUTTON=CHECKED
  ENDFOR
  ST.CURPANEL=TOOL
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_OUTPUT_PATH_ONOFF, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_OUTPUT_PATH_ONOFF, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  CURPANEL=ST.CURPANEL
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='WID_BASE_OUT')
  IF CURPANEL EQ 'STACKING' || $
    CURPANEL EQ 'OFFSET' || $
    CURPANEL EQ 'PSDECAY' || $
    CURPANEL EQ 'STAT' || $
    CURPANEL EQ 'FILEMGR' $
    THEN BEGIN
    WIDGET_CONTROL,ID,SENSITIVE=0
    IF CURPANEL EQ 'STACKING' THEN BEGIN
      ID_CKB_FLT=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_STACKING_CKB_FLT')
      CKB_FLT=WIDGET_INFO(ID_CKB_FLT,/BUTTON_SET)
      IF CKB_FLT THEN BEGIN
        WIDGET_CONTROL,ID,SENSITIVE=1
      ENDIF
    ENDIF
  ENDIF ELSE BEGIN
    WIDGET_CONTROL,ID,SENSITIVE=1
  ENDELSE
  IGPS_UPDATE_OUT_OPT_PREVIEW, EV
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_UPDATE_OUT_OPT_PREVIEW, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  CURPANEL=ST.CURPANEL
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PREVIEW')
  IF CURPANEL EQ 'MODEL' || $
    CURPANEL EQ 'OUTLIER' || $
    CURPANEL EQ 'HARMONICS' || $
    CURPANEL EQ 'SMOOTH' || $
    CURPANEL EQ 'CMC_CWSF' $
    THEN BEGIN
    WIDGET_CONTROL,ID,SENSITIVE=1
  ENDIF ELSE BEGIN
    WIDGET_CONTROL,ID,SENSITIVE=0
  ENDELSE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_INVERSE, EV
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='LST_SITE')
  WIDGET_CONTROL, ID, GET_UVALUE=SITES
  IF N_ELEMENTS(SITES) EQ 0 || SITES[0] EQ '' THEN RETURN
  SEL=WIDGET_INFO(ID,/LIST_SELECT)
  IF SEL[0] EQ -1 THEN BEGIN
    ON_IGPS_BTN_ALL, EV
    RETURN
  ENDIF
  IND=INV_IND(SEL,TOP=N_ELEMENTS(SITES))
  WIDGET_CONTROL, ID, SET_LIST_SELECT=IND
  
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF IND[0] NE -1 THEN BEGIN
    ON_IGPS_BTN_LOAD, EV, $
      FILE=(*ST.FILES)[LAST(IND)]
  ENDIF ELSE BEGIN
    ON_IGPS_BTN_NONE, EV
  ENDELSE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_INVERSE_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Inverse the site selection.'
    END
  ENDCASE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_ALL, EV
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='LST_SITE')
  WIDGET_CONTROL, ID, GET_UVALUE=SITES
  IF N_ELEMENTS(SITES) EQ 0 || SITES[0] EQ '' THEN RETURN
  WIDGET_CONTROL, ID, SET_LIST_SELECT=INDGEN(N_ELEMENTS(SITES))
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ON_IGPS_BTN_LOAD, EV, $
    FILE=LAST(*ST.FILES)
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_ALL_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Select all sites.'
    END
  ENDCASE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_NONE, EV
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='LST_SITE')
  WIDGET_CONTROL, ID, SET_LIST_SELECT=-1
  IGPS_CLEAR_DRAWS, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;IF PTR_VALID(ST.DATA) THEN PTR_FREE,ST.DATA
  ST.DATA=PTR_NEW()
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_NONE_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Clear the sites selection.'
    END
  ENDCASE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_TOOLS_MENU_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='iGPS tools menu. Click the left button to popup.'
    END
  ENDCASE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_DRAW_TRACK, EV,DI=DI
  IF N_ELEMENTS(DI) EQ 0 THEN DI=0
  NEUSTR=['N','E','U']
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  ;;IF NO DATA LOADED, THEN EXIT.
  IF NOT PTR_VALID(ST.DATA) THEN RETURN
  ;;IF CURRENT PLOT IS THIS DRAW, THEN EXIT.
  ;PRINT,ST.CURDRAW
  IF ST.CURDRAW EQ NEUSTR[DI] THEN RETURN
  
  IF EV.ENTER EQ 0 THEN BEGIN
    WIDGET_CONTROL, ST.LBL_ID, SET_VALUE=''
  ENDIF ELSE BEGIN
    ST.PT_OLD=-1
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    IGPS_UPDATE_DRAW, EV, DI=DI
  ; MUST REDRAW TO UPDATE THE CURRENT PLOT COORDINATE SYSTEM
  ;WSET, ST.DRAWID[0] ;WSET DOES NOT AFFECT THE CURRENT COORDINATE
  ;PRINT,ST.DRAWID[DI]
  ;PRINT,!D.WINDOW
  ;WSET,ST.DRAWID[DI]
  ;WSHOW,ST.DRAWID[DI]
  ;PRINT,DI
  ENDELSE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_DRAW_MOTION, EV, DI=DI
  IF N_ELEMENTS(DI) EQ 0 THEN DI=0
  NEUSTR=['N','E','U']
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF PTR_VALID(ST.DATA) NE 1 THEN BEGIN
    RETURN
  ENDIF
  
  NEUI=(ST.IND_NEU)[DI]
  IF NEUI EQ -1 THEN RETURN
  ;PRINT,'NEUI:',NEUI
  
  ;WSET, ST.DRAWID[DI]
  DATAC = CONVERT_COORD(EV.X, EV.Y, /DEVICE, /TO_DATA, /DOUBLE)
  ;; THE ABOVE Y VALUE IS WRONG WHEN INITIATED. WHEN PRESSED MOTION, IT IS RIGHT. DEC-03-2007 TIAN
  ;;   >>THE PROBLEM WAS CAUSED BY NEGLECTING THE /DOUBLE KEYWORD.
  ;;
  ;FOR NORMAL LABEL STATUS
  STR = NEUSTR[DI]+' ('+STRTRIM(DATAC[0],2)+', '+STRTRIM(STRING(DATAC[1],FORMAT='(G)'),2)+') [#'+ $
    STRTRIM(N_ELEMENTS((*ST.DATA)[0,*]),2)+','+(*ST.SITES)[ST.POS]+']'
    
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='DRAW_'+NEUSTR[DI])
  WIDGET_CONTROL,ID,GET_UVALUE=ISPRESSED
  
  IF (N_ELEMENTS(ISPRESSED) NE 0 && ISPRESSED EQ 1)  $   ;; LEFT MOUSE BUTTON PRESSED & MOTION
    || (ST.CURPANEL EQ 'OFFSET' && ST.CURPANELOFFSETRAD EQ 'NEW') $  ;; ADDING NEW OFFSET EPOCH
    || ST.CURPANEL EQ 'CUT'  $  ;; ADDING NEW OFFSET EPOCH
    || ST.CURPANEL EQ 'PSDECAY'  $  ;; ADDING NEW OFFSET EPOCH
    || ST.PANEL_CUT_DEF EQ 1 $  ;;DEFINE SPAN CUTTING EPOCHS
    THEN BEGIN
    
    DATA=*(ST.DATA)
    ;;ONLY USE THE X-DISTANCE
    TMPMIN=MIN(ABS(*ST.TIME_AXES_VAL-DATAC[0]), IND_MIN)
    IF IND_MIN EQ ST.PT_OLD THEN BEGIN
      ;PRINT,ST.PT_OLD, IND_MIN
      ;PRINT,'NO NEED TO UPDATE;;
      RETURN
    ENDIF
    
    ;;RE-DRAW THE PREVIOUS POINT
    IF ST.PT_OLD NE -1 THEN BEGIN
      ;RETURN
      OPLOT,[(*ST.TIME_AXES_VAL)[ST.PT_OLD]], [DATA[NEUI,ST.PT_OLD]]*ST.SF, PSYM=ST.PSYM, COLOR='00FF00'X
    ENDIF
    
    ST.PT_OLD=IND_MIN
    
    IF PTR_VALID(ST.OFFSETS) && ST.CURPANEL EQ 'OFFSET' THEN BEGIN
      OFFARR=*ST.OFFS
      POS=WHERE(STRUPCASE(OFFARR[0,*]) EQ STRUPCASE(ST.SITE_CUR) AND STRUPCASE(OFFARR[1,*]) EQ NEUSTR[DI])
      ;STOP
      IF POS[0] NE -1 THEN BEGIN
        OFFARR1=OFFARR[*,POS]
        FOR OI=0, N_ELEMENTS(OFFARR1[0,*])-1 DO BEGIN
          IND=WHERE(*ST.TIME_AXES_VAL EQ DOUBLE(OFFARR1[2,OI]))
          IF IND[0] EQ -1 THEN CONTINUE
          OPLOT, [DOUBLE(OFFARR1[2,OI])], [DATA[ST.IND_NEU[DI],IND]]*ST.SF, $
            PSYM=ST.PSYM, COLOR='FF0000'X
        ENDFOR
      ENDIF
    ENDIF
    
    
    ;;NOT OFFSET POINTS
    OPLOT,[(*ST.TIME_AXES_VAL)[IND_MIN]], [DATA[NEUI,IND_MIN]]*ST.SF, PSYM=ST.PSYM, COLOR='FFAA00'X
    ;PRINT,'HERE', [DATA[0,IND_MIN]], [DATA[NEUI,IND_MIN]]
    
    
    IF ST.TS_TYPE EQ 'POWER SPECTRUM' THEN BEGIN
      STR = '('+STRING(DATA[0,IND_MIN]*24D0*3600*365.25,DATA[NEUI,IND_MIN]*ST.SF,FORMAT='(F,",",F)')+') [Nearest Mode]'
    ENDIF ELSE BEGIN
      DOY,STRTRIM((*ST.TIME_AXES_VAL)[IND_MIN],2)+'Y',DAY_OF_YEAR=DOYR,DATE=DATE
      STR = NEUSTR[DI]+' ('+STRTRIM((*ST.TIME_AXES_VAL)[IND_MIN],2)+', '+STRTRIM(STRING(DATA[NEUI,IND_MIN]*ST.SF,FORMAT='(G)'),2)+ $
        ') [Nearest Mode] ('+STRING(FIX(DOYR),FORMAT='(I03)')+'/'+STRTRIM(FIX((*ST.TIME_AXES_VAL)[IND_MIN]),2)+ $
        '; '+STRTRIM(FIX((*ST.TIME_AXES_VAL)[IND_MIN]),2)+'-'+MON_NUM2STR(FIX(DATE[1]))+ $
      '-'+STRING(FIX(DATE[2]),FORMAT='(I02)')+')'
    ENDELSE
    IF PTR_VALID(ST.PANEL_CORR_SITES) EQ 1 THEN BEGIN
      IF ST.TS_TYPE EQ 4 THEN BEGIN
        STR=STR+' '+ST.PANEL_CORR_SITE_CUR+'-'
        STR=STR+' '+(*(ST.PANEL_CORR_SITES))[IND_MIN]
        STR=STR+'('+STRING(DATA[NEUI,IND_MIN],FORMAT='(F8.5)')+')'
      ENDIF
    ENDIF ELSE BEGIN
      IF ST.TS_TYPE EQ 'CORRCOEF XY' THEN BEGIN
        STR=STR+' '+'NEED REVISION'
      ENDIF
    ENDELSE
    
  ENDIF
  ;;ENDIF
  
  ;SHOW THE NEAREST OFFSET TO BE DELETED (HIGHLIGHTED WITH BLACK)
  IF ST.CURPANEL EQ 'OFFSET' && ST.CURPANELOFFSETRAD EQ 'DEL'  && $
    PTR_VALID(ST.OFFSETS) $
    THEN BEGIN
    ;STOP
    DATA=*(ST.DATA)
    IF PTR_VALID(ST.OFFSETS) THEN BEGIN
      OFFARR=*ST.OFFS
      POS=WHERE(STRUPCASE(OFFARR[0,*]) EQ STRUPCASE(ST.SITE_CUR) AND $
        STRUPCASE(OFFARR[1,*]) EQ NEUSTR[DI])
      IF POS[0] NE -1 THEN BEGIN
        OFFARR1=OFFARR[*,POS]
        FOR OI=0, N_ELEMENTS(OFFARR1[0,*])-1 DO BEGIN
          IND=WHERE((*ST.TIME_AXES_VAL) EQ DOUBLE(OFFARR1[2,OI]))
          IF IND[0] EQ -1 THEN CONTINUE
        ENDFOR
      ENDIF
      
    ENDIF
    IF N_ELEMENTS(OFFARR1) LE 0 THEN BEGIN
      RETURN
    ENDIF
    OFFSETS=REFORM(DOUBLE(OFFARR1[2,*]))
    TMPMIN=MIN(ABS(OFFSETS-DATAC[0]), IND_MIN)
    IF IND_MIN EQ ST.PT_OLD THEN BEGIN
      RETURN
    ENDIF
    
    ;PRINT,ST.PT_OLD
    ;;IF OFFSET POINT,DRAW OFFSET COLOR
    ;;RE-DRAW THE PREVIOUS POINT
    ;PRINT,ST.PT_OLD
    IF ST.PT_OLD GE N_ELEMENTS(OFFSETS) THEN ST.PT_OLD=-1
    ;PRINT,ST.PT_OLD,'C'
    IF ST.PT_OLD NE -1 THEN BEGIN
      TMPMIN=MIN(ABS((*ST.TIME_AXES_VAL)-OFFSETS[ST.PT_OLD]), POS)
      IF ST.PT_OLD NE -1 THEN BEGIN
        OPLOT,[OFFSETS[ST.PT_OLD]], [DATA[NEUI,POS]]*ST.SF, PSYM=ST.PSYM, COLOR='FF0000'X
        OPLOT,[OFFSETS[ST.PT_OLD],OFFSETS[ST.PT_OLD]],[-1D30,1D30],COLOR='FFFF00'X
      ENDIF
    ENDIF
    ;PRINT,ST.PT_OLD,'B'
    ;;NOW OFFSET POINTS
    ;PRINT,OFFSETS,IND_MIN,OFFSETS[IND_MIN]
    TMPMIN=MIN(ABS((*ST.TIME_AXES_VAL)-OFFSETS[IND_MIN]), POS)
    ;HELP,[OFFSETS[IND_MIN]], [DATA[NEUI,POS]]*ST.SF,ST.PSYM
    ; OFFSET POINT TO BE DELETED
    OPLOT,[OFFSETS[IND_MIN]], [DATA[NEUI,POS]]*ST.SF, PSYM=ST.PSYM, COLOR='0'X
    OPLOT,[OFFSETS[IND_MIN],OFFSETS[IND_MIN]],[-1D30,1D30],COLOR='0'X
    ST.PT_OLD=IND_MIN
    ;STOP
    ;PRINT,ST.PT_OLD
    
    
    ;;ONLY USE THE X-DISTANCE
    TMPMIN=MIN(ABS((*ST.TIME_AXES_VAL)-OFFSETS[IND_MIN]),IND_MIN)
    STR = '('+STRTRIM((*ST.TIME_AXES_VAL)[IND_MIN],2)+','+ $
      STRTRIM(DATA[NEUI,IND_MIN]*ST.SF,2)+') [Nearest Mode]'
    IF PTR_VALID(ST.PANEL_CORR_SITES) EQ 1 THEN BEGIN
      IF ST.TS_TYPE EQ 4 THEN BEGIN
        STR=STR+' '+ST.PANEL_CORR_SITE_CUR+'-'
        STR=STR+' '+(*(ST.PANEL_CORR_SITES))[IND_MIN]
        STR=STR+'('+STRING(DATA[NEUI,IND_MIN],FORMAT='(F8.5)')+')'
      ENDIF
    ENDIF ELSE BEGIN
      IF ST.TS_TYPE EQ 'CORRCOEF XY' THEN BEGIN
        STR=STR+' '+'NEED REVISION'
      ENDIF
    ENDELSE
    
  ENDIF
  
  ;;MIDDLE PRESSED MOVE
  IF ST.DRAW_N_PRESSED EQ 2 THEN BEGIN
    TMPMIN=MIN(ABS(*ST.TIME_AXES_VAL-DATAC[0]), IND_MIN)
    ST.DRAW_N_XRANGE_POS_NEW=(*ST.TIME_AXES_VAL_MJD)[IND_MIN]
    ;;PRINT, DATAC[0],ST.DRAW_N_XRANGE_POS_NEW
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
    RETURN
  ENDIF
  ;;
  
  ;;//FOR DEFINE CUTTING EPOCHS
  IF ST.PANEL_CUT_DEF EQ 1 THEN BEGIN
    ;?DRAW VERTICAL LINE
    ;PRINT, DATAC
    IGPS_UPDATE_DRAW, EV, DI=0
    OPLOT,[DATAC[0],DATAC[0]], [-10E10,10E10], COLOR='AA0000'X
    IGPS_UPDATE_DRAW, EV, DI=1
    OPLOT,[DATAC[0],DATAC[0]], [-10E10,10E10], COLOR='AA0000'X
    IGPS_UPDATE_DRAW, EV, DI=2
    OPLOT,[DATAC[0],DATAC[0]], [-10E10,10E10], COLOR='AA0000'X
  ENDIF
  ;;\\END-OF-DEFINE-CUTS
  
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=STR
  ;;
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_DRAW_CLICK, EV, DI=DI
  ;STOP
  ;HELP,EV,/ST
  IF N_ELEMENTS(DI) EQ 0 THEN DI=0
  NEUSTR=['N','E','U']
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;;HELP, EV, /ST
  IF NOT PTR_VALID(ST.DATA) THEN RETURN
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='DRAW_'+NEUSTR[DI])
  
  
  ;;MOUSE LEFT BUTTON CLICKED
  IF EV.PRESS EQ 1 THEN BEGIN
    WIDGET_CONTROL,ID,SET_UVALUE=1
    CMDSTR='ST.DRAW_'+NEUSTR[DI]+'_PRESSED=EV.PRESS'
    TMP=EXECUTE(CMDSTR)
    CMDSTR='ST.DRAW_'+NEUSTR[DI]+'_RELEASED=EV.RELEASE'
    TMP=EXECUTE(CMDSTR)
    ; ST.DRAW_N_PRESSED=EV.PRESS
    ; ST.DRAW_N_RELEASED=EV.RELEASE
    ; ST.PT_OLD=EV.X
    ; THIS IS WRONG!
    ;CORRENT WAY:
    DATAC = CONVERT_COORD(EV.X, EV.Y, /DEVICE, /TO_DATA, /DOUBLE)
    DATA=*ST.DATA
    TMPMIN=MIN(ABS(*ST.TIME_AXES_VAL-DATAC[0]), IND_MIN)
    ST.PT_OLD=IND_MIN
    ;PRINT, 'DRAW MOUSE LEFT BUTTON PRESSED', ST.PT_OLD
    ;HELP,EV,/ST
    ;UPDATE CURRENT PRESSED POINT, AND BLINK FOR A WHILE
    DOY,STRTRIM((*ST.TIME_AXES_VAL)[IND_MIN],2)+'Y',DAY_OF_YEAR=DOYR,DATE=DATE
    STR = NEUSTR[DI]+' ('+STRTRIM((*ST.TIME_AXES_VAL)[IND_MIN],2)+', '+STRTRIM(STRING(DATA[(ST.IND_NEU)[DI],IND_MIN]*ST.SF,FORMAT='(G)'),2)+ $
      ') [Nearest Mode] ('+STRING(FIX(DOYR),FORMAT='(I03)')+'/'+STRTRIM(FIX((*ST.TIME_AXES_VAL)[IND_MIN]),2)+ $
      '; '+STRTRIM(FIX((*ST.TIME_AXES_VAL)[IND_MIN]),2)+'-'+MON_NUM2STR(FIX(DATE[1]))+ $
    '-'+STRING(FIX(DATE[2]),FORMAT='(I02)')+')'
    ;HELP,STR
    WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=STR
    PSYM=ST.PSYM
    IF PSYM EQ 0 THEN PSYM=2
    OPLOT,[(*ST.TIME_AXES_VAL)[ST.PT_OLD]], [DATA[(ST.IND_NEU)[DI],ST.PT_OLD]]*ST.SF, PSYM=PSYM, COLOR='FF0000'X
    ;STOP
    WAIT,0.1
    
    
    ;;//FOR DEFINE CUTTING EPOCHS
    IF ST.PANEL_CUT_DEF EQ 1 THEN BEGIN
      ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_CUT_LST_SPANS')
      WIDGET_CONTROL, ID, GET_UVALUE=UV_CUT_LST
      ;HELP, UV_CUT_LIST
      IF ST.PANEL_CUT_DEF_STARTED EQ 0 THEN BEGIN
        ;PRINT, 'START:',IND_MIN
        ST.PANEL_CUT_DEF_STARTED=1
        IF N_ELEMENTS(UV_CUT_LST) LT 2 THEN BEGIN
          UV_CUT_LST=[IND_MIN,0]
        ENDIF ELSE BEGIN
          UV_CUT_LST=[[UV_CUT_LST],[IND_MIN,0]]
        ENDELSE
        WIDGET_CONTROL, ID, SET_UVALUE=UV_CUT_LST, /NO_COPY
      ENDIF ELSE BEGIN
        ;PRINT, 'END:', IND_MIN
        WIDGET_CONTROL, ID, GET_UVALUE=UV_CUT_LST
        ST.PANEL_CUT_DEF_STARTED=0
        UV_CUT_LST[1,N_ELEMENTS(UV_CUT_LST[0,*])-1]=IND_MIN
        WIDGET_CONTROL, ID, $
          SET_VALUE=STRTRIM(DATA[REPLICATE(ST.IND_TIME,N_ELEMENTS(UV_CUT_LST[0,*])),REFORM(UV_CUT_LST[0,*])],2) $
          +'~'$
          +STRTRIM(DATA[REPLICATE(ST.IND_TIME,N_ELEMENTS(UV_CUT_LST[1,*])),REFORM(UV_CUT_LST[1,*])],2)
        WIDGET_CONTROL, ID, SET_UVALUE=UV_CUT_LST, /NO_COPY
      ENDELSE
    ENDIF
  ;;\\END-OF-DEFINE-CUTS
  ENDIF
  
  
  ;;MOUSE LEFT BUTTON RELEASED
  IF EV.RELEASE EQ 1 THEN BEGIN
    WIDGET_CONTROL,ID,SET_UVALUE=0
    CMDSTR='ST.DRAW_'+NEUSTR[DI]+'_PRESSED=EV.PRESS'
    TMP=EXECUTE(CMDSTR)
    CMDSTR='ST.DRAW_'+NEUSTR[DI]+'_RELEASED=EV.RELEASE'
    TMP=EXECUTE(CMDSTR)
    ;;
    ;;RE-DRAW THE PREVIOUS POINT
    ;STOP
    ;Wed Jul 13 09:17:45 CST 2011, tianyf
    IF ST.PT_OLD NE -1 THEN BEGIN
      OPLOT,[(*ST.TIME_AXES_VAL)[ST.PT_OLD]], [(*ST.DATA)[ST.IND_NEU[DI],ST.PT_OLD]]*ST.SF, PSYM=ST.PSYM, COLOR='00FF00'X
      ST.PT_OLD=-1
    ENDIF
    
    
    ;DEFINE CUTTING SPANS
    IF ST.CURPANEL EQ 'CUT' THEN BEGIN
      ;STOP
      DATAC = CONVERT_COORD(EV.X, EV.Y, /DEVICE, /TO_DATA, /DOUBLE)
      ;;ONLY USE THE X-DISTANCE
      TMPMIN=MIN(ABS(*ST.TIME_AXES_VAL-DATAC[0]), IND_MIN)
      IF ST.CUT_START EQ 0 THEN BEGIN
        CUTS=[(*ST.TIME_AXES_VAL)[IND_MIN],-9999]
        CUTS=REFORM(CUTS,2,1)
        IF NOT PTR_VALID(ST.CUTS) THEN BEGIN
          ST.CUTS=PTR_NEW(CUTS)
        ENDIF ELSE BEGIN
          ;PTR_FREE,ST.CUTS
          ST.CUTS=PTR_NEW([[CUTS],[[*ST.CUTS]]])
        ENDELSE
        ;STOP
        ST.CUT_START=1
      ENDIF ELSE BEGIN
        CUTS=*ST.CUTS
        IF CUTS[0,0] LT (*ST.TIME_AXES_VAL)[IND_MIN] THEN BEGIN
          CUTS[1,0]=(*ST.TIME_AXES_VAL)[IND_MIN]
        ENDIF ELSE BEGIN
          TMPCUT=CUTS[0,0]
          CUTS[0,0]=(*ST.TIME_AXES_VAL)[IND_MIN]
          CUTS[1,0]=TMPCUT
        ENDELSE
        ;PRINT,CUTS,FORMAT='(F20.8)'
        ;IF PTR_VALID(ST.CUTS) THEN PTR_FREE,ST.CUTS
        ST.CUTS=PTR_NEW(CUTS)
        STR=''
        FOR I=0,N_ELEMENTS(CUTS[0,*])-1 DO BEGIN
          STR=[STR,STRING(CUTS[*,I],FORMAT='(F10.5," ~ ",F10.5)')]
        ENDFOR
        STR=STR[1:*]
        ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_CUT_LST_SPANS')
        WIDGET_CONTROL,ID,SET_VALUE=STR
        ST.CUT_START=0
      ENDELSE
    ENDIF
    
    ;DEFINE NEW OFFSET
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_OFFSET_CKB_NEU')
    WIDGET_CONTROL,ID,GET_VALUE=OFFSET_CKB_NEU
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OFFSET')
    CKB_OFFSET=WIDGET_INFO(ID,/BUTTON_SET)
    IF ST.CURPANEL EQ 'OFFSET' && ST.CURPANELOFFSETRAD EQ 'NEW' $
      && OFFSET_CKB_NEU[DI] EQ 1 $
      && CKB_OFFSET EQ 1 THEN BEGIN
      
      ;EXPECTED: IF ADD A NEW OFFSET, BUT IN JD/MJD TIME AXIS?
      ;  2011APR18 TIANYF
      ;  ???
      ;
      ;;PRINT,EV.X,EV.Y
      ;STOP
      DATAC = CONVERT_COORD(EV.X, EV.Y, /DEVICE, /TO_DATA, /DOUBLE)
      ;;ONLY USE THE X-DISTANCE
      TMPMIN=MIN(ABS((*ST.TIME_AXES_VAL)-DATAC[0]), IND_MIN)
      POS=WHERE(OFFSET_CKB_NEU EQ 1)
      STR=''
      FOR PI=0,N_ELEMENTS(POS)-1 DO BEGIN
        STR=[STR,ST.SITE_CUR+'-'+NEUSTR[POS[PI]]+'-'+STRING((*ST.TIME_AXES_VAL)[IND_MIN],FORMAT='(F10.5)')]
        STR_OFF=ST.SITE_CUR+'-'+NEUSTR[DI]+'-'+STRING((*ST.TIME_AXES_VAL)[IND_MIN],FORMAT='(F10.5)')
      ENDFOR
      STR=STR[1:*]
      
      IF NOT PTR_VALID(ST.OFFSETS) THEN BEGIN
        OFFS=STR
      ENDIF ELSE BEGIN
        OFFS=REFORM(*ST.OFFSETS)
        POS=WHERE(OFFS EQ STR)
        ;STOP
        IF POS[0] NE -1 THEN BEGIN
          MSGBOX,'Already exisT! Exit.',TITLE='iGPS', DIALOG_PARENT=EV.TOP,/INFO
          RETURN
        ENDIF
        OFFS=[STR,OFFS]
      ENDELSE
      ;IF PTR_VALID(ST.OFFSETS) THEN PTR_FREE,ST.OFFSETS
      ST.OFFSETS = PTR_NEW(REFORM(OFFS))
      WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_UVALUE=OFFS, /NO_COPY
    ;WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_VALUE=OFFS, /NO_COPY
    ENDIF
    
    ;DELETE OFFSET
    IF ST.CURPANEL EQ 'OFFSET' && ST.CURPANELOFFSETRAD EQ 'DEL' && $
      PTR_VALID(ST.OFFSETS) THEN BEGIN
      
      ;STOP
      DATA=*(ST.DATA)
      OFFS = ''
      OFFSETS=*ST.OFFSETS
      OFFARR=*ST.OFFS
      POS=WHERE(STRUPCASE(OFFARR[0,*]) EQ STRUPCASE(ST.SITE_CUR) AND $
        STRUPCASE(OFFARR[1,*]) EQ NEUSTR[DI])
      IF POS[0] NE -1 THEN BEGIN
        OFFARR1=OFFARR[*,POS]
        OFFSETS_=OFFSETS[POS]
        POS_OTHER=INV_IND(POS,TOP=N_ELEMENTS(OFFARR[0,*]))
        IF POS_OTHER[0] EQ -1 THEN BEGIN
          OFFARR_OTHER=''
          OFFSETS_OTHER=''
        ENDIF ELSE BEGIN
          OFFARR_OTHER=OFFARR[*,POS_OTHER]
          OFFSETS_OTHER=OFFSETS[POS_OTHER]
        ENDELSE
        FOR OI=0, N_ELEMENTS(OFFARR1[0,*])-1 DO BEGIN
          IND=WHERE((*ST.TIME_AXES_VAL) EQ DOUBLE(OFFARR1[2,OI]))
          IF IND[0] EQ -1 THEN CONTINUE
          OPLOT, [DOUBLE(OFFARR1[2,OI])], [DATA[ST.IND_NEU[DI],IND]]*ST.SF, $
            PSYM=ST.PSYM, COLOR='FFFF00'X
        ENDFOR
      ENDIF ELSE BEGIN
        RETURN
      ENDELSE
      
      
      ;STOP
      IF N_ELEMENTS(OFFARR1) LE 0 THEN BEGIN
        RETURN
      ENDIF
      OFFSETS=REFORM(DOUBLE(OFFARR1[2,*]))
      DATAC = CONVERT_COORD(EV.X, EV.Y, /DEVICE, /TO_DATA, /DOUBLE)
      TMPMIN=MIN(ABS(OFFSETS-DATAC[0]), IND_MIN)
      IF IND_MIN EQ ST.PT_OLD THEN BEGIN
        RETURN
      ENDIF
      WSET, ST.DRAWID[0]
      
      IND_REM=INV_IND(IND_MIN,TOP=N_ELEMENTS(OFFSETS))
      
      ;IF PTR_VALID(ST.OFFSETS) THEN PTR_FREE,ST.OFFSETS
      IF IND_REM[0] NE -1 THEN BEGIN
        IF  OFFARR_OTHER[0] EQ '' THEN BEGIN
          OFFSETS=OFFSETS_[IND_REM]
        ENDIF ELSE BEGIN
          OFFSETS=[OFFSETS_OTHER,OFFSETS_[IND_REM]]
        ENDELSE
        ST.OFFSETS=PTR_NEW(OFFSETS)
      ENDIF ELSE BEGIN
        IF  OFFARR_OTHER[0] EQ '' THEN BEGIN
          OFFSETS=''
          ST.OFFSETS=PTR_NEW()
        ENDIF ELSE BEGIN
          OFFSETS=OFFSETS_OTHER
          ST.OFFSETS=PTR_NEW(OFFSETS_OTHER)
        ENDELSE
      ENDELSE
    ;STOP
      
    ;WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_UVALUE=OFFSETS,/NO_COPY
    ;WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_VALUE=OFFSETS, /NO_COPY
    ENDIF
    
    ;DEFINE NEW PSDECAY
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_PSDECAY_CKB_NEU')
    WIDGET_CONTROL,ID,GET_VALUE=PSDECAY_CKB_NEU
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PSDECAY')
    CKB_PSDECAY=WIDGET_INFO(ID,/BUTTON_SET)
    IF ST.CURPANEL EQ 'PSDECAY' && PSDECAY_CKB_NEU[DI] EQ 1 && CKB_PSDECAY THEN BEGIN
      ;PRINT,EV.X,EV.Y
      ;PRINT,CKB_PSDECAY
      DATAC = CONVERT_COORD(EV.X, EV.Y, /DEVICE, /TO_DATA, /DOUBLE)
      ;;ONLY USE THE X-DISTANCE
      TMPMIN=MIN(ABS(*ST.TIME_AXES_VAL-DATAC[0]), IND_MIN)
      POS=WHERE(PSDECAY_CKB_NEU EQ 1)
      STR=''
      FOR PI=0,N_ELEMENTS(POS)-1 DO BEGIN
        STR=[STR,ST.SITE_CUR+'-'+NEUSTR[POS[PI]]+'-'+STRING((*ST.TIME_AXES_VAL)[IND_MIN],FORMAT='(F10.5)')]
        STR_OFF=ST.SITE_CUR+'-'+NEUSTR[DI]+'-'+STRING((*ST.TIME_AXES_VAL)[IND_MIN],FORMAT='(F10.5)')
      ENDFOR
      STR=STR[1:*]
      ;STOP
      IF NOT PTR_VALID(ST.PSDECAYS) THEN BEGIN
        PSDECAYS=STR
      ENDIF ELSE BEGIN
        PSDECAYS=REFORM(*ST.PSDECAYS)
        POS=WHERE(PSDECAYS EQ STR)
        IF POS[0] NE -1 THEN BEGIN
          MSGBOX,'Already exist! Skipped.',TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
          RETURN
        ENDIF
        PSDECAYS=[STR,PSDECAYS]
      ENDELSE
      
      IF NOT PTR_VALID(ST.OFFSETS) THEN BEGIN
        OFFS=STR
      ENDIF ELSE BEGIN
        OFFS=REFORM(*ST.OFFSETS)
        POS=WHERE(OFFS EQ STR)
        IF POS[0] NE -1 THEN BEGIN
          MSGBOX,'Already exist! Skipped.',TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
          RETURN
        ENDIF
        OFFS=[STR,OFFS]
      ENDELSE
      
      ;;
      ;IF PTR_VALID(ST.PSDECAYS) THEN PTR_FREE,ST.PSDECAYS
      ST.PSDECAYS = PTR_NEW(REFORM(PSDECAYS))
      ;WIDGET_CONTROL, ST.LST_PSDECAY_ID, SET_UVALUE=PSDECAYS, /NO_COPY
      ;WIDGET_CONTROL, ST.LST_PSDECAY_ID, SET_VALUE=PSDECAYS, /NO_COPY
      
      ;IF PTR_VALID(ST.OFFSETS) THEN PTR_FREE,ST.OFFSETS
      ST.OFFSETS = PTR_NEW(REFORM(OFFS))
    ;WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_UVALUE=OFFS, /NO_COPY
    ;WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_VALUE=OFFS, /NO_COPY
    ENDIF
    
    
  ENDIF
  
  
  
  
  ;;LEFT MOUSE BUTTON PRESSED, AND RIGHT MOUSE BUTTON CLICKED.
  ;; (ONLY FOR CORRCOEF DATA TYPE)
  IF ST.DRAW_N_PRESSED EQ 1 AND EV.PRESS EQ 4 AND ST.TS_TYPE EQ 'CORRCOEF XY' THEN BEGIN
    ;;PRINT,'RIGHT MOUSE CLICKED'
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='LST_SITE')
    ;;GET CURRENT SELECTED ITEM
    CUR=WIDGET_INFO(ID,/LIST_SELECT)
    IF CUR[0] EQ -1 THEN RETURN
    ;;PRINT,ST.PATH+PATH_SEP()+SITES[CUR]+'*.NEU'
    FILE = FILE_SEARCH(PATH+PATH_SEP()+(*ST.PANEL_CORR_SITES)[CUR]+'*.NEU', COUNT=NF)
    
    ;PRINT, FILE
    IF NF LT 1 THEN RETURN
    WIN_OLD= !D.WINDOW
    DATA_PLOT_SIO_BIN, FILES=FILE, DELETE=0
    WSET,WIN_OLD
  ENDIF
  
  ;;MIDDLE MOUSE BUTTON CLICKED.
  IF EV.PRESS EQ 2  THEN BEGIN
    ST.DRAW_N_PRESSED=EV.PRESS
    ST.DRAW_N_RELEASED=EV.RELEASE
    ;;HELP, EV, /ST
    DATAC = CONVERT_COORD(EV.X, EV.Y, /DEVICE, /TO_DATA)
    ;ST.PT_OLD=EV.X ;;WRONG!!!
    TMPMIN=MIN(ABS(*ST.TIME_AXES_VAL-DATAC[0]), IND_MIN)
    ST.PT_OLD=IND_MIN
    ST.DRAW_N_XRANGE_POS_OLD=(*ST.TIME_AXES_VAL_MJD)[IND_MIN]  ;DATAC[0];; DO NOT USE DATA COORDINATES
    
  END
  
  ;;MIDDLE MOUSE BUTTON RELEASED.
  IF EV.RELEASE EQ 2 THEN BEGIN
    ;;
    IF ST.PT_OLD EQ EV.X THEN RETURN ;;MIDDLE BUTTON RELEASED WITHOUT MOUSE MOVE.
    ;;
    ;STOP
    ;;PRINT,ST.DRAW_N_XRANGE_POS_OLD
    ST.DRAW_N_PRESSED=EV.PRESS
    ST.DRAW_N_RELEASED=EV.RELEASE
    ST.PT_OLD=-1
    DATAC = CONVERT_COORD(EV.X, EV.Y, /DEVICE, /TO_DATA)
    XMIN=ST.DRAW_N_XRANGE_VIS[0]+(ST.DRAW_N_XRANGE_POS_OLD-ST.DRAW_N_XRANGE_POS_NEW)
    ;;PRINT,XMIN,ST.DRAW_N_XRANGE[0],DATAC[0]
    IF XMIN LT ST.DRAW_N_XRANGE[0] THEN BEGIN
      XMIN=ST.DRAW_N_XRANGE[0]
      ;PRINT,XMIN, ST.DRAW_N_XRANGE[0]
      XMAX=XMIN+ST.DRAW_N_XRANGE_VIS[1]-ST.DRAW_N_XRANGE_VIS[0]
      ;;RETURN
      GOTO, NOMAXMIN
    ENDIF
    XMAX=ST.DRAW_N_XRANGE_VIS[1]+(ST.DRAW_N_XRANGE_POS_OLD-ST.DRAW_N_XRANGE_POS_NEW)
    ;;PRINT,'XMAX:',XMAX,ST.DRAW_N_XRANGE[0],DATAC[0]
    IF XMAX GT ST.DRAW_N_XRANGE[1] THEN BEGIN
      XMAX=ST.DRAW_N_XRANGE[1]
      XMIN=XMAX-(ST.DRAW_N_XRANGE_VIS[1]-ST.DRAW_N_XRANGE_VIS[0])
      GOTO, NOMAXMIN
    ENDIF
    
    NOMAXMIN:
    ST.DRAW_N_XRANGE_VIS=[XMIN,XMAX]
    ;PRINT,XMIN,XMAX, XMAX-XMIN,ST.DRAW_N_XRANGE_POS_OLD,ST.DRAW_N_XRANGE_POS_NEW, $
    ;  ST.DRAW_N_XRANGE_POS_OLD-ST.DRAW_N_XRANGE_POS_NEW, $
    ;  ST.DRAW_N_XRANGE_VIS, $
    ;  FORMAT='(8F15.5)'
    ;;PRINT,'HI'
    TS_TYPE=ST.TS_TYPE
    
    ;;SET SLIDER
    ST.SLIDER_PAN_POS = (TOTAL(ST.DRAW_N_XRANGE_VIS)/2D0-MIN(ST.DRAW_N_XRANGE)) $
      /(ST.DRAW_N_XRANGE[1]-ST.DRAW_N_XRANGE[0])*100
    IF XMIN EQ ST.DRAW_N_XRANGE[0] THEN ST.SLIDER_PAN_POS = 0
    IF XMAX EQ ST.DRAW_N_XRANGE[1] THEN ST.SLIDER_PAN_POS = 100
    WIDGET_CONTROL, ST.SLIDER_PAN_ID, SET_VALUE=ST.SLIDER_PAN_POS
    ;PRINT, 'CURRENT SLIDER POS:',ST.SLIDER_PAN_POS,TOTAL(ST.DRAW_N_XRANGE_VIS)/2D0-MIN(ST.DRAW_N_XRANGE)
    ;PRINT,(ST.DRAW_N_XRANGE[1]-ST.DRAW_N_XRANGE[0])
    ;;HELP,ST,/ST
    ;HELP,TS_TYPE
    
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    IGPS_UPDATE_DRAW_NEU, EV
    RETURN
    
    IF TS_TYPE EQ 'CORRCOEF XY' THEN RETURN
    iGPS_UPDATE_DRAW_E, EV
    iGPS_UPDATE_DRAW_U, EV
    RETURN
  ENDIF
  
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  
  ;HELP,ev.RELEASE
  IF EV.RELEASE EQ 1 THEN BEGIN
    ;STOP
    IGPS_UPDATE_OFFPS_ARR,EV
  ENDIF
  
  ;FIRST, DRAW OTHER PLOTS
  DIS=[0,1,2]
  POS=WHERE(DIS EQ DI, COMPLEMENT=DI_FIRST)
  FOR I=0,N_ELEMENTS(DI_FIRST)-1 DO BEGIN
    IGPS_UPDATE_DRAW, EV, DI=DIS[DI_FIRST[I]]
  ENDFOR
  ;DRAW THE CURRENT PLOT AT LAST
  IGPS_UPDATE_DRAW, EV, DI=DI
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_WGS84XYZ, EV
  WGS84XYZ_UI,GROUP_LEADER=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_CONVERSION_OFFSET_SIO2GPSI, EV
  OFFSET_SIO2GPSI
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_CONVERSION_EXPORT_SIO_PARAM, EV
  FILE=DIALOG_PICKFILE(TITLE='SIO Parameters File',FILE='refinedSeriesSummary.txt', $
    FILTER='*.txt')
  IF FILE EQ '' THEN RETURN
  
  OFILE=DIALOG_PICKFILE(/WRITE)
  IF OFIEL EQ '' THEN RETURN
  
  EXPORT_SIO_PARAM,FILE,OFILE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_CREATE_SITE_FILE, EV
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES_ALL,SELECT=SITES_SEL) NE 0 THEN BEGIN
    MSGBOX,'No sites selected!',TITLE='iGPS',DIALOG_PARENT=EV.TOP,/ERROR
    RETURN
  ENDIF
  
  
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  SRC='FILTER='+ST.DT_QUERYSTR+' [SELECTED]'
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  ;GET SOURCE DIRECTORY
  IF IGPS_CHECK_PATH(EV,PATH=PATH) EQ 0 THEN BEGIN
    SRC=[PATH,SRC]
  ENDIF
  
  FILE=DIALOG_PICKFILE(/WRITE,/OVERWRITE_PROMPT,FILTER=[['*.sit','*'],['iGPS Sites List File (*.sit)','All files (*)']])
  IF FILE EQ '' THEN RETURN
  CD, GETPATHNAME(FILE)
  
  WTSIT,FILE,SITES=SITES_SEL, $
    SRC=SRC, $
    PROG='iGPS:SITEFILE+WTSIT', $
    USER=USER
    
  MSGBOX,'Done! '+STRTRIM(N_ELEMENTS(SITES_SEL),2)+' sites saved.',TITLE='iGPS', $
    DIALOG_PARENT=EV.TOP,/INFO
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_CREATE_QOCA_SITE_FILE, EV
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES_ALL,SELECT=SITES_SEL) NE 0 THEN BEGIN
    MSGBOX,'No sites selected!',TITLE='iGPS',DIALOG_PARENT=EV.TOP,/ERROR
    RETURN
  ENDIF
  
  FILE=DIALOG_PICKFILE(/WRITE,FILTER=[['*.list'],['QOCA Site List File (*.list)']])
  IF FILE EQ '' THEN RETURN
  CD, GETPATHNAME(FILE)
  
  WRITE_QOCA_SITE,FILE,SITES=STRUPCASE(SITES_SEL)
  
  MSGBOX,'Done! '+STRTRIM(N_ELEMENTS(SITES_SEL),2)+' sites saved.',TITLE='iGPS', $
    DIALOG_PARENT=EV.TOP,/INFO
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_CREATE_QOCA_SITE_FILE_WITH_LLH, EV
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_SEL) NE 0 THEN RETURN
  ;GET NET FILE
  LFILE=DIALOG_PICKFILE(TITLE='A Priori Coordinates File [QOCA Network File]', $
    FILTER=[['*.net'],['QOCA Network File (*.net)']])
  IF LFILE EQ '' THEN RETURN
  CD, GETPATHNAME(LFILE)
  ;GET OUTPUT SITE LIST FILE
  FILE=DIALOG_PICKFILE(/WRITE,FILTER=[['*.list'],['QOCA Site List File (*.list)']])
  IF FILE EQ '' THEN RETURN
  CD, GETPATHNAME(FILE)
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  ;GET SITE GEODETIC COORDINATES
  LLH=DBLARR(3,N_ELEMENTS(SITES_SEL))
  READ_NET, LFILE, SITE=SITES_SEL, LLH=LLHS
  
  WRITE_QOCA_SITE_LLH,FILE,SITES=STRUPCASE(SITES_SEL),LLH=LLHS
  MSGBOX,'Done! '+STRTRIM(N_ELEMENTS(SITES_SEL),2)+' sites saved.',TITLE='iGPS', $
    DIALOG_PARENT=EV.TOP,/INFO
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_CREATE_MLOAD_SITE_LIST_FROM_NET, EV
  FILE=DIALOG_PICKFILE(TITLE='A Priori Coordinates File [QOCA Network File]', $
    FILTER=[['*.net'],['QOCA Network File (*.net)']])
  IF FILE EQ '' THEN RETURN
  CD, GETPATHNAME(FILE)
  ;GET OUTPUT SITE LIST FILE
  OFILE=DIALOG_PICKFILE(/WRITE,FILTER=[['*.list'],['QOCA Site List File (*.list)']])
  IF OFILE EQ '' THEN RETURN
  CD, GETPATHNAME(OFILE)
  
  NET_TO_QOCA_LLH, FILE, OFILE
  MSGBOX,'Done! ',TITLE='iGPS', $
    DIALOG_PARENT=EV.TOP,/INFO
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_COMBINE_QOCA_SITES_FILE, EV

  FILEA=DIALOG_PICKFILE(/READ,FILTER=[['*.list'],['QOCA Site List File (*.list)']],TITLE='First QOCA Sites List File:')
  IF FILEA EQ '' THEN RETURN
  CD, GETPATHNAME(FILEA)
  
  FILEB=DIALOG_PICKFILE(/READ,FILTER=[['*.list'],['QOCA Site List File (*.list)']],TITLE='First QOCA Sites List File:')
  IF FILEB EQ '' THEN RETURN
  CD, GETPATHNAME(FILEB)
  
  OFILE=DIALOG_PICKFILE(/WRITE,FILTER=[['*.list'],['QOCA Site List File (*.list)']],TITLE='Output QOCA Sites List File:')
  IF OFILE EQ '' THEN RETURN
  CD, GETPATHNAME(OFILE)
  
  COMBINE_QOCA_SITES_FILES, [FILEA,FILEB],OFILE,PROG='iGPS:COMBINE_QOCA_SITES_FILES'
  
  MSGBOX,'Done! ',TITLE='iGPS', DIALOG_PARENT=EV.TOP,/INFO
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_MINUS_QOCA_SITES_FILE_LLH, EV

  FILEA=DIALOG_PICKFILE(/READ,FILTER=[['*.list'],['QOCA Site List File (*.list)']],TITLE='First QOCA Sites List File:')
  IF FILEA EQ '' THEN RETURN
  CD, GETPATHNAME(FILEA)
  
  FILEB=DIALOG_PICKFILE(/READ,FILTER=[['*.list'],['QOCA Site List File (*.list)']],TITLE='First QOCA Sites List File:')
  IF FILEB EQ '' THEN RETURN
  CD, GETPATHNAME(FILEB)
  
  OFILE=DIALOG_PICKFILE(/WRITE,FILTER=[['*.list'],['QOCA Site List File (*.list)']],TITLE='Output QOCA Sites List File:')
  IF OFILE EQ '' THEN RETURN
  CD, GETPATHNAME(OFILE)
  
  MINUS_QOCA_SITES_FILES_LLH, [FILEA,FILEB],OFILE,PROG='iGPS:MINUS_QOCA_SITES_FILES_LLH'
  
  MSGBOX,'Done! ',TITLE='iGPS', DIALOG_PARENT=EV.TOP,/INFO
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_CREATE_SITE_FILE_KML,EV
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE) NE 0 THEN RETURN
  ;GET NET FILE
  LFILE=DIALOG_PICKFILE(TITLE='A Priori Coordinates File [QOCA Network File]', $
    FILTER=[['*.net'],['QOCA Network File (*.net)']])
  IF LFILE EQ '' THEN RETURN
  CD, GETPATHNAME(LFILE)
  ;GET OUTPUT SITE LIST FILE
  FILE=DIALOG_PICKFILE(/WRITE,FILTER=[['*.kml'],['Google Earth File (*.kml)']])
  IF FILE EQ '' THEN RETURN
  CD, GETPATHNAME(FILE)
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  ;GET SITE GEODETIC COORDINATES
  FILES=*ST.FILES
  LLH=DBLARR(3,N_ELEMENTS(SITES_USE))
  FOR I=0, N_ELEMENTS(SITES_USE)-1 DO BEGIN
    CURI=WHERE(SITES EQ SITES_USE[I])
  ENDFOR
  READ_NET, LFILE, SITE=SITES_USE, LLH=LLHS
  ;by tianyf on Wed, Nov 02, 2016  4:17:11 PM
  ;make the longitude range is -180~180
  POS=WHERE(LLHS[0,*] GE 180D0)
  IF POS[0] NE -1 THEN BEGIN
    LLHS[0,POS]=LLHS[0,POS]-360D0
  ENDIF
  
  WRITE_SITE_KML,FILE,SITES=SITES_USE,LLH=LLHS
  
  MSGBOX,'Done!',TITLE='iGPS', DIALOG_PARENT=EV.TOP,/INFO
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_COORDS_FILE_NET_FROM_APR, EV
  FILE=DIALOG_PICKFILE(TITLE='GAMIT ITRF (*.apr) or lfile. File:', $
    FILTER=[['*.apr','*'],['GAMIT L-file (*.apr)','GAMIT L-file (*)']])
  IF FILE EQ '' THEN RETURN
  CD,GETPATHNAME(FILE)
  OFILE=DP(/WRITE,FILTER=[['*.net','*'],['QOCA Network File (*.net)','QOCA Network File (*.net)']],/AF)
  IF OFILE EQ '' THEN RETURN
  CD,GETPATHNAME(OFILE)
  APR2NET,FILE,OFILE
  MSGBOX, 'Done!', TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_COORDS_FILE_NET_FROM_SITELOG, EV
  PATH=DIALOG_PICKFILE(TITLE='Site Log Files Directory?',/DIRECTORY)
  IF PATH EQ '' THEN RETURN
  CD,PATH
  OFILE=DP(/WRITE,FILTER=[['*.net'],['QOCA Network File (*.net)']],/AF)
  IF OFILE EQ '' THEN RETURN
  CD,GETPATHNAME(OFILE)
  SITELOG2NET,PATH,OFILE
  MSGBOX, 'Done!', TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_STAT_SDDN, EV
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE, INDEX=INDEX) NE 0 THEN RETURN
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  FILES=(*ST.FILES)[INDEX]
  OFILE=DP(/WRITE,/REC)
  IF OFILE EQ '' THEN RETURN
  SIONEU_START_END_NEPOCH,FILES,OFILE;,CFILE
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_STAT_MODEL_TO_GMT, EV
  STAT_MODEL_FOR_PLOT
  MSGBOX, 'Done!', TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_GIF, EV
  PATH=DIALOG_PICKFILE(/DIRECTORY,TITLE='JPEG (*.jpg) files:')
  IF PATH EQ '' THEN RETURN
  CD,PATH
  OFILE=DP(/WRITE,FILTER=[['*.gif'],['GIF animation']],/AF)
  IF OFILE EQ '' THEN RETURN
  CD,GETPATHNAME(OFILE)
  
  ;CALL THE PROGRAM TO ...
  GIF_FROM_JPEG, $
    PATH, $
    OFILE, $
    DELAY=DELAY ;Use the default value.
    
  MSGBOX, 'Done!', TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_STABLE_IN_ORG, EV
  PATH=DIALOG_PICKFILE(/DIRECTORY,TITLE='GLORG *.org files:')
  IF PATH EQ '' THEN RETURN
  CD,PATH
  OFILE=DP(/WRITE)
  IF OFILE EQ '' THEN RETURN
  CD,GETPATHNAME(OFILE)
  
  ;GET A PRIORI COORDINATE FILE
  CFILE=DIALOG_PICKFILE(TITLE='A priori coordinate file. Cancel for using the default:'+GET_CFILE(),FILTER=[['*.net'],['QOCA Network File (*.net)']])
  IF CFILE EQ '' THEN CFILE=GET_CFILE() ELSE  CD, GETPATHNAME(OFILE)
  
  ;CALL THE PROGRAM TO ...
  ORG_GET_STAB_SITES,PATH,OFILE
  
  MSGBOX, 'Done!', TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_DOWNLOAD_SIO, EV
  SPAWN,'start http://garner.ucsd.edu/index.html'
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_DOWNLOAD_PBO, EV
  SPAWN,'start ftp://data-out.unavco.org/pub/products/position/'
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_DOWNLOAD_JPL, EV
  SPAWN,'start ftp://sideshow.jpl.nasa.gov/pub/mbh/'
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_MKDIR, EV
  ;GET OUT PATH
  IF IGPS_CHECK_PATH(EV,OPATH=OPATH) THEN RETURN
  
  PATH=DIALOG_PICKFILE(/DIRECTORY,PATH=OPATH)
  IF PATH EQ '' THEN RETURN
  FILE_MKDIR,PATH
  MSGBOX, ['Done!','Directory "'+PATH+'" has been created.'], TITLE='iGPS', /INFO, $
    DIALOG_PARENT=EV.TOP
    
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DATA_CONSOLE, EV
  CASE !VERSION.OS_FAMILY OF
    'unix': BEGIN
      ;GET INPUT PATH
      IF IGPS_CHECK_PATH(EV,PATH=PATH) THEN RETURN
      SPAWN,'cd "'+PATH+'" && xterm&'
    END
    'Windows': BEGIN
      SPAWN,'cmd.exe',/NOWAIT
    END
    ELSE: BEGIN
      MSGBOX, 'Not supported on this platform!', TITLE='iGPS', /ERROR, DIALOG_PARENT=EV.TOP
    END
  ENDCASE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_DEOFFSET, EV
  CORRECT_OFFSET_UI, GROUP_LEADER=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_QUIT, EV
  WIDGET_CONTROL,EV.TOP,/DESTROY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_MAP_QUICK_SITE_MAP, EV
  QUICKSITEMAP,GROUP_LEADER=EV.TOP
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_MAP_PREP_SITES_FILE, EV
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE, INDEX=INDEX) NE 0 THEN RETURN
  
  ;GET OUTPUT FILE
  OFILE=DIALOG_PICKFILE(/WRITE,/OVERWRITE_PROMPT)
  IF OFILE EQ '' THEN RETURN
  CD, GETPATHNAME(OFILE)
  
  
  ;GET A PRIORI COORDINATE FILE
  CFILE=DIALOG_PICKFILE(TITLE='A priori coordinate file. Cancel for using the default:'+GET_CFILE(),FILTER=[['*.net'],['QOCA Network File (*.net)']])
  IF CFILE EQ '' THEN CFILE=GET_CFILE() ELSE  CD, GETPATHNAME(CFILE)
  
  CREATE_SITEMAP_INFO, SITES_USE, OFILE, CFILE=CFILE
  
  MSGBOX, ['Done!','','Results output to '+OFILE], TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_MAP_POLYLINE_SHP2GMTPSXY,EV
  POLYLINE_SHP2PSXY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_MAP_POLYLINE_SHP2KML,EV
  POLYLINE_SHP2KML
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_MAP_DOWN_SRTM,EV
  G_DOWNLOAD_SRTM,PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_HELP_ONLINE,EV
  ONLINE_HELP,BOOK=!IGPS_ROOT+PATH_SEP()+'doc'+PATH_SEP()+'iGPS_tutorial.pdf'
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_MNU_HELP_ABOUT, EV
  MSG=['[-] iGPS-IDL Toolbox for GPS [+]', $
    '',$
    'For the analysis of continuous GPS position time series.', $
    '',$
    'If you want to participate in the development of iGPS,', $
    'or have any suggestions/questions, please contact me at:', $
    '', $
    'Yunfeng, Tian (tianyf@gmail.com)', $
    '',$
    '(c) Copyright 2005-2011 Yunfeng Tian, Beijing, China ']
  MSGBOX,MSG,TITLE='iGPS',/INFORMATION, DIALOG_PARENT=EV.TOP
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_COMBINE_ADD_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ;STOP
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) THEN RETURN
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_COMBINE_ADD_PATH')
  WIDGET_CONTROL,ID,GET_VALUE=APATH
  APATH=STRTRIM(APATH[0],2)
  IF APATH EQ '' THEN BEGIN
    MSGBOX,'No the 2nd series path!',/ERROR,TITLE='iGPS',DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  FILES=*ST.FILES
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  
  NFO=0
  NFS=0
  FOR SI=0,N_ELEMENTS(SITES_USE)-1 DO BEGIN
    SITE=SITES_USE[SI]
    FILE=FILES[INDEX[SI]]
    ;CHECK OVERWRITTING
    OFILE=OPATH+PATH_SEP()+GETFILENAME(FILE)
    IF OVERWRITE EQ 0 && FILE_TEST(OFILE,/REGULAR) THEN BEGIN
      PRINT,'[iGPS:ADD]Warning: already exists ['+OFILE+'].',FORMAT='(A)'
      NFS=NFS+1
      CONTINUE
    ENDIF
    PRINT,'[iGPS:ADD]Processing '+SITE+'.',FORMAT='(A)'
    
    AFILE=FILE_SEARCH(APATH+PATH_SEP()+SITE+'*'+ST.DT_QUERYSTR,COUNT=NAF,/FOLD_CASE)
    IF NAF LE 0 THEN BEGIN
      PRINT,'[iGPS:ADD]Warning: no 2nd series for '+SITE+'.',FORMAT='(A)'
      NFS=NFS+1
      CONTINUE
    ENDIF
    ;LOAD THE SECOND SERIES
    ;STOP
    NFO=NFO+1
    IF NAF GE 2 THEN BEGIN
      AFILE=LAST(AFILE)
      PRINT,'[iGPS:ADD]Duplicate 2nd files found. Using the last one '+AFILE+'.', $
        FORMAT='(A)'
    ENDIF
    ON_IGPS_BTN_LOAD, EV, UPDATE=0,FILE=AFILE
    WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
    ADATA=*ST.DATA
    
    ON_IGPS_BTN_LOAD, EV, SIT_ID=INDEX[SI],UPDATE=UPDATE
    WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
    DATA=*ST.DATA
    
    YEARDOYRS0=STRING(DATA[1,*],FORMAT='(I04)')+STRING(DATA[2,*],FORMAT='(I03)')
    YEARDOYRS1=STRING(ADATA[1,*],FORMAT='(I04)')+STRING(ADATA[2,*],FORMAT='(I03)')
    TMP=SET_INTERSECT(YEARDOYRS0,YEARDOYRS1,IND0=IND,IND1=INDA)
    OTIMES=DATA[0,IND]
    ;OTIMES=SET_INTERSECT(REFORM(DATA[ST.IND_TIME,*]),REFORM(ADATA[ST.IND_TIME,*]),IND0=IND,IND1=INDA)
    
    ODATA=DATA[*,IND]
    POS=WHERE(ST.IND_NEU NE -1)
    IF POS[0] EQ -1 THEN CONTINUE
    
    ;STOP
    FOR NEUI=0,N_ELEMENTS(POS)-1 DO BEGIN
      ODATA[(ST.IND_NEU)[NEUI],*]=ODATA[(ST.IND_NEU)[NEUI],*]+ADATA[(ST.IND_NEU)[NEUI],INDA]
    ENDFOR
    
    
    WRITE_SIO, OFILE, DATA=ODATA, HEADERS=*ST.HEADER, $
      SRC=[FILE,AFILE], $
      PROG='iGPS:ADD+WRITE_SIO', $
      USER=USER
  ENDFOR
  
  MSGBOX, ['Done!',$
    '',$
    STRTRIM(NFO,2)+' files have been processed.', $
    STRTRIM(NFS,2)+' output files already exist and not overwritten!', $
    ''], TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
    
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_COMBINE_ADD_TIP, EV
  STR=['Purpose:', $
    '  Combine two series, e.g. "atml + ntol".', $
    '',$
    'Steps:',$
    '  1. Select first series path (Input Path:);', $
  '  2. Choose which sites are to be processed;', $
  '  3. Select second series path (+2nd:);', $
  '  4. Select the output path (Output Path:);', $
  '  5. Click the " O K " button.', $
    '', $
    'Note:', $
    '  * Only common epochs of two series are saved.', $
    '']
  MSGBOX,STR,TITLE='iGPS',/INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_COMBINE_MINUS_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ;STOP
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) THEN RETURN
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_COMBINE_MINUS_PATH')
  WIDGET_CONTROL,ID,GET_VALUE=APATH
  APATH=STRTRIM(APATH[0],2)
  IF APATH EQ '' THEN BEGIN
    MSGBOX,'No the 2nd series path!',/ERROR,TITLE='iGPS',DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  FILES=*ST.FILES
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  
  NFO=0
  NFS=0
  FOR SI=0,N_ELEMENTS(SITES_USE)-1 DO BEGIN
    SITE=SITES_USE[SI]
    FILE=FILES[INDEX[SI]]
    ;CHECK OVERWRITTING
    OFILE=OPATH+PATH_SEP()+GETFILENAME(FILE)
    IF OVERWRITE EQ 0 && FILE_TEST(OFILE,/REGULAR) THEN BEGIN
      PRINT,'[iGPS:MINUS]Warning: already exists ['+OFILE+'].',FORMAT='(A)'
      NFS=NFS+1
      CONTINUE
    ENDIF
    PRINT,'[iGPS:MINUS]Processing '+SITE+'.',FORMAT='(A)'
    
    AFILE=FILE_SEARCH(APATH+PATH_SEP()+SITE+'*'+ST.DT_QUERYSTR,COUNT=NAF,/FOLD_CASE)
    IF NAF LE 0 THEN BEGIN
      PRINT,'[iGPS:MINUS]Warning: no 2nd series for '+SITE+'.',FORMAT='(A)'
      NFS=NFS+1
      CONTINUE
    ENDIF
    ;LOAD THE SECOND SERIES
    ;STOP
    NFO=NFO+1
    
    IF NAF GE 2 THEN BEGIN
      AFILE=LAST(AFILE)
      PRINT,'[iGPS:MINUS]Duplicate 2nd files found. Using the last one '+AFILE+'.', $
        FORMAT='(A)'
    ENDIF
    ON_IGPS_BTN_LOAD, EV, UPDATE=0,FILE=AFILE
    WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
    ADATA=*ST.DATA
    
    ON_IGPS_BTN_LOAD, EV, SIT_ID=INDEX[SI],UPDATE=UPDATE
    WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
    DATA=*ST.DATA
    
    YEARDOYRS0=STRING(DATA[1,*],FORMAT='(I04)')+STRING(DATA[2,*],FORMAT='(I03)')
    YEARDOYRS1=STRING(ADATA[1,*],FORMAT='(I04)')+STRING(ADATA[2,*],FORMAT='(I03)')
    TMP=SET_INTERSECT(YEARDOYRS0,YEARDOYRS1,IND0=IND,IND1=INDA)
    OTIMES=DATA[0,IND]
    ;OTIMES=SET_INTERSECT(REFORM(DATA[ST.IND_TIME,*]),REFORM(ADATA[ST.IND_TIME,*]),IND0=IND,IND1=INDA)
    
    ODATA=DATA[*,IND]
    POS=WHERE(ST.IND_NEU NE -1)
    IF POS[0] EQ -1 THEN CONTINUE
    
    ;STOP
    FOR NEUI=0,N_ELEMENTS(POS)-1 DO BEGIN
      ODATA[(ST.IND_NEU)[NEUI],*]=ODATA[(ST.IND_NEU)[NEUI],*]-ADATA[(ST.IND_NEU)[NEUI],INDA]
    ENDFOR
    
    
    WRITE_SIO, OFILE, DATA=ODATA, HEADERS=*ST.HEADER, $
      SRC=[FILE,AFILE], $
      PROG='iGPS:MINUS+WRITE_SIO', $
      USER=USER
  ENDFOR
  
  MSGBOX, ['Done!',$
    '',$
    STRTRIM(NFO,2)+' files have been processed.', $
    STRTRIM(NFS,2)+' output files already exist and not overwritten!', $
    ''], TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_COMBINE_MINUS_TIP, EV
  STR=['Purpose:', $
    '  Minus two series, e.g. "atml + ntol".', $
    '',$
    'Steps:',$
    '  1. Select first series path (Input Path:);', $
  '  2. Choose which sites are to be processed;', $
  '  3. Select second series path (-2nd:);', $
  '  4. Select the output path (Output Path:);', $
  '  5. Click the " O K " button.', $
    '', $
    'Note:', $
    '  * Only common epochs of two series are saved.', $
    '']
  MSGBOX,STR,TITLE='iGPS',/INFO, DIALOG_PARENT=EV.TOP
  
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_CUT_BTN_DEL, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  IF NOT PTR_VALID(ST.CUTS) THEN BEGIN
    MSGBOX,'No cut definition available!',TITLE='iGPS',/INFO,DIALOG_PARENT=EV.TOP
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    RETURN
  ENDIF
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_CUT_LST_SPANS')
  SEL=WIDGET_INFO(ID,/LIST_SELECT)
  IF SEL[0] EQ -1 THEN BEGIN
    MSGBOX,'No cut definition selected!',TITLE='iGPS',/INFO,DIALOG_PARENT=EV.TOP
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    RETURN
  ENDIF
  IND_REM=INV_IND(SEL,TOP=N_ELEMENTS((*ST.CUTS)[0,*]))
  
  ;IF PTR_VALID(ST.CUTS) THEN PTR_FREE,ST.CUTS
  IF IND_REM[0] NE -1 THEN BEGIN
    CUTS=(*ST.CUTS)[*,IND_REM]
    ST.CUTS=PTR_NEW(CUTS)
    CUTSTR=STRING(CUTS,FORMAT='(F10.5,"~",F10.5)')
    WIDGET_CONTROL, ID, SET_VALUE=CUTSTR
  ENDIF ELSE BEGIN
    WIDGET_CONTROL, ID, SET_VALUE=''
    ;WIDGET_CONTROL, ID, SET_UVALUE=''
    ST.CUTS=PTR_NEW()
  ENDELSE
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  IGPS_UPDATE_DRAW_NEU,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_CUT_BTN_CLC, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  ;  IF NOT PTR_VALID(ST.CUTS) THEN BEGIN
  ;    MSGBOX,'No cut definition available!',TITLE='iGPS',/INFO,DIALOG_PARENT=EV.TOP
  ;    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  ;    RETURN
  ;  ENDIF
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_CUT_LST_SPANS')
  WIDGET_CONTROL, ID, SET_VALUE=''
  WIDGET_CONTROL, ID, SET_UVALUE=''
  ST.CUTS=PTR_NEW()
  ST.CUT_START = 0
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  IGPS_UPDATE_DRAW_NEU,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_CUT_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  IF NOT PTR_VALID(ST.CUTS) THEN BEGIN
    MSGBOX,'No cut definition available!',TITLE='iGPS',/ERROR,DIALOG_PARENT=EV.TOP
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    RETURN
  ENDIF
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN BEGIN
    MSGBOX,'No site selected!',TITLE='iGPS',/ERROR,DIALOG_PARENT=EV.TOP
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    RETURN
  ENDIF
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,OPATH=OPATH) THEN BEGIN
    MSGBOX,'No output path!',TITLE='iGPS',/ERROR,DIALOG_PARENT=EV.TOP
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    RETURN
  ENDIF
  
  CUTS=*ST.CUTS
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  
  FOR SI=0,N_ELEMENTS(SITES_USE)-1 DO BEGIN
    SITE=SITES_USE[SI]
    PRINT,' [CUT] Processing site: ',SITE
    ON_IGPS_BTN_LOAD, EV, SIT_ID=INDEX[SI],UPDATE=UPDATE
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    ;POS=WHERE(SITES EQ SITE)
    ;FILE=(*ST.FILES)[POS]
    FILE=(*ST.FILES)[INDEX[SI]]
    OFILE=OPATH+PATH_SEP()+GETFILENAME(FILE)
    IF OVERWRITE NE 1 && FILE_TEST(OFILE,/REGULAR) THEN BEGIN
      PRINT,' Already exists! Skipping...', OFILE
      CONTINUE
    ENDIF
    ;HELP,CUTS
    T=(*ST.DATA)[ST.IND_TIME,*]
    IND_DEL=-1
    ;STOP
    FOR CI=0,N_ELEMENTS(CUTS[0,*])-1 DO BEGIN
      POS=WHERE(T+1d-4 GE CUTS[0,CI] AND T-1d-4 LE CUTS[1,CI])
      IF POS[0] EQ -1 THEN CONTINUE
      IF IND_DEL[0] EQ -1 THEN BEGIN
        IND_DEL=POS
      ENDIF ELSE BEGIN
        IND_DEL=[IND_DEL,POS]
      ENDELSE
    ;HELP,IND_DEL
    ENDFOR
    ;STOP
    ODATA=*ST.DATA
    IF IND_DEL[0] NE -1 THEN BEGIN
      IND_DEL=IND_DEL[SORT(IND_DEL)]
      IND_DEL=IND_DEL[UNIQ(IND_DEL)]
      IND_REM=INV_IND(IND_DEL,TOP=N_ELEMENTS(T))
      IF IND_REM[0] EQ -1 THEN BEGIN
        PRINT,'Skip ',FILE
        CONTINUE
      ENDIF
      ODATA=(*ST.DATA)[*,IND_REM]
    ENDIF
    ;HELP,*ST.DATA,ODATA,IND_DEL,IND_REM
    
    WRITE_SIO,OFILE,DATA=ODATA,SRC=FILE,$
      PROG='iGPS:CUT+WRITE_SIO',USER=USER,HEADER=*ST.HEADER,$
      FMT=ST.FMT
  ;PRINT,FILE,OFILE
  ENDFOR
  MSGBOX, 'Done!', TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_CUT_BTN_TIP, EV
  STR=['Purpose:', $
    '  "CUT" is used to delete abnormal spans in time series for selected', $
    '   sites.','',$
    'Steps:',$
    '  1. Define the cut lines on time series plots;', $
  '  2. Shoose sites are to be processed;', $
  '  3. Set the output path;', $
  '  4. Hit " O K " button.', $
    '', $
    'Note:',$
    '  * Click the left mouse button to define the starting time; and click',$
  '    again to define the ending time.', $
    '  * Multiple spans can be set.', $
    '  * Use "Clear" to delete all spans.', $
    '  * Use "Del" to delete selected (multiple) spans.', $
    '']
  MSGBOX,STR,TITLE='iGPS',/INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_DEMEAN_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) THEN RETURN
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  FILES=(*ST.FILES)
  TSTYPE_SRC=ST.TS_TYPE
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_FORMAT_TSTYPE')
  WIDGET_CONTROL, ID, GET_VALUE=TSTYPE_TARGET
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  CKB_UPDPLOT=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  CKB_OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  ;STOP
  
  IND_NEU=ST.IND_NEU
  POS=WHERE(IND_NEU GT -1)
  IF POS[0] EQ -1 THEN BEGIN
    MSGBOX,['It is required that at least one site to be loaded before further processing. Thanks!', $
      '', $
      'a. Load one site', $
      'b. Select sites to be processed', $
      'c. Click OK button to go ...', $
      ''], $
      TITLE='iGPS',DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  IND_NEU=IND_NEU[WHERE(IND_NEU GT -1)]
  POS=WHERE(ST.IND_NEUERR GT -1)
  IF POS[0] NE -1 THEN BEGIN
    IND_ERR=ST.IND_NEUERR
    IND_ERR=IND_ERR[WHERE(IND_ERR NE -1)]
  ENDIF
  NFS=0
  NFO=0
  FOR SI=0,N_ELEMENTS(SITES_USE)-1 DO BEGIN
    FILE=FILES[INDEX[SI]]
    OFILE=OPATH+PATH_SEP()+GETFILENAME(FILE)
    IF FILE_TEST(OFILE,/REGULAR) && CKB_OVERWRITE EQ 0 THEN BEGIN
      PRINT,'Output file already exist: ',OFILE
      NFS=NFS+1
      CONTINUE
    ENDIF
    NFO=NFO+1
    SITE=SITES_USE[SI]
    IGPS_UPDATE_LBL_STATUS_BUSY, EV, DIRECTION=(SI MOD 4), PERCENT=FIX((SI+1D0)/N_ELEMENTS(SITES_USE)*1D2)
    ;ON_IGPS_BTN_LOAD, EV, SITE=SITE,UPDATE=CKB_UPDPLOT
    ON_IGPS_BTN_LOAD,EV,SIT_ID=INDEX[SI],UPDATE=CKB_UPDPLOT
    ;IGPS_CONVERT_TIME_AXES, EV
    WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
    DATA=*ST.DATA
    ;HELP,DATA
    ODATA=DATA
    ;stop
    HEADERS=*ST.HEADER
    ;ON MAR-26-2012 TIANYF
    ;  IF ST.HEADER IS BLANK (I.E. NO HEADER LINES IN INPUT FILE), THEN THERE WILL BE
    ;  AN EXTRA BLANK LINE IN THE OUTPUT FILE HEADER.
    ;
    ;  FIXED BELOW WITH CHECKING INPUT HEADER.
    NEUSTR=['N/X','E/Y','U/Z']
    MEANS=DBLARR(N_ELEMENTS(IND_NEU))
    FOR I=0,N_ELEMENTS(IND_NEU)-1 DO BEGIN
      MEANS[I]=MEAN(DATA[IND_NEU[I],*])
      ODATA[IND_NEU[I],*]=DATA[IND_NEU[I],*]-MEANS[I]
      HEADERS=[HEADERS,'#REF '+NEUSTR[I]+': '+STRING(MEANS[I],FORMAT='(F20.8)')]
    ;stop
    ENDFOR
    
    IF HEADERS[0] EQ '' THEN BEGIN
      HEADERS=HEADERS[1:*]
    ENDIF
    ;    ;PRINT,FILE
    ;STOP
    
    WRITE_SIO, OFILE, DATA=ODATA, HEADERS=HEADERS, $
      SRC=FILE, $
      PROG='iGPS:DEMEAN+WRITE_SIO', $
      USER=USER
  ENDFOR
  MSGBOX, ['Done!', $
    '',$
    STRTRIM(NFO,2)+' files have been processed.', $
    STRTRIM(NFS,2)+' output files already exist and not overwritten!', $
    ''], $
    TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_DEMEAN_BTN_TIP, EV
  STR=['Purpose:', $
    '  Demean the time series.', $
    '',$
    'Steps:',$
    '  1.Select first series path (Input Path:);', $
  '  2.Choose sites to be processed;', $
  '  3.Celect the output path (Output Path:);', $
  '  4.Click the " O K " button.', $
    '',$
    '']
  MSGBOX,STR,TITLE='iGPS',/INFO, DIALOG_PARENT=EV.TOP
  
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_FILEMGR_CKB_CONFIRM, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST,/NO_COPY
  ST.IS_CONFIRM_DEL = ABS(EV.SELECT-1)
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_FILEMGR_BTN_DELETE, EV
  STATUS=IGPS_CHECK_LIST_SITE(EV,SELECT=SITES_SEL,ALL=SITES,INDEX=SEL)
  IF STATUS NE 0 THEN RETURN
  ;NO SELECTION, EXIT
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;print,st.is_conform_del
  IF ST.IS_CONFIRM_DEL EQ 1 THEN BEGIN
    YN=DIALOG_MESSAGE(['Do you really want to delete those files?',$
      '  This cannot be recovered!!!', $
      '', $
      '           Really?!',$
      ''], $
      /QUESTION, TITLE='iGPS', /DEFAULT_NO)
    ;HELP, YN
    IF YN EQ 'No' THEN RETURN
  ENDIF
  FOR I=0, N_ELEMENTS(SITES_SEL)-1 DO BEGIN
    FILE=(*ST.FILES)[SEL[I]]
    OPATH=GETPATHNAME(FILE)+PATH_SEP()+'.deleted'
    IF ~ FILE_TEST(OPATH,/DIRECTORY) THEN FILE_MKDIR,OPATH
    OPENW,FID,OPATH+PATH_SEP()+'deleted.list',/GET_LUN,/APPEND
    PRINT,'Deleting '+FILE
    PRINTF,FID,' '+GETFILENAME(FILE)
    ;FILE_DELETE, FILE
    FREE_LUN,FID
    FILE_MOVE,FILE,OPATH+PATH_SEP()+GETFILENAME(FILE),/OVERWRITE
  ENDFOR
  ;
  
  ;UPDATE LIST
  IDS=INV_IND(SEL, top=N_ELEMENTS(SITES))
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='LST_SITE')
  IF IDS[0] EQ -1 THEN BEGIN
    WIDGET_CONTROL, ID, SET_VALUE=''
    WIDGET_CONTROL, ID, SET_UVALUE=''
    ST.FILES=PTR_NEW()
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  ENDIF ELSE BEGIN
    ;HELP, SITES[IDS],SITES
    ;PRINT,SEL
    ;PRINT,IDS
    WIDGET_CONTROL, ID, SET_VALUE=SITES[IDS]
    WIDGET_CONTROL, ID, SET_UVALUE=SITES[IDS]
    CURSEL=(SEL[0]-1) < N_ELEMENTS(SITES)-1-N_ELEMENTS(SEL)
    CURSEL=(SEL[0]-1) > 0
    WIDGET_CONTROL, ID, SET_LIST_SELECT=CURSEL
    
    ST.FILES=PTR_NEW((*ST.FILES)[IDS])
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
    ON_IGPS_BTN_LOAD, EV, SIT_ID=CURSEL
  ENDELSE
  
END
;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_FORMAT_BTN_OK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF ST.TS_TYPE EQ 'SIO NEU' THEN BEGIN
    MSGBOX,'The source time series type is also SIO NEU. No need to convert. Exit.' ,$
      DIALOG_PARENT=EV.TOP,/WARN,TITLE='iGPS'
    RETURN
  ENDIF
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF ST.TS_TYPE EQ 'TRACK' THEN BEGIN
    MSGBOX,['The TRACK output is highrate time series; and timing problems will arise ',$
    'if converted to conventional daily SIO NEU format. ',$
      'Currently, iGPS does not allow highrate GPS time series analysis. Sorry.'] ,$
      DIALOG_PARENT=EV.TOP,/WARN,TITLE='iGPS'
    RETURN
  ENDIF
  
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) THEN RETURN
  ;ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_FORMAT_TSTYPE')
  ;WIDGET_CONTROL, ID, GET_VALUE=TSTYPE_TARGET
  TSTYPE_TARGET='SIO NEU'
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  CKB_OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  
  ;STOP
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  FILES=(*ST.FILES)
  TSTYPE_SRC=ST.TS_TYPE
  IND_NEU=ST.IND_NEU
  IND_NEU=IND_NEU[WHERE(IND_NEU GT -1)]
  POS=WHERE(ST.IND_NEUERR GT -1)
  IF POS[0] NE -1 THEN BEGIN
    IND_ERR=ST.IND_NEUERR
    IND_ERR=IND_ERR[WHERE(IND_ERR NE -1)]
  ENDIF
  
  NFO=0
  NFS=0
  FOR SI=0,N_ELEMENTS(SITES_USE)-1 DO BEGIN
    T0=SYSTIME(/SECONDS)
    SITE=SITES_USE[SI]
    FILE=FILES[INDEX[SI]]
    IF STRUPCASE(SITE) NE STRUPCASE(STRMID(GETFILENAME(FILE),0,4)) THEN BEGIN
      FILENAME=SITE+'_'+GETFILENAME(FILE)
    ENDIF ELSE BEGIN
      FILENAME=GETFILENAME(FILE)
    ENDELSE
    PRINT,'[iGPS:Format Converter]:', SITE,' ['+TSTYPE_SRC+'-> '+TSTYPE_TARGET+']',$
      FORMAT='(3A)'
    ;stop
    ON_IGPS_BTN_LOAD, EV, SIT_ID=INDEX[SI],UPDATE=UPDATE
    ;DELTA_T=SYSTIME(1)-T0*1d0
    ;PRINT,'Total time of load '+site+': '+STRING(DELTA_T,FORMAT='(f)')+' seconds or '+STRING(DELTA_T/60D0,FORMAT='(F)')+' minutes'
    
    ;IGPS_CONVERT_TIME_AXES, EV
    WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
    ;DELTA_T=SYSTIME(1)-T0*1d0
    ;PRINT,'Total time of convert time for '+site+': '+STRING(DELTA_T,FORMAT='(f)')+' seconds or '+STRING(DELTA_T/60D0,FORMAT='(F)')+' minutes'
    
    CASE TSTYPE_TARGET OF
      'SIO NEU': BEGIN
        ;FIRST, SET OUTPUT FILE NAME
        CASE TSTYPE_SRC OF
          'GLOBK': BEGIN
            OFILE=OPATH+PATH_SEP()+ST.SITE_CUR+'.neu'
          END
          'JPL LAT/LON/RAD': BEGIN
            OFILE=OPATH+PATH_SEP()+ST.SITE_CUR+'.neu'
          END
          ELSE: BEGIN
            OFILE=OPATH+PATH_SEP()+FILENAME+'.neu'
          END
        ENDCASE
        IF CKB_OVERWRITE NE 1 && FILE_TEST(OFILE,/REGULAR) THEN BEGIN
          PRINT,'[iGPS:Format Converter]:Output file exist! Skipping...'
          NFS=NFS+1
          GOTO, NEXTSITE
        ENDIF
        NFO=NFO+1
        ;WHEN ONLY DYR, NO YEAR/DOY.
        ;  A CASE IS "CMONOC TS".
        CASE TSTYPE_SRC OF
          'CMONOC TS':  BEGIN
            FMT='(1x,F10.5,1X,I4,1X,I3,3F20.8,3F10.6)'
            ODATA=DBLARR(9,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[[0,3,4,5,6,7,8],*]=*ST.DATA
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ;ODATA[1,I]=FIX(ODATA[0,I])
            ;              DOY,STRTRIM(ODATA[0,I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          ;stop
          END
          'ERCE':  BEGIN
            FMT='(1x,F10.5,1X,I4,1X,I3,3F20.8,3F10.6)'
            ODATA=DBLARR(9,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[[0,3,4,5,6,7,8],*]=*ST.DATA
            ODATA[3:8,*]=ODATA[3:8,*]*ST.SF*1D-3
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ;ODATA[1,I]=FIX(ODATA[0,I])
            ;              DOY,STRTRIM(ODATA[0,I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          ;stop
          END
          'JPL LAT/LON/RAD': BEGIN
            ;STOP
            FMT='((1x,F10.5,1X,I4,1X,I3,3F20.8,3F10.6))'
            ODATA=DBLARR(9,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[[0,3,4,5,6,7,8],*]=(*ST.DATA)[[0,[3,4,5,6,7,8]+1 ],*]
            ;stop
            ODATA[3:8,*]=ODATA[3:8,*]*ST.SF*1D-3
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ODATA[1,I]=FIX(ODATA[0,I])
            ;              DOY,STRTRIM(ODATA[0,I],2)+'Y',DAY_OF_YEAR=D
            ;              ;print,odata[0,i],odata[1,i],d
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          ;stop
          END
          'QOCA ATML LOAD': BEGIN
            ;STOP
            FMT='((1x,F10.5,1X,I4,1X,I3,3F20.8))'
            ODATA=DBLARR(6,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[3:5,*]=(*ST.DATA)[ST.IND_NEU,*]
            ODATA[3:5,*]=ODATA[3:5,*]/ST.SF*1e-3
            ODATA[0,*]=*ST.TIME_AXES_VAL
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ODATA[1,I]=FIX((*ST.TIME_AXES_VAL)[I])
            ;              DOY,STRTRIM((*ST.TIME_AXES_VAL)[I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          END
          'QOCA OTL LOAD': BEGIN
            ;STOP
            FMT='((1x,F10.5,1X,I4,1X,I3,3F20.8))'
            ODATA=DBLARR(6,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[3:5,*]=(*ST.DATA)[ST.IND_NEU,*]
            ODATA[3:5,*]=ODATA[3:5,*]/ST.SF*1e-3
            ODATA[0,*]=*ST.TIME_AXES_VAL
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ODATA[1,I]=FIX((*ST.TIME_AXES_VAL)[I])
            ;              DOY,STRTRIM((*ST.TIME_AXES_VAL)[I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          END
          'QOCA SNOW LOAD': BEGIN
            ;STOP
            FMT='((1x,F10.5,1X,I4,1X,I3,3F20.8))'
            ODATA=DBLARR(6,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[3:5,*]=(*ST.DATA)[ST.IND_NEU,*]
            ODATA[3:5,*]=ODATA[3:5,*]/ST.SF*1e-3
            ODATA[0,*]=*ST.TIME_AXES_VAL
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ODATA[1,I]=FIX((*ST.TIME_AXES_VAL)[I])
            ;              DOY,STRTRIM((*ST.TIME_AXES_VAL)[I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          END
          'QOCA SOIL LOAD': BEGIN
            ;STOP
            FMT='((1x,F10.5,1X,I4,1X,I3,3F20.8))'
            ODATA=DBLARR(6,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[3:5,*]=(*ST.DATA)[ST.IND_NEU,*]
            ODATA[3:5,*]=ODATA[3:5,*]/ST.SF*1e-3
            ODATA[0,*]=*ST.TIME_AXES_VAL
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ODATA[1,I]=FIX((*ST.TIME_AXES_VAL)[I])
            ;              DOY,STRTRIM((*ST.TIME_AXES_VAL)[I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          END
          'ITRF05 RESIDUAL': BEGIN
            ;STOP
            FMT='(1x,F10.5,1X,I4,1X,I3,3F20.8,1x,3F20.6)'
            ODATA=DBLARR(9,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[3:8,*]=(*ST.DATA)[1:6,*]
            ODATA[3:8,*]=ODATA[3:8,*]/ST.SF*1e-3
            ODATA[0,*]=*ST.TIME_AXES_VAL
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ODATA[1,I]=FIX((*ST.TIME_AXES_VAL)[I])
            ;              DOY,STRTRIM((*ST.TIME_AXES_VAL)[I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          END
          'EABM NEU': BEGIN
            ;STOP
            FMT='(1x,F10.5,1X,I4,1X,I3,3F20.8,1x,3F20.6)'
            ODATA=*ST.DATA
          END
          'EST_NOISE RESID': BEGIN
            FMT=ST.FMT
            ODATA=*ST.DATA
            ODATA[ST.IND_NEU,*]=ODATA[ST.IND_NEU,*]*ST.SF*1E-3
          ;STOP
          END
          'SCEC Transient CSV': BEGIN
            FMT=ST.FMT
            ODATA=*ST.DATA
            ODATA[ST.IND_NEU,*]=ODATA[ST.IND_NEU,*]*ST.SF*1E-0
          ;STOP
          END
          'Caltech Nepal': BEGIN
            ;STOP
            FMT='(1x,F10.5,1X,I4,1X,I3,3F20.8,1x,3F20.6)'
            ODATA=DBLARR(9,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[3:8,*]=(*ST.DATA)[1:6,*]
            ODATA[3:8,*]=ODATA[3:8,*]/ST.SF*1e-3
            ODATA[0,*]=*ST.TIME_AXES_VAL
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ODATA[1,I]=FIX((*ST.TIME_AXES_VAL)[I])
            ;              DOY,STRTRIM((*ST.TIME_AXES_VAL)[I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          END
          'GSI': BEGIN
            ;STOP
            FMT='(1x,F10.5,1X,I4,1X,I3,3F20.15)'
            ODATA=*ST.DATA
          END
          'GEONET': BEGIN
            ;STOP
            FMT='(1x,F10.5,1X,I4,1X,I3,3F20.15)'
            ODATA=*ST.DATA
            ODATA[3:5,*]=ODATA[3:5,*]*ST.SF*1D-3
          END
          'QOCA MAP': BEGIN
            ;STOP
            FMT='((1x,F10.5,1X,I4,1X,I3,3F20.8,1x,3F20.6))'
            ODATA=DBLARR(9,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[3:8,*]=(*ST.DATA)[1:6,*]
            ODATA[3:8,*]=ODATA[3:8,*]/ST.SF*1e-3
            ODATA[0,*]=*ST.TIME_AXES_VAL
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              ODATA[1,I]=FIX((*ST.TIME_AXES_VAL)[I])
            ;              DOY,STRTRIM((*ST.TIME_AXES_VAL)[I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          END
          'SIO NEU [ATS]': BEGIN
            ;STOP
            FMT=ST.FMT
            ODATA=*ST.DATA
            ODATA[3:8,*]=ODATA[3:8,*]*ST.SF*1D-3
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          END
          'GPS LAB': BEGIN
            ;STOP
            FMT='((1x,F10.5,1x,I4,1x,I3,3(1x,F12.7) ))'
            ODATA=(*ST.DATA)[[0,0,0,4,5,6],*]
            ODATA[3:5,*]=ODATA[3:5,*]*ST.SF*1D-3
            DECYRS=REFORM(ODATA[0,*])
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
            ODATA[1,*]=FIX(ODATA[0,*])
          END
          ELSE: BEGIN
            ;FMT='(F10.5,3F10.6,3F10.6)'
            FMT=ST.FMT
            ;help,fmt
            ODATA=*ST.DATA
            
            ;FMT='(F10.5,1X,I4,1X,I3,3F20.8,1x,3F20.6)'
            ODATA=DBLARR(9,N_ELEMENTS((*ST.DATA)[0,*]))
            ODATA[3:5,*]=(*ST.DATA)[ST.IND_NEU,*]
            ODATA[6:8,*]=(*ST.DATA)[ST.IND_NEUERR,*]
            ODATA[3:8,*]=ODATA[3:8,*]/ST.SF*1E3
            ODATA[0,*]=*ST.TIME_AXES_VAL
            ODATA[1,*]=FIX(*ST.TIME_AXES_VAL)
            ;            FOR I=0,N_ELEMENTS((*ST.DATA)[0,*])-1 DO BEGIN
            ;              DOY,STRTRIM((*ST.TIME_AXES_VAL)[I],2)+'Y',DAY_OF_YEAR=D
            ;              ODATA[2,I]=D
            ;            ENDFOR
            DECYRS=*ST.TIME_AXES_VAL
            DECYRS_TO_JDS, DECYRS, JDS
            JD_TO_YMDHMSS,JDS, DATES, SECTAGS
            YMD_TO_DOYS,DATES, DAY_OF_YEARS
            ODATA[2,*]=DAY_OF_YEARS
          ;            STOP
            
          END
        ENDCASE
        ;        DELTA_T=SYSTIME(1)-T0*1d0
        ;        PRINT,'Total time of converting '+site+': '+STRING(DELTA_T,FORMAT='(f)')+' seconds or '+STRING(DELTA_T/60D0,FORMAT='(F)')+' minutes'
        
        ;stop
        ;HELP, FMT
        IF PTR_VALID(ST.HEADER) THEN BEGIN
          WRITE_SIO,OFILE,DATA=ODATA,FMT=FMT, $
            SRC=FILE, $
            HEADER='#'+*ST.HEADER, $
            PROG='iGPS:FORMAT_CONVERTER+WRITE_SIO', $
            USER=USER
        ENDIF ELSE BEGIN
          WRITE_SIO,OFILE,DATA=ODATA,FMT=FMT, $
            SRC=FILE, $
            FORCE_FMT=0,$
            ;HEADER='#'+*ST.HEADER, $
            PROG='iGPS:FORMAT_CONVERTER+WRITE_SIO', $
            USER=USER
        ENDELSE
      END
      ELSE: BEGIN
        PRINT,'[iGPS:Format Converter]:Not supported',ST.TS_TYPE,'->',TSTYPE_TARGET
      END
    ENDCASE
    NEXTSITE:
  ;    DELTA_T=SYSTIME(1)-T0*1d0
  ;    PRINT,'Total time of processing '+site+': '+STRING(DELTA_T,FORMAT='(f)')+' seconds or '+STRING(DELTA_T/60D0,FORMAT='(F)')+' minutes'
    
  ENDFOR
  MSGBOX, ['Done!',$
    '',$
    STRTRIM(NFO,2)+' files have been processed.', $
    STRTRIM(NFS,2)+' output files already exist and not overwritten!', $
    ''], TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_FORMAT_BTN_TIP, EV
  STR=['Purpose:', $
    '  Convert time series to SIO NEU format.', $
    '', $
    'Steps:',$
    '  1.Select input path;',$
  '  2.Select the original data type;',$
  '  3.Select sites to process;',$
  '  4.Select output path and set options;',$
  '  5.Hit OK button to go.',$
    '',$
    'Note:',$
    '  iGPS cannot concate individual time series spans for a site if there are serveral jumps.',$
    '    e.g., for ARTU_1PS,ARTU_2PS, and ARTU_GPS, iGPS will treat them as separate series.',$
    '']
  MSGBOX, STR, TITLE='iGPS', GROUP_LEADER=EV.TOP,/INFO
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_HARMONICS_DPLST_FREQ, EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_HARMONICS_TXT_CUSTOMIZED')
  WIDGET_CONTROL,ID,EDITABLE=(EV.INDEX EQ 5)
  WIDGET_CONTROL,ID,SENSITIVE=(EV.INDEX EQ 5)
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_HARMONICS_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) THEN RETURN
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PREVIEW')
  PREVIEW=WIDGET_INFO(ID,/BUTTON_SET)
  
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_HARMONICS_DPLST_FREQ')
  SEL=WIDGET_INFO(ID,/DROPLIST_SELECT)
  CASE SEL OF
    0: BEGIN
      HARMONICS=[1D0,2D0]
    END
    1: BEGIN
      HARMONICS=(INDGEN(6)+1)*1.039D0
    END
    2: BEGIN
      HARMONICS=[1D0]
    END
    3: BEGIN
      HARMONICS=[2D0]
    END
    4: BEGIN
      HARMONICS=[1,2,(INDGEN(6)+1)*1.039D0]
    END
    5: BEGIN  ;CUSTOMIZE
      ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_HARMONICS_TXT_CUSTOMIZED')
      WIDGET_CONTROL,ID,GET_VALUE=TMP
      FREQSTR=STRTRIM(TMP[0])
      POS=STRPOS(FREQSTR,';')
      FREQSTR=STRMID(FREQSTR,0,POS-1)
      FREQSTR=STRSPLIT(FREQSTR,',',/EXTRACT)
      HARMONICS=DOUBLE(FREQSTR)
    END
    ELSE: BEGIN
      MSGBOX,'Wrong frquencies!',/ERROR,TITLE='iGPS',DIALOG_PARENT=EV.TOP
      RETURN
    END
  ENDCASE
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_HARMONICS_COORDS_FILE')
  WIDGET_CONTROL,ID,GET_VALUE=COORDS_FILE
  COORDS_FILE=STRTRIM(COORDS_FILE[0],2)
  
  ;CMDSTR='ANALYZE_HARMONICS, PATH=PATH, OPATH=OPATH, HARMONICS=HARMONICS, DT_QUERYSTR=ST.DT_QUERYSTR'
  CMDSTR='ANALYZE_HARMONICS, FILES=(*ST.FILES)[INDEX], OPATH=OPATH, HARMONICS=HARMONICS'
  CMDSTR=CMDSTR+',UPDATE=UPDATE,EV=EV,INDEX=INDEX'
  CMDSTR=CMDSTR+',PREVIEW=PREVIEW,OVERWRITE=OVERWRITE,NFO=NFO,NFS=NFS'
  IF COORDS_FILE NE '' && FILE_TEST(COORDS_FILE,/REGULAR) THEN BEGIN
    CMDSTR=CMDSTR+',COORDS_FILE=COORDS_FILE'
  ENDIF
  
  TMP=EXECUTE(CMDSTR)
  
  MSGBOX, ['Done!',$
    STRTRIM(NFO,2)+' files have been processed.', $
    STRTRIM(NFS,2)+' output files already exist and not overwritten!', $
    ''], TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_HARMONICS_BTN_TIP, EV
  STR=['Purpose:', $
    '  Calculate the amplitudes and phase lags for abnormal periodocities with a frequency around n*1.039 cpy (n=1,2,...)', $
    '  See Ray et al.[2008],  ... for more.',$
    '',$
    'Steps:', $
    '  1.Select an input data path (usually residuals without jumps and post-quake decays);',$
  '  2.Select sites to be processed;', $
  '  3.Customize the frequencies of seasonal signals;', $
  '  4.Choose an  apriori coordinate file (QOCA network file; *.net) [Optional];', $
  '    For creating inputs files of GMT.',$
    '  5.Select an output path and set outputing options;', $
  '  6.Hit OK button to go.', $
    '',$
    'References',$
    '  Ray, J., Z. Altamimi, X. Collilieux, and T. van Dam. Anomalous harmonics in the spectra of ', $
    '    GPS position estimates, GPS Solutions, 2008, 12, 55-64.. ', $
    '']
  MSGBOX, STR, TITLE='iGPS', GROUP_LEADER=EV.TOP, $
    /INFO
    
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_MODEL_CKB_ANNUAL, EV
  ;HELP,EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_RESID_OUT_ANNUAL')
  WIDGET_CONTROL,ID,SENSITIVE=EV.SELECT
;PRINT,(EV.SELECT OR IS_PSDECAY)
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_MODEL_CKB_SEMIANNUAL, EV
  ;HELP,EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_RESID_OUT_SEMIANNUAL')
  WIDGET_CONTROL,ID,SENSITIVE=EV.SELECT
;PRINT,(EV.SELECT OR IS_PSDECAY)
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_MODEL_CKB_OFFSET, EV
  ;HELP,EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_PSDECAY')
  IS_PSDECAY=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_TXT_DEF')
  WIDGET_CONTROL,ID,SENSITIVE=(EV.SELECT OR IS_PSDECAY)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_PLUS_SIO')
  WIDGET_CONTROL,ID,SENSITIVE=(EV.SELECT OR IS_PSDECAY)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_RESID_OUT_OFFSET')
  WIDGET_CONTROL,ID,SENSITIVE=EV.SELECT
;PRINT,(EV.SELECT OR IS_PSDECAY)
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_MODEL_CKB_PSDECAY, EV
  ;HELP,EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_OFFSET')
  IS_OFFSET=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_TXT_DEF')
  WIDGET_CONTROL,ID,SENSITIVE=(EV.SELECT OR IS_OFFSET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_PLUS_SIO')
  WIDGET_CONTROL,ID,SENSITIVE=(EV.SELECT OR IS_OFFSET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_DPL_PSDECAY')
  WIDGET_CONTROL,ID,SENSITIVE=(EV.SELECT)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_RESID_OUT_PSDECAY')
  WIDGET_CONTROL,ID,SENSITIVE=EV.SELECT
;PRINT,(EV.SELECT OR IS_OFFSET)
;STOP
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
FUNCTION ON_IGPS_PANEL_MODEL_CKB_OUT_OPTION,EV
  ;HELP,EV,/ST
  ;IF OUTPUT VELOCITY FILES, THEN THE A PRIORI COORDIANTES FILE IS REQUIRED.
  ;   IF NOT SPECIFIED, THE DEFAULT FILE (RETURNED BY GET_CFILE() FUNCTION) WILL BE USED.
  IF EV.VALUE EQ 0 THEN BEGIN
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_COORDS_FILE')
    WIDGET_CONTROL,ID,SENSITIVE=EV.SELECT
  ENDIF
  RETURN,EV
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_MODEL_CKB_OUT_HEADERS, EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_OLD_HEADER')
  WIDGET_CONTROL,ID,SENSITIVE=EV.SELECT
  CKB_OUT_OLD_HEADER=WIDGET_INFO(ID,/BUTTON_SET)
  IF EV.SELECT EQ 0 THEN BEGIN
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_MERGE_HEADERS')
    WIDGET_CONTROL,ID,SENSITIVE=0
  ENDIF
  IF EV.SELECT EQ 1 && CKB_OUT_OLD_HEADER EQ 1 THEN BEGIN
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_MERGE_HEADERS')
    WIDGET_CONTROL,ID,SENSITIVE=1
  ENDIF
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_MODEL_CKB_OUT_OLD_HEADER, EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_MERGE_HEADERS')
  WIDGET_CONTROL,ID,SENSITIVE=EV.SELECT
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_MODEL_BTN_OK, EV
  ;BUGS
  ;
  ;  AUG-21-2008 TIAN
  ;    POSSIBLE MEMORY LEAKAGE
  ;      27412 tianyf    18   0 1223m 1.0g 8460 R   98 27.0  16:11.67 idl_opserver
  ;      27412 tianyf    18   0 1227m 1.0g 8460 R   94 27.1  16:17.40 idl_opserver
  ;                                             ...
  ;      THE MEMORY USED BY IDL IS INCREASING!
  ;      CAUSE CANDIDATES:
  ;        +CREATE A NEW COPY OF UVALUE OF TOP_LEVEL_BASE (ST)?
  ;        +ERROR IN READ DATA?
  ;
  ;   AUG-25-2008 TIAN
  ;    WRONG OFFSETS & PSDECAY INPUT
  ;    #*   SRC: /export/home/tianyf/data/garner.ucsd.edu/pub/timeseries/cleanedNeuUnfTimeSeries20080516_3.9y.659/zambCleanUnf.neu
  ;    #*  PROG: iGPS:MODEL+WRITE_SIO
  ;    #*RUN BY: tianyf
  ;    #*RUN AT: linux x86_64
  ;    #*RUN ON: Thu Aug 21 04:05:09 2008 [UTC]
  ;    # N COMPONENT
  ;    #     slope 1:   0.0193 +-    0.0002 (2002.43150-2008.34020)
  ;    #    offset 1:  -0.0020 +-    0.0005 (2006.03970)
  ;    #    offset 2:   0.0002 +-    0.0004 (2006.84520)
  ;    # E COMPONENT
  ;    #     slope 1:   0.0198 +-    0.0003 (2002.43150-2008.34020)
  ;    #    offset 1:   0.0026 +-    0.0010 (2006.03970)
  ;    #    offset 2:  -0.0008 +-    0.0008 (2006.84520)
  ;    #    offset 3:   0.0000 +-    0.0000 (2006.03970)
  ;    #    offset 4:   0.0000 +-    0.0000 (2006.84520)
  ;    # U COMPONENT
  ;    #     slope 1:   0.0029 +-    0.0004 (2002.43150-2008.34020)
  ;    #    offset 1:  -0.0043 +-    0.0013 (2006.03970)
  ;    #    offset 2:  -0.0015 +-    0.0010 (2006.84520)
  ;    #    offset 3:   0.0000 +-    0.0000 (2006.03970)
  ;    #    offset 4:   0.0000 +-    0.0000 (2006.84520)
  ;    #    offset 5:   0.0000 +-    0.0000 (2006.03970)
  ;    #    offset 6:   0.0000 +-    0.0000 (2006.84520)
  ;    #<<

  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE, INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) THEN RETURN
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PREVIEW')
  PREVIEW=WIDGET_INFO(ID,/BUTTON_SET)
  
  MDL_PROG='TS_MODEL'
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_TREND')
  CKB_TREND = WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_ANNUAL')
  CKB_ANNUAL = WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_SEMIANNUAL')
  CKB_SEMIANNUAL = WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_OFFSET')
  CKB_OFFSET = WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_PSDECAY')
  CKB_PSDECAY = WIDGET_INFO(ID,/BUTTON_SET)
  ;PRINT,'TREND:',CKB_TREND
  ;PRINT,'ANNUAL:', CKB_ANNUAL
  ;PRINT,'SEMI-ANNUAL:', CKB_SEMIANNUAL
  ;STOP
  ;IF OFFSET OR PSDECAY CHECKBOX IS SELECTED, THEN...
  IF CKB_OFFSET || CKB_PSDECAY THEN BEGIN
    ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_PLUS_SIO')
    CKB_PLUS_SIO=WIDGET_INFO(ID, /BUTTON_SET)
    
    ;GET DEFINITION FILE
    ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_TXT_DEF')
    WIDGET_CONTROL,ID,GET_VALUE=DFILE
    DFILE=STRTRIM(DFILE[0],2)
    IF DFILE EQ '' THEN BEGIN
      MSGBOX, ['No offset or post-seismic decay definition file!', $
        'Those terms will be skipped.'], /WARN, DIALOG_PARENT=EV.TOP
    ENDIF
  ENDIF
  
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_HEADERS')
  CKB_OUT_HEADER=WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_OLD_HEADER')
  CKB_OUT_OLD_HEADER=WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_MERGE_HEADERS')
  CKB_OUT_MERGE_HEADER=WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_OUT_OPTION')
  WIDGET_CONTROL,ID,GET_VALUE=CKB_OUT_OPTION
  CKB_OUT_STAT= CKB_OUT_OPTION[0]
  CKB_OUT_FIT= CKB_OUT_OPTION[1]
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_RESID_OUT_TREND')
  CKB_RESID_OUT_TREND=WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_RESID_OUT_ANNUAL')
  CKB_RESID_OUT_ANNUAL=WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_RESID_OUT_SEMIANNUAL')
  CKB_RESID_OUT_SEMIANNUAL=WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_RESID_OUT_OFFSET')
  CKB_RESID_OUT_OFFSET=WIDGET_INFO(ID,/BUTTON_SET)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_CKB_RESID_OUT_PSDECAY')
  CKB_RESID_OUT_PSDECAY=WIDGET_INFO(ID,/BUTTON_SET)
  
  IF CKB_OUT_STAT EQ 1 THEN BEGIN
    FILE_STAT=OPATH+PATH_SEP()+'STAT.MODEL'
    OPENW,FID_STAT,FILE_STAT,/GET_LUN
    WRITE_SYS_INFO,FID_STAT,USER=USER,PROG='iGPS:MODEL',SRC=PATH
    IF CKB_OUT_STAT EQ 1 && CKB_ANNUAL && CKB_SEMIANNUAL THEN BEGIN
      PRINTF,FID_STAT,'SITE','NEU','AMP.ANN','PHA.ANN','AMP.SEMI','PHA.SEMI', $
        'RATE','SIGMA.RATE','RMSE','SIG.ANN.AMP', $
        FORMAT='("*",A4,1X,A3,8(1X,A12))'
    ENDIF ELSE BEGIN
      PRINTF,FID_STAT,'SITE','NEU','RATE','SIGMA.RATE', $
        FORMAT='("*",A4,1X,A3,6(1X,A12))'
    ENDELSE
    
    ;OUTPUT VELOCITY
    ; format(1x,a8,2f10.4,8f8.1,f9.4)
    ; stn,slon,slat,ve0,ve,vet,dve,vn0,vn,vnt,dvn,cen
    FILE_VEL=OPATH+PATH_SEP()+'VEL.MODEL'
    OPENW,FID_VEL,FILE_VEL,/GET_LUN
    PRINTF,FID_VEL,'*Station   Longitude   Latitude Ve_init Ve_incr    Ve     dVe   Vn_init Vn_incr    Vn     dVn   Cen',$
      FORMAT='(A)'
    FMT_VEL='(1x,a8,2f10.4,8f8.1,f9.4)'
    
    FILE_VEL_U=OPATH+PATH_SEP()+'VEL.MODEL_U'
    OPENW,FID_VEL_U,FILE_VEL_U,/GET_LUN
    PRINTF,FID_VEL_U,'Station','Longitude','Latitude','Vu','dVu', $
      FORMAT='("*",A8,2A10,2A9)'
    FMT_VEL_U='(1x,a8,2f10.4,2f9.2)'
  ENDIF
  ;
  ;NOW ALWAYS CHECK A PRIORI COORDINATE FILE.
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_MODEL_COORDS_FILE')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  FILE_COORD=STRTRIM(TMP[0],2)
  IF FILE_COORD EQ '' THEN FILE_COORD=GET_CFILE()
  ;
  IF CKB_OUT_FIT EQ 1 THEN BEGIN
    FPATH=OPATH+PATH_SEP()+'.fitted'
    FILE_MKDIR,FPATH
  ENDIF
  
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_MODEL_DPL_PSDECAY')
  PS_TYPE=WIDGET_INFO(ID,/DROPLIST_SELECT)
  ;HELP, PS_TYPE
  ;RETURN
  
  NEUSTR=['N','E','U']
  
  ;GET ALL FILE NAMES
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  FILES=*ST.FILES
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  
  NFO=0
  NFS=0
  FOR SI=0,N_ELEMENTS(SITES_USE)-1 DO BEGIN
    SITE=SITES_USE[SI]
    PRINT,'[iGPS:MODEL]Processing site: ',SITE+'.',FORMAT='(2A)'
    FILE=FILES[INDEX[SI]]
    
    ;
    READ_NET,FILE_COORD,SITE=SITE,LLH=LLH
    
    ;CHECK WHETHER TO OVERWRITE EXISTING OUTPUT FILES
    OFILE=OPATH+PATH_SEP()+GETFILENAME(FILE)
    IF FILE_TEST(OFILE,/REGULAR) THEN BEGIN
      IF OVERWRITE EQ 0 THEN BEGIN
        PRINT,'[iGPS:MODEL]Output file already exists. Skip ['+OFILE+'].',FORMAT='(A)'
        NFS=NFS+1
        CONTINUE
      ENDIF ELSE BEGIN
        PRINT,'[iGPS:MODEL]Output file already exists. Overwriting ['+OFILE+'].',FORMAT='(A)'
      ENDELSE
    ENDIF
    NFO=NFO+1
    
    ON_IGPS_BTN_LOAD, EV, SIT_ID=INDEX[SI],UPDATE=UPDATE
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    OFF=-1
    PSDE=-1
    
    
    
    
    ;    IF N_ELEMENTS(HEADERS) LT 1 || ( N_ELEMENTS(HEADERS) EQ 1  && HEADERS EQ '' ) $
    ;      THEN BEGIN
    ;      HEADERS='#>> The below parameters are estimated by Tian.<<'
    ;    ENDIF ELSE BEGIN
    ;      HEADERS=[HEADERS,'#>> The below parameters are estimated by Tian.<<']
    ;    ENDELSE
    HEADER_MDL=''
    IND_NEU=ST.IND_NEU
    IND_TIME=ST.IND_TIME
    DATA=*ST.DATA_RAW
    
    T=REFORM(DATA[IND_TIME,*])
    TIME_FIRST=FIRST(T)
    TIME_LAST=LAST(T)
    ;FRO CMONOC SURVEY MODE
    ;    IF TIME_LAST-TIME_FIRST LT 1.5 THEN BEGIN
    ;      PRINT,'[iGPS:MODEL]WARNING: time series for '+SITE+' too short! Skipped!'
    ;      CONTINUE  ;NO ESTIMATION FOR TOO SHORT OBSERVATIONS
    ;    ENDIF
    
    IND_NEUERR=ST.IND_NEUERR
    ;RETURN
    
    ODATA=DATA
    FDATA=DATA  ;FITTED
    FDATA2=DBLARR(6,10000)  ;FITTED
    SFDATA=DATA ;SEASONAL FITTED
    
    IF PREVIEW THEN BEGIN
      WINDOW, 0, XSIZE=750, YSIZE=699,/PIXMAP
      !P.MULTI=[0,1,N_ELEMENTS(IND_NEU)]
    ENDIF
    ;STOP
    
    VELS=DBLARR(2,3)
    
    RMSES=DBLARR(3)
    
    FOR NEUI=0, N_ELEMENTS(WHERE(IND_NEU NE -1))-1 DO BEGIN
    
      IF CKB_OFFSET EQ 1 && DFILE NE '' THEN BEGIN
        READ_DEF, DFILE, SITE=SITE, OFFSET=OFF, NEU=NEUSTR[NEUI]
        OFFSET=DBLARR(3,N_ELEMENTS(OFF))
        OFFSET[*,*]=-9999
        IF OFF[0] NE -9999 THEN BEGIN
          OFFSET[2,*]=OFF
        ENDIF
      ENDIF
      
      IF CKB_PSDECAY EQ 1 && DFILE NE '' THEN BEGIN
        READ_DEF, DFILE, SITE=SITE, PSDECAY=PSDE, NEU=NEUSTR[NEUI]
        PSDECAY=DBLARR(4,N_ELEMENTS(PSDE))
        PSDECAY[*,*]=-9999
        IF PSDE[0] NE -9999 THEN BEGIN
          PSDECAY[3,*]=PSDE
        ENDIF
      ENDIF
      
      IF ST.TS_TYPE EQ 'SIO NEU' && (CKB_OFFSET || CKB_PSDECAY) && CKB_PLUS_SIO EQ 1 THEN BEGIN
        CMDSTR='QUERY_SIO, FILE, PSDECAY_'+NEUSTR[NEUI]+'=PSDECAY_SIO, OFFSET_'+NEUSTR[NEUI]+'=OFFSET_SIO
        TMP=EXECUTE(CMDSTR)
        IF N_ELEMENTS(OFFSET_SIO) GE 3 && OFFSET_SIO[2] NE -9999 THEN BEGIN
          IF N_ELEMENTS(OFFSET) GE 3 && OFFSET[2] NE -9999 THEN BEGIN
            OFFSET=[[OFFSET],[OFFSET_SIO]]
          ENDIF ELSE BEGIN
            OFFSET=OFFSET_SIO
          ENDELSE
        ENDIF
        IF CKB_PSDECAY && N_ELEMENTS(PSDECAY_SIO) GE 4 && PSDECAY_SIO[3] NE -9999 THEN BEGIN
          IF N_ELEMENTS(PSDECAY) GE 4 && PSDECAY[3] NE -9999 THEN BEGIN
            PSDECAY=[[PSDECAY],[PSDECAY_SIO]]
          ENDIF ELSE BEGIN
            PSDECAY=PSDECAY_SIO
          ENDELSE
        ENDIF
      ENDIF
      ;HELP, SLOPE, OFFSET, PSDECAY
      ;PRINT,OFFSET
      ;PRINT,PSDECAY
      CMDSTR=MDL_PROG+',T, X, COEF=COEF, ATB=ATB, CCOV=CCOV, ' $
        +' YFIT=YFIT,T2=T2,Y2FIT=Y2FIT,RMSE=RMSE,SIGMA=SIGMA, RESIDUAL=RESIDUAL, SLOPE=SLOPE'; $
      ;+', SEASONALFIT=SEASONALFIT, DT=DT,SEASONALDFIT=SEASONALDFIT'
      ;PRINT,CMDSTR
      IF CKB_ANNUAL THEN BEGIN
        CMDSTR=CMDSTR+', ANNUAL=ANNUAL'
      ENDIF
      IF CKB_SEMIANNUAL THEN BEGIN
        CMDSTR=CMDSTR+', SEMIANNUAL=SEMIANNUAL'
      ENDIF
      IF CKB_OFFSET && N_ELEMENTS(OFFSET) GE 3 && OFFSET[2,0] NE -9999 THEN BEGIN
        ;STOP
        ;CHECK PSDECAY/OFFSET EPOCHS ARE IN THE RANGE OF OBSERVATIONS
        IND=INDGEN(N_ELEMENTS(OFFSET[0,*]))
        FOR OI=0,N_ELEMENTS(OFFSET[0,*])-1 DO BEGIN
          IF OFFSET[2,OI] LT TIME_FIRST || OFFSET[2,OI] GT TIME_LAST THEN IND[OI]=-1
        ENDFOR
        POS=WHERE(IND GT -1)
        ;stop
        IF POS[0] NE -1 THEN BEGIN
          OFFSET=OFFSET[*,POS]
          POS=SORT(OFFSET[2,*])
          OFFSET=OFFSET[*,POS]
          CMDSTR=CMDSTR+', OFFSET=OFFSET'
        ENDIF ELSE BEGIN
          OFFSET[2,*]=-9999
        ENDELSE
      ENDIF
      
      
      IF CKB_PSDECAY && N_ELEMENTS(PSDECAY) GE 4 && PSDECAY[3,0] NE -9999 && NEUI NE 3 THEN BEGIN
        ;CHECK PSDECAY/OFFSET EPOCHS ARE IN THE RANGE OF OBSERVATIONS
        ;STOP
        IND=INDGEN(N_ELEMENTS(PSDECAY[0,*]))
        FOR PI=0,N_ELEMENTS(PSDECAY[0,*])-1 DO BEGIN
          IF PSDECAY[3,PI] GE TIME_LAST || PSDECAY[3,PI] LT TIME_FIRST THEN IND[PI]=-1
        ENDFOR
        POS=WHERE(IND GT -1)
        IF POS[0] NE -1 THEN BEGIN
          PSDECAY=PSDECAY[*,POS]
          POS=SORT(PSDECAY[3,*])
          PSDECAY=PSDECAY[*,POS]
          CMDSTR=CMDSTR+', PSDECAY=PSDECAY, PS_TYPE=PS_TYPE'
        ENDIF ELSE BEGIN
          PSDECAY[3,*]=-9999
        ENDELSE
      ENDIF
      
      ;PRINT,CMDSTR
      ;PRINT,'RAD_OPT:',RAD_OPT
      ;CONTINUE
      ;print,psdecay
      X=REFORM(DATA[IND_NEU[NEUI],*])
      ;PERFORM THE MODELLING [CALL TS_MODEL, ...]
      TMP=EXECUTE(CMDSTR)
      ;STOP
      ;
      IF IND_NEUERR[NEUI] NE -1 THEN BEGIN
        XE=REFORM(DATA[IND_NEUERR[NEUI],*])
      ENDIF ELSE BEGIN
        XE=!VALUES.D_NAN
      ENDELSE
      IF FINITE(XE[0]) EQ 1 THEN BEGIN
        W=1D0/XE^2
        CHISQR=TOTAL(RESIDUAL^2*W)
        NP=N_ELEMENTS(COEF)
        NUMDATA=N_ELEMENTS(RESIDUAL)
        NRMS=SQRT(CHISQR/(NUMDATA-NP))
        WRMS=SQRT((NUMDATA/(NUMDATA-NP))*CHISQR/TOTAL(W))
        ;HELP,NRMS,WRMS
        ;STOP
        CKB_REALSIG=1
        IF CKB_REALSIG EQ 1 THEN BEGIN
          ;STOP
          REALISTIC_SIGMA,TRANSPOSE([[T],[X],[XE]]), RESIDUAL, NRMSr=NRMSR
          ;PRINT,'NRMS:',NRMS,NRMSR
          IF FINITE(nrmsr) THEN BEGIN  ;Tue, Mar 29, 2016 10:51:21 PM
            SLOPE[1,*]=SQRT(SLOPE[1,*]^2*(nrmsR/nrms)^2)
          ENDIF
        ENDIF
        
      ENDIF
      ;STOP
      FDATA[IND_NEU[NEUI],*]=YFIT
      FDATA2[IND_NEU[NEUI],0:N_ELEMENTS(Y2FIT)-1]=Y2FIT
      FDATA2[0,0:N_ELEMENTS(Y2FIT)-1]=T2
      
      IF CKB_RESID_OUT_TREND THEN BEGIN
        ;STOP
        RESIDUAL=COEF[0]+RESIDUAL+SLOPE[0,0]*T
        FOR I=1,N_ELEMENTS(SLOPE[0,*])-1 DO BEGIN
          POS=WHERE(T GE SLOPE[2,I])
          RESIDUAL[POS]=RESIDUAL[POS]+(T[POS]-SLOPE[2,I])*SLOPE[0,I]
        ENDFOR
      ENDIF
      
      ;help, offset
      ;print,offset
      ;STOP
      IF CKB_OFFSET && CKB_RESID_OUT_OFFSET && N_ELEMENTS(OFFSET) GE 3 && OFFSET[2,0] NE -9999 THEN BEGIN
        FOR I=0, N_ELEMENTS(OFFSET[0,*])-1 DO BEGIN
          POS=WHERE(T GE OFFSET[2,I])
          ;PRINT,'PS OFFSET START:',FIRST(T[POS])
          RESIDUAL[POS]=RESIDUAL[POS]+OFFSET[0,I]
        ENDFOR
      ENDIF
      
      IF CKB_PSDECAY && CKB_RESID_OUT_PSDECAY && N_ELEMENTS(PSDECAY) GE 4 && PSDECAY[3,0] NE -9999 THEN BEGIN
        FOR I=0, N_ELEMENTS(PSDECAY[0,*])-1 DO BEGIN
          POS=WHERE(T GE PSDECAY[3,I])
          ;PRINT,'PS decay START:',FIRST(T[POS])
          ;STOP
          CASE PS_TYPE OF
            0: BEGIN
              ;PS_TYPE_STR='Exponential'
              RESIDUAL[POS]=RESIDUAL[POS]+PSDECAY[0,I]*EXP(-1D0*(T[POS]-PSDECAY[3,I])/(PSDECAY[2,I]/365.25D0))
            END
            1: BEGIN
              ;PS_TYPE_STR='Logarithmic'
              RESIDUAL[POS]=RESIDUAL[POS]+PSDECAY[0,I]*ALOG(1D0+(T[POS]-PSDECAY[3,I])/(PSDECAY[2,I]/365.25D0))
            END
          ENDCASE
        ENDFOR
      ENDIF
      
      ;help,annual
      IF CKB_ANNUAL && CKB_RESID_OUT_ANNUAL THEN BEGIN
        RESIDUAL=RESIDUAL+ANNUAL[0,0]*SIN(2*!DPI*T)+ANNUAL[0,1]*COS(2*!DPI*T)
      ;STOP
      ENDIF
      
      IF CKB_SEMIANNUAL && CKB_RESID_OUT_SEMIANNUAL THEN BEGIN
        RESIDUAL=RESIDUAL+SEMIANNUAL[0,0]*SIN(4*!DPI*T)+SEMIANNUAL[0,1]*COS(4*!DPI*T)
      ;STOP
      ENDIF
      
      ;STOP
      ODATA[IND_NEU[NEUI],*]=RESIDUAL
      
      ;      IF NEUI EQ 0 THEN BEGIN
      ;        SEASONALDFITS=SEASONALDFIT
      ;      ENDIF ELSE BEGIN
      ;        SEASONALDFITS=[[SEASONALDFITS],[SEASONALDFIT]]
      ;      ENDELSE
      ;      SFDATA[IND_NEU[NEUI],*]=SEASONALFIT
      ;
      ;RETURN
      HEADER_MDL=[HEADER_MDL, '#','# '+NEUSTR[NEUI]+' COMPONENT']
      ;HEADERS=[HEADERS, '# SLOPE 1:'+STRING(COEF[1],FORMAT='(F9.4)')]
      
      ;PRINT,'SLOPES:',SLOPE
      FOR I=0,0 DO BEGIN
        HEADER_MDL=[HEADER_MDL, $
          '#     slope '+STRTRIM(I+1,2)+':'+STRING(SLOPE[0,I],FORMAT='(F10.5)') $
          +' +- '+STRING(SLOPE[1,I],FORMAT='(F10.5)') $
          +' ('+STRING(SLOPE[2,I],FORMAT='(F10.5)')$
          +'-'+STRING(SLOPE[3,I],FORMAT='(F10.5)')+')' $
          ]
      ENDFOR
      FOR I=1,N_ELEMENTS(SLOPE[0,*])-1 DO BEGIN
        HEADER_MDL=[HEADER_MDL, $
          '#     slope '+STRTRIM(I+1,2)+':'+STRING(SLOPE[0,I],FORMAT='(E)') $
          +' +- '+STRING(SLOPE[1,I],FORMAT='(E)') $
          +' ('+STRING(SLOPE[2,I],FORMAT='(F10.5)')$
          +'-'+STRING(SLOPE[3,I],FORMAT='(F10.5)')+') [rate change]' $
          ]
      ENDFOR
      
      IF CKB_OFFSET && N_ELEMENTS(OFFSET) GE 3 && OFFSET[2,0] NE -9999 THEN BEGIN
        FOR I=0, N_ELEMENTS(OFFSET[0,*])-1 DO BEGIN
          HEADER_MDL=[HEADER_MDL, $
            '#    offset '+STRTRIM(I+1,2)+':'+STRING(OFFSET[0,I],FORMAT='(F10.5)') $
            +' +- '+STRING(OFFSET[1,I],FORMAT='(F10.5)') $
            +' ('+STRING(OFFSET[2,I],FORMAT='(F10.5)')+')'$
            ]
        ENDFOR
      ENDIF
      
      ;STOP
      ;HELP,ANNUAL
      IF CKB_ANNUAL && N_ELEMENTS(ANNUAL) GT 0 THEN BEGIN
        SINCOS2SIN, ANNUAL[0,0],ANNUAL[0,1], AMP=AMP, PHASE=PHASE, $
          ECCOSB=ANNUAL[1,0],ECSINB=ANNUAL[1,1], EAMP=EAMP
        ANN_AMP=AMP
        ANN_EAMP=EAMP
        ANN_PHASE=PHASE
        HEADER_MDL=[HEADER_MDL, $
          '#      annual:'+STRING(AMP,FORMAT='(F10.5)') $
          +' +- '+STRING(EAMP, FORMAT='(F10.5)') $
          +' ; phase: '+STRING(PHASE,FORMAT='(F10.5)') $
        ]
      ENDIF
      ;STOP
      IF CKB_SEMIANNUAL && N_ELEMENTS(SEMIANNUAL) GT 0 THEN BEGIN
        SINCOS2SIN, SEMIANNUAL[0,0],SEMIANNUAL[0,1], AMP=AMP, PHASE=PHASE, $
          ECCOSB=SEMIANNUAL[1,0],ECSINB=SEMIANNUAL[1,1], EAMP=EAMP
        SEMI_AMP=AMP
        SEMI_PHASE=PHASE
        HEADER_MDL=[HEADER_MDL, $
          '# semi-annual:'+STRING(AMP,FORMAT='(F10.5)') $
          +' +- '+STRING(EAMP, FORMAT='(F10.5)') $
          +' ; phase: '+STRING(PHASE,FORMAT='(F10.5)')]
      ENDIF
      
      IF NEUI LT 3 THEN BEGIN
        IF CKB_PSDECAY && N_ELEMENTS(PSDECAY) GE 4 && PSDECAY[3,0] NE -9999 THEN BEGIN
          CASE PS_TYPE OF
            0: BEGIN
              PS_TYPE_STR='Exponential'
            END
            1: BEGIN
              PS_TYPE_STR='Logarithmic'
            END
          ENDCASE
          FOR I=0, N_ELEMENTS(PSDECAY[0,*])-1 DO BEGIN
            HEADER_MDL=[HEADER_MDL, $
              '#  ps decay '+STRTRIM(I+1,2)+':'+STRING(PSDECAY[0,I],FORMAT='(F10.5)') $
              +' +- '+STRING(PSDECAY[1,I],FORMAT='(F10.5)') $
              +' ('+STRING(PSDECAY[3,I],FORMAT='(F10.5)')+');' $
            +' tau:'+STRING(PSDECAY[2,I],FORMAT='(I4,1X,"days")') $
              +' ['+PS_TYPE_STR+']' ]
          ENDFOR
          
          ;          IF DFILE EQ '' THEN BEGIN
          ;            PSDECAY=[-9999D0,-9999D0,-9999D0,-9999D0]
          ;          ENDIF ELSE BEGIN
          ;            IF N_ELEMENTS(PSDECAY_BAK) GE 4 && PSDECAY_BAK[3,0] NE -9999 THEN BEGIN
          ;              PSDECAY=PSDECAY_BAK
          ;            ENDIF
          ;          ENDELSE
          PSDECAY=[-9999D0,-9999D0,-9999D0,-9999D0]
        ENDIF
      ENDIF
      
      ;ADDITIONAL HEADERS
      ;    # Refined Model Terms:
      ;    #
      ;    #                    n component
      ;    #     slope 1:  0.0197 +/- 0.0010 m/yr (1991.0699 - 1994.0452)
      ;    #     slope 2:  0.0119 +/- 0.0002 m/yr (1994.0452 - 2008.2254)
      ;    #    offset 1: -0.0033 +/- 0.0013 m (1991.8288)
      ;    #  * offset 2:  0.0017 +/- 0.0013 m (1992.4904)
      ;    #  * offset 3: -0.0086 +/- 0.0012 m (1994.0452)
      ;    #  * offset 4:  0.0017 +/- 0.0011 m (1999.7904)
      ;    #    offset 5:  0.0009 +/- 0.0011 m (2006.0397)
      ;    #    offset 6:  0.0150 +/- 0.0011 m (2006.8452)
      ;    #      annual:  0.0014 +/- 0.0003 m; phase: 1.35
      ;    # semi-annual:  0.0004 +/- 0.0002 m; phase: 2.78
      
      IF PREVIEW THEN BEGIN
        TITLES = ['North', 'East','Up']
        TITLE_MID = ' '
        TITLE_TMP=TITLES[NEUI]+TITLE_MID+STRMID(GETFILENAME(FILE),0,4)+ $
          ' [#: '+STRTRIM(N_ELEMENTS(DATA[0,*]),2)+ $
          ': '+STRTRIM(DATA[IND_TIME,0],2)+' ~ '+STRTRIM(LAST(DATA[IND_TIME,*]),2)+']'
          
        NEUERRIS = ST.IND_NEUERR
        Y=REFORM(DATA[IND_NEU[NEUI],*])
        IF ST.ERROR_BAR EQ 1 &&  NEUERRIS[NEUI] NE -1 THEN BEGIN
          YU=Y*ST.SF+DATA[(ST.IND_NEUERR)[NEUI],*]*ST.SF
          YL=Y*ST.SF-DATA[(ST.IND_NEUERR)[NEUI],*]*ST.SF
        ENDIF ELSE BEGIN
          YU=Y*ST.SF;+DATA[(ST.IND_NEUERR)[NEUI],*]*ST.SF
          YL=Y*ST.SF;-DATA[(ST.IND_NEUERR)[NEUI],*]*ST.SF
        ENDELSE
        
        CAPLEN=ST.CAPLEN
        
        PLOT,DATA[IND_TIME,*], DATA[IND_NEU[NEUI],*]*ST.SF, BACKGROUND='FFFFFF'X, $
          COLOR='000000'X, PSYM=ST.PSYM, $
          TITLE=TITLE_TMP, $
          CHARSIZE=2, $
          XSTYLE=1, $
          YSTYLE=1, $
          /NODATA, $
          YTITLE=TITLES[NEUI]+' (mm)', $
          YRANGE=[MIN(YL),MAX(YU)]
          
          
        ERRPLOT,T,YL,YU,COLOR='0000FF'X
        ;        FOR J=0,N_ELEMENTS(YU)-1 DO BEGIN
        ;          OPLOT,[ T[J],T[J] ],[ YU[J],YL[J] ], COLOR='0000FF'X
        ;          OPLOT,[ T[J]-CAPLEN,T[J]+CAPLEN ],[ YU[J],YU[J] ], COLOR='0000FF'X
        ;          OPLOT,[ T[J]-CAPLEN,T[J]+CAPLEN ],[ YL[J],YL[J] ], COLOR='0000FF'X
        ;        ENDFOR
        
        OPLOT,T, Y*ST.SF, $
          COLOR='00ff00'X,$
          PSYM=ST.PSYM
          
        OPLOT,DATA[IND_TIME,*], YFIT*ST.SF, $
          COLOR='FF0000'X, PSYM=0,LINESTYLE=0,THICK=2
        ;OFFSETS
        ;STOP
        IF N_ELEMENTS(OFFSET) GE 3 && OFFSET[2] NE -9999 THEN BEGIN
          FOR OI=0, N_ELEMENTS(OFFSET[2,*])-1 DO BEGIN
            ;OPLOT,[DATA[IND_TIME,TMP], DATA[IND_TIME,TMP]], $
            ; [MIN(BDATA[IND_NEU[CI],*]),MAX(BDATA[IND_NEU[CI],*])], COLOR='00FF00'X
            OPLOT, [ OFFSET[2,OI], OFFSET[2,OI] ], $
              [ MIN(DATA[IND_NEU[NEUI],*]),MAX(DATA[IND_NEU[NEUI],*]) ]*ST.SF, COLOR='FF0000'X,THICK=1
            TMP=MIN(ABS(OFFSET[2,OI]-DATA[IND_TIME,*]),INDMIN)
            XYOUTS,  $
              OFFSET[2,OI]-(!D.Y_CH_SIZE*3*(MAX(DATA[IND_TIME,*])-MIN(DATA[IND_TIME,*]))/658), $
              (MAX(DATA[IND_NEU[NEUI],*])-(DATA[IND_NEU[NEUI],INDMIN]-MIN(DATA[IND_NEU[NEUI],*])))*ST.SF, STRING(OFFSET[2,OI],FORMAT='(F10.5)'), $
              COLOR='FF0000'X,/DATA
          ENDFOR
        ENDIF
      ENDIF
      
      ;STOP
      
      IF CKB_OUT_STAT EQ 1 THEN BEGIN
        IF N_ELEMENTS(ANN_AMP) GT 0 && N_ELEMENTS(SEMI_AMP) GT 0 THEN BEGIN
          PRINTF,FID_STAT,SITE,NEUSTR[NEUI],ANN_AMP,ANN_PHASE,SEMI_AMP,SEMI_PHASE, $
            SLOPE[0,0],SLOPE[1,0],RMSE,ANN_EAMP,$
            FORMAT='(1X,A4,1X,A3,7(1X,F12.7),1x,f12.7)'
        ;PRINT,ANN_EAMP
        ;HELP,ANN_EAMP
        ENDIF ELSE BEGIN
          ;HELP,OFFSET
          ;PM,OFFSET
          PRINTF,FID_STAT,SITE,NEUSTR[NEUI], $
            SLOPE[0,0],SLOPE[1,0],RMSE,$
            ;OFFSET[0,*], OFFSET[1,*], $
            FORMAT='(1X,A4,1X,A3,2(1X,F12.5),1X,F10.5,5X,4F20.8)'
            
        ENDELSE
        
      ;
      ENDIF
      ;VELS[*,NEUI]=[SLOPE[0],SLOPE[1]*10]
      VELS[*,NEUI]=[SLOPE[0],SLOPE[1]]
      
      RMSES[NEUI]=RMSE
      
      ;PRINT,CKB_OUT_STAT
      ;      IF DFILE EQ '' THEN BEGIN
      ;        OFFSET=[-9999D0,-9999D0,-9999D0]
      ;      ENDIF ELSE BEGIN
      ;        IF N_ELEMENTS(OFFSET_BAK) GE 3 && OFFSET_BAK[2,0] NE -9999 THEN BEGIN
      ;          OFFSET=OFFSET_BAK
      ;
      ;        ENDIF
      ;      ENDELSE
      
      OFFSET=[-9999D0,-9999D0,-9999D0]
      
    ENDFOR  ;END-OF-NEUI
    ;RETURN
    ;lsq_velo   85.5212  27.6927    36.54    33.24     0.56     0.66 -0.0290     0.95     2.81  0.0277 -0.0549  NAGA_GPS  1999.0014 2001.8699
    HEADER_MDL=[HEADER_MDL,'#','#'+STRING(LLH[0:1], VELS[0,1]*1D3,VELS[0,0]*1D3, $
      VELS[1,1]*1D3,VELS[1,0]*1D3,0, $
      VELS[0,2]*1D3,VELS[1,2]*1D3,0,0,STRUPCASE(SITE),FIRST(T),LAST(T),  $
      FORMAT='("lsq_velo",1X,F9.4,1X,F8.4,2(1X,F8.2),2(1X,F8.2),1X,F7.4,2(1X,F8.2),2(1X,F7.4),2X,A4,"_GPS",1X,2(1X,F9.4))') ]
    ;   85.5212  27.6927    36.54    33.24     0.56     0.66 -0.0290     0.95     2.81  0.0277 -0.0549  NAGA_GPS  1999.0014 2001.8699)
      
    ;ADD RMSE TO THE HEADER
    HEADER_MDL=[HEADER_MDL,'# RMSE:'+STRING(RMSES,FORMAT='(3(1X,F10.5))')]
    
    ;HELP, CKB_OUT_HEADER, CKB_OUT_OLD_HEADER,CKB_OUT_MERGE_HEADER
    IF CKB_OUT_HEADER EQ 1 THEN BEGIN ;  IF OUTPUT HEADER
      IF CKB_OUT_OLD_HEADER EQ 1 THEN BEGIN ;IF OUTPUT OLD HEADER
        IF PTR_VALID(ST.HEADER) NE 1 || (N_ELEMENTS(*ST.HEADER) EQ 1 && (*ST.HEADER)[0] EQ '') THEN BEGIN
          ;IF NO OLD HEADER, THEN JUST ASSIGN THE NEW HEADER
          HEADERS=[HEADER_MDL[1:*],'#<<']
        ENDIF ELSE BEGIN
          ;IF OLD HEADER EXIST, THEN
          IF CKB_OUT_MERGE_HEADER NE 1 THEN BEGIN ;IF NOT MERGE HEADERS
            HEADERS=[HEADER_MDL[1:*],'#<<',*ST.HEADER]
          ENDIF ELSE BEGIN  ;IF NEED TO MERGER HEADERS
            ;STOP
            MERGE_HEADERS, *ST.HEADER, HEADER_MDL[1:*], HEADER_OUT=HEADERS, PS_TYPE=PS_TYPE
          ENDELSE
        ENDELSE
      ENDIF ELSE BEGIN  ;IF ONLY WRITE NEW HEADER
        HEADERS=[HEADER_MDL[1:*],'#<<']
      ENDELSE
    ENDIF ELSE BEGIN
      HEADERS=''
    ENDELSE
    
    EXT=GETFILESUFFIX(FILE)
    ;stop
    FMT=ST.FMT
    ;HELP,fmt
    ;FMT='(F10.5,1X,I4,1X,I3,1X,F10.5)'
    IF ST.TS_TYPE EQ 'JPL LAT/LON/RAD' THEN BEGIN
      EXT='neu'
      FMT='((1x,F10.5,1X,I4,1X,I3,1X,3(1x,F12.7),1X,3(1x,F12.7)))'
    ENDIF
    ;STOP
    IF N_ELEMENTS(DFILE) NE 0 THEN BEGIN
      SRC=[FILE,'offset/psdecay file: '+DFILE]
    ENDIF ELSE BEGIN
      SRC=FILE
    ENDELSE
    
    ;HELP, headers
    WRITE_SIO, OFILE, DATA=ODATA, HEADERS=HEADERS,FMT=FMT, $
      PROG='iGPS:MODEL+WRITE_SIO', $
      SRC=SRC, $
      USER=USER
      
      
    IF CKB_OUT_FIT EQ 1 THEN BEGIN
      FFILE=FPATH+PATH_SEP()+GETFILENAME(FILE)
      ;FMT='(F10.5,1X,I4.4,1X,I3.3,1X,F20.10)'
      ;FOR TOO SMALL VALUES, ...
      ;STOP
      WRITE_SIO, FFILE, DATA=FDATA, HEADERS=HEADERS, $
        FMT=FMT, $
        PROG='iGPS:MODEL+WRITE_SIO', $
        SRC=SRC, $
        USER=USER
        
      FFILE2=FPATH+PATH_SEP()+DESUFFIX(GETFILENAME(FILE))+'_interp.neu'
      POS=WHERE(FDATA2[0,*] GT 0)
      FDATA2=FDATA2[*,POS]
      DECYRS=REFORM(FDATA2[0,*])
      DECYRS_TO_JDS, DECYRS, JDS
      JD_TO_YMDHMSS , JDS, DATES, SECONDS, MJD=MJDS
      YMDS=DATES[0:2,*]
      YMD_TO_DOYS, YMDS, DOYRS
      FDATA2[1,*]=FIX(FDATA2[0,*])
      FDATA2[2,*]=DOYRS
      WRITE_SIO, FFILE2, DATA=FDATA2, HEADERS=HEADERS, $
        FMT=FMT, $
        PROG='iGPS:MODEL+WRITE_SIO', $
        SRC=SRC, $
        USER=USER
    ENDIF
    
    ;SEASONAL FITTED OUTPUT; ONLY FOR SPECIFIC USAGE; NOT PUBLIC
    CKB_OUT_SFIT=0
    IF CKB_OUT_SFIT EQ 1 THEN BEGIN
      SFPATH='E:\data\nepal\tian\20100716t\rawXyz.neu.forFrame.cln.resid\.seasonal.fitted'
      SFPATH='E:\load\predicted\for.frame.120\neu\atml_soil_snow.resid\.seasonal.fitted'
      SFFILE=SFPATH+PATH_SEP()+GETFILENAME(FILE)
      ;FMT='(F10.5,1X,I4.4,1X,I3.3,1X,F20.10)'
      ;FOR TOO SMALL VALUES, ...
      ;STOP
      ;SFDATA=SFDATA[0:5,*]
      NDT=N_ELEMENTS(DT)
      SDFDATA=DBLARR(6,NDT)
      SDFDATA[0,*]=DT
      SDFDATA[1,*]=FIX(DT)
      SDFDATA[3:5,*]=TRANSPOSE(SEASONALDFITS)
      FOR DTI=0,NDT-1 DO BEGIN
        DOY,STRTRIM(DT[DTI],2)+'Y',DAY_OF_YEAR=DOYR
        SDFDATA[2,DTI]=DOYR
      ENDFOR
      WRITE_SIO, SFFILE, DATA=SDFDATA, HEADERS=HEADERS, $
        ;FMT=st.FMT, $
        ;force_fmt=0, $
        PROG='iGPS:MODEL+WRITE_SIO', $
        SRC=SRC, $
        USER=USER
    ;stop
    ENDIF
    
    IF PREVIEW THEN BEGIN
      JFILE=OPATH+PATH_SEP()+DESUFFIX(GETFILENAME(FILE))+'.jpg'
      T = TVRD(TRUE=1)
      WRITE_JPEG, JFILE, T, TRUE=1, QUALITY=100
      !P.MULTI=0
      WDELETE, 0
    ENDIF
    
    IF CKB_OUT_STAT EQ 1 THEN BEGIN
      PRINTF,FID_STAT,STRUPCASE(SITE),VELS[0,*],VELS[1,*],FORMAT='("*",1X,A4,"_VELOCITY",1X,3F10.5,1X,3F10.5)'
      
      ; format(1x,a8,2f10.4,8f8.1,f9.4)
      ; stn,slon,slat,ve0,ve,vet,dve,vn0,vn,vnt,dvn,cen
      CEN=0
      ;READ_NET,FILE_COORD,SITE=SITE,LLH=LLH
      PRINTF,FID_VEL,STRUPCASE(SITE)+'_GPS',LLH[0:1],$
        0,0,VELS[*,1]*1D3,$
        0,0,VELs[*,0]*1D3,$
        CEN,$
        FORMAT=FMT_VEL
      PRINTF,FID_VEL_U,STRUPCASE(SITE)+'_GPS',LLH[0:1],$
        VELS[*,2]*1D3,$
        FORMAT=FMT_VEL_U
    ;PRINT,VELS
    ;stop
    ENDIF
    
  ENDFOR ;END-OF-SITE
  
  IF CKB_OUT_STAT EQ 1 THEN BEGIN
    FREE_LUN,FID_STAT
    FREE_LUN,FID_VEL
    FREE_LUN,FID_VEL_U
  ENDIF
  
  MSGBOX, ['Done!', $
    '',$
    STRTRIM(NFO,2)+' files have been processed.', $
    STRTRIM(NFS,2)+' output files already exist and not overwritten!', $
    ''], $
    TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
    
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_MODEL_BTN_TIP, EV
  STR=['Purpose:', $
    '  Get the residual time series.', $
    '', $
    'Note:', $
    '  * White noise ONLY.',$
    '',$
    'Steps:', $
    '  1.Select an input path;', $
  '  2.Select sites to be processed;', $
  '  3.Set modeling parameters (rate, seasonal, jump, ... );', $
  '  4.Select offset/psdecay list file (Definition File);', $
  '  5.Set Model output options (header, modeled data, ...);', $
  '  6.Select an output directory and set outputing options;', $
  '  7.Hit Ok button to go.', $
    '']
  MSGBOX, STR, TITLE='iGPS', GROUP_LEADER=EV.TOP,/INFO
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_LST_OFFSETS_DBC, EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_OFFSET_LST_OFFSETS')
  WIDGET_CONTROL,ID,GET_UVALUE=OFFSETS
  ;HELP,OFFSETS
  ;HELP,EV,/ST
  SITE=STRMID(OFFSETS[EV.INDEX],0,4)
  ;PRINT,SITE
  ;stop
  ON_IGPS_BTN_LOAD, EV, SITE=SITE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_CKB_SIO_NEU_HANDLER, EV
  ON_IGPS_PANEL_OFFSET_CKB_SIO_NEU, EV
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE, INDEX=INDEX) NE 0 THEN RETURN
  IGPS_UPDATE_DRAW_NEU,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_CKB_SIO_NEU, EV, OPT=OPT

  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE, INDEX=SEL) NE 0 THEN RETURN
  
  SEL=LAST(SEL)
  SITE=SITES[SEL]
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF ST.TS_TYPE NE 'SIO NEU' THEN RETURN  ;
  IF N_ELEMENTS(OPT) LE 0 THEN BEGIN
    OPT=EV.SELECT
  ENDIF
  
  IF OPT EQ 0 THEN BEGIN
    ;DELETE EXISTING JUMPS FROM OFFSET ARRAY
    ;  NEED TO REVISE THE OFFSET ARRAY STRUCT
    IF NOT PTR_VALID(ST.OFFSETS) THEN RETURN
    TMP1=''
    ;STOP
    SIO_POSS=INTARR(N_ELEMENTS(*ST.OFFSETS))
    TMP1=STRARR(N_ELEMENTS(*ST.OFFSETS))
    FOR I=0ULL, N_ELEMENTS(*ST.OFFSETS)-1 DO BEGIN
      TMP=STRSPLIT((*ST.OFFSETS)[I],'-',/EXTRACT)
      ;PRINT,TMP
      IF N_ELEMENTS(TMP) GE 4 && STRUPCASE(TMP[3]) EQ 'SIO' && STRUPCASE(TMP[0]) EQ STRUPCASE(SITE) THEN BEGIN
        ;PRINT, STRUPCASE(TMP[0]) , STRUPCASE(SITE)
        SIO_POSS[I]=1
      ENDIF
      TMP=STRUPCASE(STRJOIN(TMP[0:2],'-'))
      TMP1[I]=TMP
    ENDFOR
    ;STOP
    IF TOTAL(SIO_POSS) EQ 0 THEN RETURN
    IND=WHERE(SIO_POSS NE 1)
    ;TMP1=TMP1[1:*]
    IF IND[0] EQ -1 THEN BEGIN
      ST.OFFSETS = PTR_NEW()
    ENDIF ELSE BEGIN
      ST.OFFSETS = PTR_NEW(REFORM((*ST.OFFSETS)[IND]))
    ENDELSE
    
    
  ENDIF ELSE BEGIN
    ;GET CURRENT FILE
  
    FILE=LAST((*ST.FILES)[SEL])
    ;
    QUERY_SIO, FILE, OFFSET_N=OFFSET_N, OFFSET_E=OFFSET_E, OFFSET_U=OFFSET_U
    ;PRINT, OFFSET_N, OFFSET_E, OFFSET_U
    ;stop
    OFFS=''
    IF N_ELEMENTS(OFFSET_N) GE 3 THEN BEGIN
      FOR I=0, N_ELEMENTS(OFFSET_N[0,*])-1 DO BEGIN
        IF OFFSET_N[2,I] EQ -9999 THEN CONTINUE
        OFF=STRJOIN([SITE,'N',STRTRIM(OFFSET_N[2,I],2),'SIO'],'-')
        OFFS = [OFFS, OFF]
      ENDFOR
    ENDIF
    
    IF N_ELEMENTS(OFFSET_E) GE 3 THEN BEGIN
      FOR I=0, N_ELEMENTS(OFFSET_E[0,*])-1 DO BEGIN
        IF OFFSET_E[2,I] EQ -9999 THEN CONTINUE
        OFF=STRJOIN([SITE,'E',STRTRIM(OFFSET_E[2,I],2),'SIO'],'-')
        OFFS = [OFFS, OFF]
      ENDFOR
    ENDIF
    
    IF N_ELEMENTS(OFFSET_U) GE 3 THEN BEGIN
      FOR I=0, N_ELEMENTS(OFFSET_U[0,*])-1 DO BEGIN
        IF OFFSET_U[2,I] EQ -9999 THEN CONTINUE
        OFF=STRJOIN([SITE,'U',STRTRIM(OFFSET_U[2,I],2),'SIO'],'-')
        OFFS = [OFFS, OFF]
      ENDFOR
    ENDIF
    
    IF N_ELEMENTS(OFFS) LE 1 THEN RETURN ;NO OFFSETS
    OFFS = OFFS[1:*]
    ;PRINT,OFFS
    
    IF NOT PTR_VALID(ST.OFFSETS) THEN BEGIN
      ST.OFFSETS=PTR_NEW(REFORM(OFFS))
    ENDIF ELSE BEGIN
      TMP1=STRARR(N_ELEMENTS(*ST.OFFSETS))
      FOR I=0ULL, N_ELEMENTS(*ST.OFFSETS)-1 DO BEGIN
        TMP=STRSPLIT((*ST.OFFSETS)[I],'-',/EXTRACT)
        TMP=STRUPCASE(STRJOIN(TMP[0:2],'-'))
        TMP1[I]=TMP
      ENDFOR
      
      FOR I=0ULL, N_ELEMENTS(OFFS)-1 DO BEGIN
        TMP0=STRSPLIT(OFFS[I],'-',/EXTRACT)
        TMP0=STRUPCASE(STRJOIN(TMP0[0:2],'-'))
        POS=WHERE(TMP1 EQ TMP0)
        ;STOP
        IF POS[0] NE -1 THEN BEGIN
          PRINT,' Already exists. skipped '+TMP0
          CONTINUE
        ENDIF
        ST.OFFSETS=PTR_NEW(REFORM([OFFS[I],*ST.OFFSETS]))
      ENDFOR
    ENDELSE
    
  ENDELSE
  ;  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OFFSET_LST_OFFSETS')
  ;  IF PTR_VALID(ST.OFFSETS) THEN BEGIN
  ;    WIDGET_CONTROL, ID, SET_VALUE=*ST.OFFSETS
  ;    WIDGET_CONTROL, ID, SET_UVALUE=*ST.OFFSETS
  ;  ENDIF ELSE BEGIN
  ;    WIDGET_CONTROL, ID, SET_VALUE=''
  ;    WIDGET_CONTROL, ID, SET_UVALUE=''
  ;  ENDELSE
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  
  IGPS_UPDATE_OFFPS_ARR,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
FUNCTION ON_IGPS_PANEL_OFFSET_RAD_SORT, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST,/NO_COPY
  ST.OFF_SORT=EV.VALUE
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  IGPS_PANEL_OFFSET_SORT, EV
  RETURN,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_PANEL_OFFSET_SORT, EV
  ;SHOW SORTTED (IF REQUESTED) OFFSET LIST
  ;THIS DOES NOT AFFECTED THE ST.OFFSET VARIABLE.
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST,/NO_COPY
  IF ~ PTR_VALID(ST.OFFSETS) THEN BEGIN
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    RETURN
  ENDIF
  OFFSETS=*ST.OFFSETS
  OFFSETS=STR_LINES2ARR(OFFSETS,'-')
  SORT_TYPE=ST.OFF_SORT
  IF SORT_TYPE EQ 0 THEN BEGIN
    OFFSETS=*ST.OFFSETS
  ENDIF ELSE BEGIN
    IF SORT_TYPE EQ 1 THEN BEGIN
      IND=SORT(STRUPCASE(OFFSETS[SORT_TYPE-1,*]))
    ENDIF ELSE BEGIN
      IND=SORT(OFFSETS[SORT_TYPE-1,*])
    ENDELSE
    OFFSETS=(*ST.OFFSETS)[IND]
  ENDELSE
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_OFFSET_LST_OFFSETS')
  ;RESTORE TOP LEVEL ST
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  ;SET OFFSET LIST CONTENT
  WIDGET_CONTROL,ID,SET_VALUE=OFFSETS,/NO_COPY
  WIDGET_CONTROL,ID,SET_UVALUE=OFFSETS,/NO_COPY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_BTN_CLEAR, EV
  ;;MSGBOX,'NEW OFFSET'
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST,/NO_COPY
  ST.OFFSETS = PTR_NEW()
  OFFS=''
  WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_UVALUE=OFFS
  WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_VALUE=OFFS
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_OFFPS_ARR,EV
  IGPS_UPDATE_DRAW_NEU, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_RAD_NEW, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ST.CURPANELOFFSETRAD='NEW'
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_RAD_DEL, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ST.CURPANELOFFSETRAD='DEL'
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_CKB_UPDATE_LIST, EV
  ;HELP,EV,/ST
  IF EV.SELECT EQ 0 THEN RETURN ;DO NOTHING
  
  IGPS_PANEL_OFFSET_SORT,EV
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_PSDECAY_BTN_RESTORE, EV, TYPE=TYPE

  IF N_ELEMENTS(TYPE) EQ 0 THEN TYPE='OFFSET'
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  
  FILE=DIALOG_PICKFILE(/READ,FILTER=[['*.def'],['iGPS Offset/Psdecay File (*.def)']])
  IF FILE EQ '' THEN RETURN
  CD, GETPATHNAME(FILE)
  
  NL=TXT_LINES(FILE)
  IF NL LE 0 THEN BEGIN
    MSGBOX,'No valid epoch found in '+file+'!',TITLE='iGPS',DIALOG_PARENT=EV.TOP,/ERROR
    RETURN
  ENDIF
  LINES=STRARR(NL)
  OPENR, FID, FILE, /GET_LUN
  READF, FID, LINES
  FREE_LUN, FID
  
  ;CHECK WHETHER IMPORT EPOCH LIST FOR ALL SITES
  IS_RESTORE_ALL=0
  IF TYPE EQ 'OFFSET' THEN BEGIN
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_OFFSET_CKB_RESTORE_ALL')
    CKB_RESTORE_ALL=WIDGET_INFO(ID,/BUTTON_SET)
  ENDIF
  IF TYPE EQ 'PSDECAY' THEN BEGIN
    ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_PSDECAY_CKB_RESTORE_ALL')
    CKB_RESTORE_ALL=WIDGET_INFO(ID,/BUTTON_SET)
  ENDIF
  IS_RESTORE_ALL=CKB_RESTORE_ALL
  
  IF IS_RESTORE_ALL EQ 0 THEN BEGIN
    ;GET SITES LIST
    TMP=IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE, INDEX=INDEX)
    IF N_ELEMENTS(SITES) LE 0 || SITES[0] EQ '' THEN BEGIN
      RETURN
    ENDIF
    ;STOP
    SITES=STRUPCASE(SITES)
  ENDIF
  
  ;STOP
  FOR LI=0,N_ELEMENTS(LINES)-1 DO BEGIN
    LINE=STRTRIM(LINES[LI])
    ;PRINT,LINE
    IF STRMID(LINE,0,1) NE ' ' THEN CONTINUE
    OFF=STRSPLIT(LINE, /EXTRACT)
    
    IF IS_RESTORE_ALL EQ 0 THEN BEGIN
      POS=WHERE(SITES EQ STRUPCASE(OFF[1]))
      IF POS[0] EQ -1 THEN CONTINUE
    ENDIF
    ;STOP
    IF STRUPCASE(OFF[0]) NE STRUPCASE(TYPE) THEN CONTINUE
    IF N_ELEMENTS(OFF) LT 3 THEN CONTINUE
    IF N_ELEMENTS(OFF) GE 4 THEN BEGIN
      ;STOP
      IND=[1,3,2]
      OFF=STRJOIN(OFF[IND],'-')
    ENDIF ELSE BEGIN
      OFF=STRJOIN([OFF[1],'N',OFF[2]],'-')
      OFF=[OFF,STRREP(OFF[0],'-N-','-E-')]
      OFF=[OFF,STRREP(OFF[0],'-N-','-U-')]
    ENDELSE
    IF N_ELEMENTS(OFFS) EQ 0 THEN BEGIN
      OFFS=OFF
    ENDIF ELSE BEGIN
      OFFS=[OFFS,OFF ]
    ENDELSE
  ENDFOR
  IF N_ELEMENTS(OFFS) EQ 0 THEN RETURN  ;NO OFFSETS FOUND IN FILE
  OFFS=REFORM(OFFS)
  NDEL=0
  NADD=N_ELEMENTS(OFFS)
  CASE STRUPCASE(TYPE) OF
    'OFFSET': BEGIN
      IF PTR_VALID(ST.OFFSETS) THEN BEGIN
        IND=-1
        FOR I=0,N_ELEMENTS(OFFS)-1 DO BEGIN
          POS=WHERE(STRUPCASE(OFFS[I]) EQ STRUPCASE(*ST.OFFSETS))
          IF POS[0] NE -1 THEN BEGIN
            ;PRINT,'Skipping... ',OFFS[I]
            NDEL=NDEL+1
            CONTINUE
          ENDIF
          IF IND[0] EQ -1 THEN BEGIN
            IND=I
          ENDIF ELSE BEGIN
            IND=[IND,I]
          ENDELSE
        ENDFOR
        IF IND[0] NE -1 THEN BEGIN
          NADD=N_ELEMENTS(IND)
          OFFS=[OFFS[IND],*ST.OFFSETS]
          ST.OFFSETS=PTR_NEW(REFORM(OFFS))
        ENDIF ELSE BEGIN
          NADD=0
          GOTO,NO_NEW_OFFPS
        ENDELSE
      ENDIF ELSE BEGIN
        ST.OFFSETS = PTR_NEW(REFORM(OFFS))
      ENDELSE
      
      
      
    ;WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_VALUE=OFFS,/NO_COPY
    ;WIDGET_CONTROL, ST.LST_OFFSET_ID, SET_UVALUE=OFFS
    END
    'PSDECAY': BEGIN
      IF PTR_VALID(ST.PSDECAYS) THEN BEGIN
        IND=-1
        FOR I=0,N_ELEMENTS(OFFS)-1 DO BEGIN
          POS=WHERE(STRUPCASE(OFFS[I]) EQ STRUPCASE(*ST.PSDECAYS))
          IF POS[0] NE -1 THEN BEGIN
            PRINT,'Skipping... ',OFFS[I]
            NDEL=NDEL+1
            CONTINUE
          ENDIF
          IF IND[0] EQ -1 THEN BEGIN
            IND=I
          ENDIF ELSE BEGIN
            IND=[IND,I]
          ENDELSE
        ENDFOR
        IF IND[0] NE -1 THEN BEGIN
          NADD=N_ELEMENTS(IND)
          OFFS=[OFFS[IND],*ST.PSDECAYS]
          ST.PSDECAYS=PTR_NEW(REFORM(OFFS))
        ENDIF ELSE BEGIN
          NADD=0
          GOTO,NO_NEW_OFFPS
        ENDELSE
      ENDIF ELSE BEGIN
        ST.PSDECAYS = PTR_NEW(REFORM(OFFS))
      ENDELSE
      
      
      
    ;WIDGET_CONTROL, ST.LST_PSDECAY_ID, SET_VALUE=OFFS
    ;WIDGET_CONTROL, ST.LST_PSDECAY_ID, SET_UVALUE=OFFS
    END
    ELSE: BEGIN
      PRINT,'Wrong type:',TYPE
      RETURN
    END
  ENDCASE
  
  NO_NEW_OFFPS:
  ;STOP
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_OFFPS_ARR,EV
  IGPS_UPDATE_DRAW_NEU, EV
  STR=[TYPE+' events imported from '+FILE+'.', '', $
    STRTRIM(NADD,2)+' new events have been imported.', '', $
    STRTRIM(NDEL,2)+' records have been discarded.','']
  MSGBOX,STR,TITLE='iGPS',DIALOG_PARENT=EV.TOP,/INFO
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_UPDATE_OFFPS_ARR,EV, TYPE=TYPE

  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST,/NO_COPY
  
  IF N_ELEMENTS(TYPE) EQ 0 THEN BEGIN
    TYPE=[0,1] ;DEFAULT UPDATE BOTH
  ;TYPE = 0, UPDATE ONLY OFFSET
  ;TYPE = 1, UPDATE ONLY PSDECAY
  ENDIF
  
  POS_OFF=WHERE(TYPE EQ 0)
  ;DECOMPOSE OFFSET LINE INTO ARRAY
  IF POS_OFF[0] NE -1 THEN BEGIN
    IF PTR_VALID(ST.OFFSETS) THEN BEGIN
      OFFS=STRARR(N_ELEMENTS(*ST.OFFSETS))
      FOR OI=0, N_ELEMENTS(*ST.OFFSETS)-1 DO BEGIN
        OFF=STRSPLIT((*ST.OFFSETS)[OI],'-',/EXTRACT)
        ;OFFS=[OFFS, STRUPCASE( STRJOIN(OFF[0:2],'-') )]
        OFFS[OI]= STRUPCASE( STRJOIN(OFF[0:2],'-') )
      ENDFOR;
      ;OFFS=OFFS[1:*];
      OFFARR = STR_LINES2ARR(OFFS, '-')
      ST.OFFS=PTR_NEW(OFFARR)
    ENDIF ELSE BEGIN
      ST.OFFS=PTR_NEW()
    ENDELSE
  ENDIF
  
  POS_PS=WHERE(TYPE EQ 1)
  IF POS_PS[0] NE -1 THEN BEGIN
    IF PTR_VALID(ST.PSDECAYS) THEN BEGIN
      PSDECAYS=STRARR(N_ELEMENTS(*ST.PSDECAYS))
      FOR OI=0, N_ELEMENTS(*ST.PSDECAYS)-1 DO BEGIN
        PSDECAY=STRSPLIT((*ST.PSDECAYS)[OI],'-',/EXTRACT)
        ;PSDECAYS=[PSDECAYS, STRUPCASE( STRJOIN(PSDECAY[0:2],'-') )]
        PSDECAYS[OI]=STRUPCASE( STRJOIN(PSDECAY[0:2],'-') )
      ENDFOR;
      ;PSDECAYS=PSDECAYS[1:*];
      PSARR = STR_LINES2ARR(PSDECAYS, '-')
      ST.PSS=PTR_NEW(PSARR)
    ENDIF ELSE BEGIN
      ST.PSS=PTR_NEW()
    ENDELSE
  ENDIF
  
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  
  ID = WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_OFFSET_CKB_UPDATE_LIST')
  IS_UPDATE_OFFSET_LIST=WIDGET_INFO(ID,/BUTTON_SET)
  IF POS_OFF[0] NE -1 && IS_UPDATE_OFFSET_LIST THEN IGPS_PANEL_OFFSET_SORT,EV
  ID = WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_PSDECAY_CKB_UPDATE_LIST')
  IS_UPDATE_PSDECAY_LIST=WIDGET_INFO(ID,/BUTTON_SET)
  IF POS_PS[0] NE -1 && IS_UPDATE_PSDECAY_LIST THEN IGPS_PANEL_PSDECAY_SORT,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_BTN_SAVEAS, EV, APPEND=APPEND
  ;STOP
  TYPE='OFFSET'
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF NOT PTR_VALID(ST.OFFSETS) THEN BEGIN
    MSGBOX, 'No offset!', TITLE='iGPS', /ERROR, DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  
  RE_SEL_OUT_OFFSET:
  FILE=DIALOG_PICKFILE(/WRITE,FILTER=[['*.def'],['iGPS Offset/Psdecay File (*.def)']])
  IF FILE EQ '' THEN RETURN
  ;HELP,APPEND
  IF FILE_TEST(FILE,/REGULAR) && (N_ELEMENTS(APPEND) LE 0 || APPEND EQ 0) THEN BEGIN
    YN=MSGBOX('File already exist! Overwrite it?',/QUESTION)
    IF YN EQ 'No' THEN GOTO, RE_SEL_OUT_OFFSET
  ENDIF
  CD, GETPATHNAME(FILE)
  
  OFFS=*ST.OFFSETS
  
  IF N_ELEMENTS(APPEND) GT 0 && APPEND EQ 1 THEN BEGIN
    OPENW, FID, FILE, /GET_LUN,/APPEND
  ENDIF ELSE BEGIN
    OPENW, FID, FILE, /GET_LUN
  ENDELSE
  ;;HEADERS
  WRITE_SYS_INFO,FID,PROG='iGPS:PSDECAY',SRC=PATH
  PRINTF,FID,'# OFFSETS ADDED BY iGPS'
  ;;
  ;;SYNTAX:
  ;;  OFFSET 7odm 2006.0397 n 2006 015 -0.0019 +/- 0.0013
  FOR OI=0,N_ELEMENTS(OFFS)-1 DO BEGIN
    OFF=OFFS[OI]
    TMP=STRSPLIT(OFF,'-',/EXTRACT)
    SITE=TMP[0]
    DECYR=DOUBLE(TMP[2])
    YR=FIX(DECYR)
    CMDSTR="DOY,'"+STRTRIM(DECYR,2)+"Y',DAY_OF_YEAR=DOYR"
    DUMMY=EXECUTE(CMDSTR)
    NEU=TMP[1]
    PRINTF, FID, TYPE, SITE,DECYR,NEU,YR,DOYR, $
      FORMAT='(1X,A,1X,A,1X,F10.5,1X,A1,1X,I4,1X,I03)'
  ENDFOR
  FREE_LUN, FID
  MSGBOX, 'Done!', TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_BTN_APPEND, EV
  ON_IGPS_PANEL_OFFSET_BTN_SAVEAS, EV, APPEND=1
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OFFSET_BTN_TIP, EV
  STR=['','Define the time of all kinds of offsets.', $
    '', $
    '* If the input time series is "SIO NEU", you could input the imbeded epochs by checking the button "+ SIO/NEU Offset".',$
    '* Select the components (north, east, and up) for offset events.',$
    '* Click the "New" radio button to define the offset in seperate plotting window.',$
    '* Click the "Del" radio button to delete the offset. The nearest offset will be deleted!',$
    '* "Clear" will delete all offsets. Be careful! No warnings.',$
    '']
  MSGBOX, STR, TITLE='iGPS:Offset/Jump/Discontinuity/Shift Events Selector', $
    GROUP_LEADER=EV.TOP,/INFO
    
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OUTLIER_BTN_OK, EV
  ;INPUT:
  ;		RAW TIME SERIES.
  ;

  ;ALGORITHM CHANGED.
  ;NOW, 1. CALL *iGPS_DETECT_OUTLIERS* TO FIND OUTLIERS. 2.GET OUTLIERS
  ;  POSITIONS AND DELETE THEM FROM SERIES. 3.SAVE RESULT. LOOP FOR EACH SITE
  ;  IN SITE_LIST.
  ;
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) THEN RETURN
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  CKB_OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PREVIEW')
  PREVIEW=WIDGET_INFO(ID,/BUTTON_SET)
  
  ;OUTPUT FILE SUFFIX
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_SUFFIX_TXT')
  WIDGET_CONTROL, ID, GET_VALUE=SFX
  SFX=STRTRIM(SFX[0],2)
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  FILES=*ST.FILES
  NFS=0
  NFO=0
  FOR SI=0,N_ELEMENTS(INDEX)-1 DO BEGIN
    FILE=FILES[INDEX[SI]]
    OFILE=OPATH+PATH_SEP()+DESUFFIX(GETFILENAME(FILE))+SFX+'.'+GETFILESUFFIX(FILE)
    
    IF FILE_TEST(OFILE,/REGULAR) && CKB_OVERWRITE EQ 0 THEN BEGIN
      PRINT,'[iGPS:OUTLIER]Output file already exist. Skipped ['+OFILE+'].', FORMAT='(A)'
      NFS=NFS+1
      CONTINUE
    ENDIF
    NFO=NFO+1
    
    SITE=SITES_USE[SI]
    PRINT,'[iGPS:OUTLIER]Processing ',SITE
    IGPS_UPDATE_LBL_STATUS_BUSY, EV, DIRECTION=(SI MOD 4), PERCENT=FIX((SI+1D0)/N_ELEMENTS(INDEX)*1D2)
    ;ON_IGPS_BTN_LOAD, EV, SITE=SITE,UPDATE=UPDATE
    ON_IGPS_BTN_LOAD,EV,SIT_ID=INDEX[SI],UPDATE=UPDATE
    ;continue
    IGPS_DETECT_OUTLIERS, EV
    ;DO NOT LOAD THE SERIES AGAIN!!
    ;THE LOAD PROCESS WILL DESTROY ALL EXISTING OUTLIERS.
    ;TO PLOT THOSE FOUND OUTLIERS, ANOTHER PLOT PROCEDURE SHOULD BE APPLIED.
    
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    IND_NEU=ST.IND_NEU
    IND_TIME=ST.IND_TIME
    DATA=*ST.DATA_RAW
    TIME_AXES_VAL=*ST.TIME_AXES_VAL
    AXEST=REFORM(TIME_AXES_VAL)
    IND_NEUERR=ST.IND_NEUERR
    FOR NEUI=0,N_ELEMENTS(IND_NEU)-1 DO BEGIN
      IF PTR_VALID((*ST.OUTLIERS)[NEUI]) THEN BEGIN
        INDS=[*((*ST.OUTLIERS)[NEUI])]
        INDS=INDS[SORT(INDS)]
        INDS=INDS[UNIQ(INDS)]
        IF NEUI EQ 0 THEN BEGIN
          INDSS=PTR_NEW(INDS)
        ENDIF ELSE BEGIN
          INDSS=[INDSS,PTR_NEW(INDS)]
        ENDELSE
      ENDIF ELSE BEGIN
        IF NEUI EQ 0 THEN BEGIN
          INDSS=PTR_NEW()
        ENDIF ELSE BEGIN
          INDSS=[INDSS,PTR_NEW()]
        ENDELSE
      ENDELSE
    ENDFOR
    ;
    ;FIRST PLOT THE TIME SERIES
    IF PREVIEW EQ 1 THEN BEGIN
      WINDOW, 0, XSIZE=900, YSIZE=699, /PIXMAP
      !P.MULTI=[0,1,3]
      FOR NEUI=0, N_ELEMENTS(IND_NEU)-1 DO BEGIN
        PLOT,TIME_AXES_VAL, DATA[IND_NEU[NEUI],*]*ST.SF, BACKGROUND='FFFFFF'X, $
          COLOR='000000'X, PSYM=ST.PSYM, $
          YRANGE=[MIN(DATA[IND_NEU[NEUI],*]),MAX(DATA[IND_NEU[NEUI],*])], $
          /NODATA
          
        IF ST.ERROR_BAR EQ 1 &&  (ST.IND_NEUERR)[NEUI] NE -1 THEN BEGIN
          YU=DATA[IND_NEU[NEUI],*]+DATA[IND_NEUERR[NEUI],*]
          YL=DATA[IND_NEU[NEUI],*]-DATA[IND_NEUERR[NEUI],*]
        ENDIF ELSE BEGIN
          YU=DATA[IND_NEU[NEUI],*];+DATA[IND_NEUERR[NEUI],*]
          YL=DATA[IND_NEU[NEUI],*];-DATA[IND_NEUERR[NEUI],*]
        ENDELSE
        
        
        AXEST=DATA[IND_TIME,*]
        CAPLEN=ST.CAPLEN
        ERRPLOT,AXEST,YL*ST.SF,YU*ST.SF,COLOR='0000AA'X
        ;        FOR J=0,N_ELEMENTS(YU)-1 DO BEGIN
        ;          OPLOT,[ AXEST[J],AXEST[J] ],[ YU[J],YL[J] ]*ST.SF, COLOR='0000AA'X
        ;          OPLOT,[ AXEST[J]-CAPLEN,AXEST[J]+CAPLEN ],[ YU[J],YU[J] ], COLOR='0000FF'X
        ;          OPLOT,[ AXEST[J]-CAPLEN,AXEST[J]+CAPLEN ],[ YL[J],YL[J] ], COLOR='0000AA'X
        ;        ENDFOR
        OPLOT,TIME_AXES_VAL, DATA[IND_NEU[NEUI],*]*ST.SF,COLOR='00FF00'X
        IF PTR_VALID(INDSS[NEUI]) THEN BEGIN
          INDS=*INDSS[NEUI]
          IF INDS[0] NE -1 THEN BEGIN
            OPLOT,REFORM((*ST.TIME_AXES_VAL)[INDS]), REFORM(DATA[IND_NEU[NEUI],INDS])*ST.SF, $
              COLOR='FF0000'X, PSYM=ST.PSYM
          ENDIF
        ENDIF
      ENDFOR  ;END-OF-NEUI
      JFILE=OPATH+PATH_SEP()+DESUFFIX(GETFILENAME(FILE))+SFX+'.jpg'
      ;PRINT,JFILE
      T = TVRD(TRUE=1)
      WRITE_JPEG, JFILE, T, TRUE=1, QUALITY=100
      !P.MULTI=0
      WDELETE, 0
    ENDIF  ;END-OF-PREVIEW
    
    ;stop
    INDS=-1
    FOR NEUI=0, N_ELEMENTS(IND_NEU)-1 DO BEGIN
      IF PTR_VALID((INDSS)[NEUI]) THEN BEGIN
        ;;IF NEUI EQ 0 THEN BEGIN
        ;  A BUG WAS FOUND ON SEP-25-2009. TIAN.
        ;    THE ABOVE CODE WAS INCOMPLETE FOR EXTRACT OUTLIERS. WHEN THE FIRST COMPONENT DOES NOT CONTAIN
        ;    OUTLIERS (WHILE OTHERS DO), THEN THE PROGRAM CANNOT DELETE THOSE OTHER OUTLIERS.
        IF NEUI EQ 0 || INDS[0] EQ -1 THEN BEGIN
          INDS=*INDSS[NEUI]
        ENDIF ELSE BEGIN
          INDS=[INDS,*INDSS[NEUI]]
        ENDELSE
      ENDIF
    ENDFOR
    ;
    ;OUTPUT TO FILE
    ;HOW TO DELETE THOSE OUTLIERS POINTS FROM VARIABLE DATA?
    IF N_ELEMENTS(INDS) GT 0 && INDS[0] NE -1 THEN BEGIN
      INDS=INDS[SORT(INDS)]
      INDS=INDS[UNIQ(INDS)]
      
      ;
      INDS_REM=INV_IND(INDS, TOP=N_ELEMENTS(DATA[0,*]))
      IF INDS_REM[0] EQ -1 THEN CONTINUE
      ODATA=DATA[*,INDS_REM]
    ;2012APR24, TIANYF
    ;BUG FIXED
    ;   WHEN THE FIRST EPOCH IS OUTLIER, IT REMAINS IN THE TIME SERIES.
    ;
    ;      ODATA=DATA[*,0:(INDS[0]-1 > 0)]
    ;      FOR OI=1, N_ELEMENTS(INDS)-1 DO BEGIN
    ;        IF INDS[OI]-INDS[OI-1] LE 1 THEN CONTINUE
    ;        IF INDS[OI] GE N_ELEMENTS(DATA[0,*]) THEN CONTINUE
    ;        ODATA=[ [ODATA], [ DATA[*,INDS[OI-1]+1:INDS[OI]-1] ] ]
    ;      ENDFOR
    ;      IF INDS[OI-1] LE N_ELEMENTS(DATA[0,*])-1-1 THEN BEGIN
    ;        ODATA = [ [ODATA], [ DATA[*,INDS[OI-1]+1:*] ] ]
    ;      ENDIF
    ENDIF ELSE BEGIN
      ODATA=DATA
    ENDELSE
    HEADER=''
    IF PTR_VALID(ST.HEADER) THEN HEADER=*ST.HEADER
    ;stop
    IF HEADER[0] NE '' THEN BEGIN
      HEADER=['#<<',HEADER]
    ENDIF ELSE BEGIN
      HEADER='#<<'
    ENDELSE
    ;stop
    WRITE_SIO, OFILE, DATA=ODATA, HEADERS=HEADER, FMT=ST.FMT, $
      PROG='iGPS:OUTLIER+WRITE_SIO', $
      SRC=FILE, $
      USER=USER, $
      FORCE_FMT=1
  ;return
  ENDFOR ;END-OF-SITE
  
  MSGBOX, ['Done!', $
    '',$
    STRTRIM(NFO,2)+' files have been processed.', $
    STRTRIM(NFS,2)+' output files already exist and not overwritten!', $
    ''], $
    TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OUTLIER_BTN_TIP, EV
  STR=['','Remove outliers.', $
    '', $
    'Nikolaisis [2002], Dong et al.[2006].',$
    '']
  MSGBOX, STR, TITLE='iGPS', GROUP_LEADER=EV.TOP, /INFO
  
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OUTLIER_CKB_B, EV
  IDA = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_CKB_A')
  IDB = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_CKB_B')
  IDC = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_CKB_C')
  IDD = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_CKB_D')
  
  CASE EV.ID OF
    IDB: BEGIN
      ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_TXT_NRMS')
      WIDGET_CONTROL, ID, SENSITIVE=EV.SELECT
    END
    IDC: BEGIN
      ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_TXT_NIQR')
      WIDGET_CONTROL, ID, SENSITIVE=EV.SELECT
      ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_TXT_IQR_WIN')
      WIDGET_CONTROL, ID, SENSITIVE=EV.SELECT
    END
    IDD: BEGIN
      ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_OUTLIER_TXT_FET')
      WIDGET_CONTROL, ID, SENSITIVE=EV.SELECT
    END
    ELSE: BEGIN
      PRINT,''
    END
  ENDCASE
  
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;HELP, ST.OVERPLOT_OUTLIER,ST.DATA
  IF (NOT PTR_VALID(ST.DATA)) OR ST.OVERPLOT_OUTLIER NE 1 THEN RETURN
  
  IGPS_DETECT_OUTLIERS, EV
  IGPS_UPDATE_DRAW_NEU,EV
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_OUTLIER_CKB_PREVIEW, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ST.PANEL_OUTLIER_CKB_PREVIEW=EV.SELECT
  IS_RETURN=0
  IF (NOT PTR_VALID(ST.DATA)) OR ST.OVERPLOT_OUTLIER NE 1 THEN BEGIN
    IS_RETURN=1
  ENDIF
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST,/NO_COPY
  ;HELP, ST.OVERPLOT_OUTLIER,ST.DATA
  IF IS_RETURN THEN RETURN
  
  IGPS_DETECT_OUTLIERS, EV
  IGPS_UPDATE_DRAW_NEU,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PLOT_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) THEN RETURN
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_PLOT_DP_FMT')
  SEL=WIDGET_INFO(ID,/DROPLIST_SELECT)
  WIDGET_CONTROL,ID,GET_VALUE=FMTS
  FORMAT=STRTRIM(FMTS[SEL],2)
  
  FOR SI=0,N_ELEMENTS(SITES_USE)-1 DO BEGIN
    SITE=SITES_USE[SI]
    PRINT,'[iGPS:PLOT]Creating plot for site:'+SITE+'.', $
      FORMAT='(A)'
    ;
    ;ON_IGPS_BTN_LOAD, EV, SITE=SITE, UPDATE=UPDATE
    ON_IGPS_BTN_LOAD,EV,SIT_ID=INDEX[SI],UPDATE=UPDATE
    
    ;PRINT, SITE
    
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    
    FILE=(*ST.FILES)[INDEX[SI]]
    IND_NEU=ST.IND_NEU
    IND_TIME=ST.IND_TIME
    DATA=*ST.DATA_RAW
    TIME_AXES_VAL=*ST.TIME_AXES_VAL
    AXEST=REFORM(TIME_AXES_VAL)
    IND_NEUERR=ST.IND_NEUERR
    OFILE=OPATH+PATH_SEP()+DESUFFIX(GETFILENAME(FILE))+'.jpg'
    PLOT_SIO, FILE, OFILE, FORMAT=FORMAT
  ENDFOR ;END-OF-SITE
  
  MSGBOX,'Done! '+STRTRIM(N_ELEMENTS(SITES_USE),2)+' sites plotted.', $
    TITLE='iGPS', DIALOG_PARENT=EV.TOP,/INFO
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PLOT_BTN_TIP, EV
  STR=['Purpose:', $
    '  Plot Time Series.', $
    '', $
    'Steps:', $
    '  1.Select an input path;', $
  '  2.Select sites (support CTRL and SHIFT);', $
  '  3.Select output image format;', $
  '  4.Select an output path;', $
  '  5.Hit OK button to go.', $
    '']
  MSGBOX, STR, GROUP_LEADER=EV.TOP, TITLE='iGPS',/INFO
  
END



;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
FUNCTION ON_IGPS_PANEL_PLOT_RAD_TYPE, EV
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_PLOT_BASE_NN')
  ID2=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_PLOT_BASE_NN_2')
  CASE EV.VALUE OF
    0: BEGIN
      WIDGET_CONTROL, ID, MAP=0
      WIDGET_CONTROL, ID, SCR_YSIZE=1
    END
    1: BEGIN
      WIDGET_CONTROL, ID, MAP=1
      GEOM=WIDGET_INFO(ID2,/GEOMETRY)
      ;HELP,GEOM,/ST
      WIDGET_CONTROL, ID, SCR_YSIZE=GEOM.SCR_YSIZE
    END
  ENDCASE
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_LST_PSDECAYS_DBC, EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_PSDECAY_LST_PSDECAYS')
  WIDGET_CONTROL,ID,GET_UVALUE=PSDECAYS
  SITE=STRMID(PSDECAYS[EV.INDEX],0,4)
  ;PRINT,SITE
  ON_IGPS_BTN_LOAD, EV, SITE=SITE
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_CKB_SIO_NEU_HANDLER, EV
  ON_IGPS_PANEL_PSDECAY_CKB_SIO_NEU, EV
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE, INDEX=INDEX) NE 0 THEN RETURN
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  ON_IGPS_BTN_LOAD, EV, FILE=(*ST.FILES)[LAST(INDEX)]
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_CKB_SIO_NEU, EV, OPT=OPT
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_SEL, INDEX=INDEX) NE 0 THEN RETURN
  IF N_ELEMENTS(SITES_SEL) LT 1 THEN BEGIN
    MSGBOX,'Please select ONE site first!',/ERROR,TITLE='iGPS',DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  SITE=LAST(SITES_SEL)
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  
  IF N_ELEMENTS(OPT) LE 0 THEN BEGIN
    OPT=EV.SELECT
  ENDIF
  
  IF OPT EQ 0 THEN BEGIN
    ;DELETE EXISTING JUMPS FROM OFFSET ARRAY
    ;  NEED TO REVISE THE OFFSET ARRAY STRUCT
    IF NOT PTR_VALID(ST.PSDECAYS) THEN RETURN
    ;TMP1=''
    ;STOP
    SIO_POSS=INTARR(N_ELEMENTS(*ST.PSDECAYS))
    TMP1=STRARR(N_ELEMENTS(*ST.PSDECAYS))
    FOR I=0ULL, N_ELEMENTS(*ST.PSDECAYS)-1 DO BEGIN
      TMP=STRSPLIT((*ST.PSDECAYS)[I],'-',/EXTRACT)
      ;PRINT,TMP
      IF N_ELEMENTS(TMP) GE 4 && STRUPCASE(TMP[3]) EQ 'SIO' && STRUPCASE(TMP[0]) EQ STRUPCASE(SITE) THEN BEGIN
        ;PRINT, STRUPCASE(TMP[0]) , STRUPCASE(SITE)
        SIO_POSS[I]=1
      ENDIF
      TMP=STRUPCASE(STRJOIN(TMP[0:2],'-'))
      TMP1[I]=TMP
    ENDFOR
    ;STOP
    IF TOTAL(SIO_POSS) EQ 0 THEN RETURN
    IND=WHERE(SIO_POSS NE 1)
    ;TMP1=TMP1[1:*]
    ;IF PTR_VALID(ST.PSDECAYS) THEN PTR_FREE,ST.PSDECAYS
    IF IND[0] EQ -1 THEN BEGIN
      ST.PSDECAYS = PTR_NEW()
    ENDIF ELSE BEGIN
      ST.PSDECAYS = PTR_NEW(REFORM((*ST.PSDECAYS)[IND]))
    ENDELSE
    
    
  ENDIF ELSE BEGIN
    ;GET CURRENT FILE
  
    FILE=LAST((*ST.FILES)[INDEX])
    
    ;RETURN
    ;
    QUERY_SIO, FILE, PSDECAY_N=PSDECAY_N, PSDECAY_E=PSDECAY_E, PSDECAY_U=PSDECAY_U
    ;PRINT, OFFSET_N, OFFSET_E, OFFSET_U
    ;stop
    PSS=''
    IF N_ELEMENTS(PSDECAY_N) GE 4 THEN BEGIN
      FOR I=0, N_ELEMENTS(PSDECAY_N[0,*])-1 DO BEGIN
        IF PSDECAY_N[3,I] EQ -9999 THEN CONTINUE
        PS=STRJOIN([SITE,'N',STRTRIM(PSDECAY_N[3,I],2),'SIO'],'-')
        PSS = [PSS, PS]
      ENDFOR
    ENDIF
    
    IF N_ELEMENTS(PSDECAY_E) GE 4 THEN BEGIN
      FOR I=0, N_ELEMENTS(PSDECAY_E[0,*])-1 DO BEGIN
        IF PSDECAY_E[3,I] EQ -9999 THEN CONTINUE
        PS=STRJOIN([SITE,'E',STRTRIM(PSDECAY_E[3,I],2),'SIO'],'-')
        PSS = [PSS, PS]
      ENDFOR
    ENDIF
    
    IF N_ELEMENTS(PSDECAY_U) GE 4 THEN BEGIN
      FOR I=0, N_ELEMENTS(PSDECAY_U[0,*])-1 DO BEGIN
        IF PSDECAY_U[3,I] EQ -9999 THEN CONTINUE
        PS=STRJOIN([SITE,'U',STRTRIM(PSDECAY_U[3,I],2),'SIO'],'-')
        PSS = [PSS, PS]
      ENDFOR
    ENDIF
    
    IF N_ELEMENTS(PSS) LE 1 THEN RETURN ;NO OFFSETS
    PSS = PSS[1:*]
    ;PRINT,PSS
    
    IF NOT PTR_VALID(ST.PSDECAYS) THEN BEGIN
      ST.PSDECAYS=PTR_NEW(REFORM(PSS))
    ENDIF ELSE BEGIN
      TMP1=''
      FOR I=0, N_ELEMENTS(*ST.PSDECAYS)-1 DO BEGIN
        TMP=STRSPLIT((*ST.PSDECAYS)[I],'-',/EXTRACT)
        TMP=STRUPCASE(STRJOIN(TMP[0:2],'-'))
        TMP1=[TMP1,TMP]
      ENDFOR
      TMP1=TMP1[1:*]
      FOR I=0, N_ELEMENTS(PSS)-1 DO BEGIN
        TMP0=STRSPLIT(PSS[I],'-',/EXTRACT)
        TMP0=STRUPCASE(STRJOIN(TMP0[0:2],'-'))
        POS=WHERE(TMP1 EQ TMP0)
        ;STOP
        IF POS[0] NE -1 THEN BEGIN
          PRINT,' Already exists. skipped '+TMP0
          CONTINUE
        ENDIF
        ST.PSDECAYS=PTR_NEW(REFORM([PSS[I],*ST.PSDECAYS]))
      ENDFOR
    ENDELSE
    
  ENDELSE
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_PSDECAY_LST_PSDECAYS')
  IF PTR_VALID(ST.PSDECAYS) THEN BEGIN
    WIDGET_CONTROL, ID, SET_VALUE=*ST.PSDECAYS
  ENDIF ELSE BEGIN
    WIDGET_CONTROL, ID, SET_VALUE=''
  ENDELSE
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_OFFPS_ARR,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_BTN_DEL,EV
  ;STOP
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  IF NOT PTR_VALID(ST.PSDECAYS) THEN BEGIN
    MSGBOX,'No psdecay definition available!',TITLE='iGPS',/ERROR,DIALOG_PARENT=EV.TOP
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    RETURN
  ENDIF
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_PSDECAY_LST_PSDECAYS')
  SEL=WIDGET_INFO(ID,/LIST_SELECT)
  IF SEL[0] EQ -1 THEN BEGIN
    MSGBOX,'No psdecay definition selected!',TITLE='iGPS',/ERROR,DIALOG_PARENT=EV.TOP
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    RETURN
  ENDIF
  ;HELP,*ST.PSDECAYS,/ST
  ;PRINT,(*ST.PSDECAYS)[SEL]
  ;IF NO SORTING, THE SEL EQUALS THE LOCATION IN ST.PSDECAYS.
  ;HOWEVER, IF ANY SORTING, THEY ARE DIFFERENT.
  WIDGET_CONTROL,ID,GET_UVALUE=PSDECAYS_SORT
  SEL_ST=SEL
  FOR SI=0ULL,N_ELEMENTS(SEL)-1 DO BEGIN
    TMP=WHERE(*ST.PSDECAYS EQ PSDECAYS_SORT[SEL[SI]])
    SEL_ST[SI]=TMP
  ENDFOR
  IND_REM=INV_IND(SEL_ST,TOP=N_ELEMENTS(*ST.PSDECAYS))
  IF IND_REM[0] NE -1 THEN BEGIN
    PSDECAYS=(*ST.PSDECAYS)[IND_REM]
    ST.PSDECAYS=PTR_NEW(PSDECAYS)
  ;PSDECAYSTR=STRING(PSDECAYS,FORMAT='(F10.5,"~",F10.5)')
  ;WIDGET_CONTROL, ID, SET_VALUE=PSDECAYS
  ;WIDGET_CONTROL, ID, SET_UVALUE=PSDECAYS
  ENDIF ELSE BEGIN
    ;WIDGET_CONTROL, ID, SET_VALUE=''
    ;WIDGET_CONTROL, ID, SET_UVALUE=''
    ST.PSDECAYS=PTR_NEW()
  ENDELSE
  ;HELP,*ST.PSDECAYS,/ST
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  IGPS_UPDATE_OFFPS_ARR,EV, TYPE=1
  
  ;STOP
  
  CURSEL=(SEL[0]) < N_ELEMENTS(IND_REM)-1
  ;HELP,CURSEL
  CURSEL=(CURSEL[0]) > 0
  WIDGET_CONTROL, ID, SET_LIST_SELECT=CURSEL
  
  IGPS_UPDATE_DRAW_NEU,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
FUNCTION ON_IGPS_PANEL_PSDECAY_BTN_SORT,EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST,/NO_COPY
  ST.PS_SORT=EV.VALUE
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  IGPS_PANEL_PSDECAY_SORT,EV
  IGPS_UPDATE_OFFPS_ARR,EV,TYPE=1 ;ONLY UPDATE PSDECAY
  RETURN,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_PANEL_PSDECAY_SORT,EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST,/NO_COPY
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_PSDECAY_LST_PSDECAYS')
  IF ~ PTR_VALID(ST.PSDECAYS) THEN BEGIN
    WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
    WIDGET_CONTROL,ID,SET_VALUE=''
    WIDGET_CONTROL,ID,SET_UVALUE=''
    RETURN
  ENDIF
  PSDECAYS=*ST.PSDECAYS
  PSDECAYS=STR_LINES2ARR(PSDECAYS,'-')
  SORT_TYPE=ST.PS_SORT
  IF SORT_TYPE EQ 0 THEN BEGIN
    PSDECAYS=*ST.PSDECAYS
  ENDIF ELSE BEGIN
    IF SORT_TYPE EQ 1 THEN BEGIN
      IND=SORT(STRUPCASE(PSDECAYS[SORT_TYPE-1,*]))
    ENDIF ELSE BEGIN
      IND=SORT(PSDECAYS[SORT_TYPE-1,*])
    ENDELSE
    PSDECAYS=(*ST.PSDECAYS)[IND]
  ENDELSE
  
  ;ST.PSDECAYS=PTR_NEW(PSDECAYS)
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  
  WIDGET_CONTROL,ID,SET_VALUE=PSDECAYS,/NO_COPY
  WIDGET_CONTROL,ID,SET_UVALUE=PSDECAYS,/NO_COPY
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_BTN_CLEAR, EV
  ;STOP
  ;;MSGBOX,'NEW OFFSET'
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ST.PSDECAYS = PTR_NEW()
  ;PSDECAY=''
  ;WIDGET_CONTROL, ST.LST_PSDECAY_ID, SET_UVALUE=PSDECAY
  ;WIDGET_CONTROL, ST.LST_PSDECAY_ID, SET_VALUE=PSDECAY
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_OFFPS_ARR,EV, TYPE=1
  IGPS_UPDATE_DRAW_NEU, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_CKB_UPDATE_LIST, EV
  ;HELP,EV,/ST
  IF EV.SELECT EQ 0 THEN RETURN ;DO NOTHING
  
  IGPS_PANEL_PSDECAY_SORT,EV
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_BTN_SAVEAS, EV, APPEND=APPEND
  IF IGPS_CHECK_PATH(EV,PATH=PATH) THEN RETURN
  TYPE='PSDECAY'
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF NOT PTR_VALID(ST.PSDECAYS) THEN BEGIN
    MSGBOX, 'No post-seismic decay has been defined!', TITLE='iGPS', /ERROR, DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  RE_SEL_OUT_PSDECAY:
  FILE=DIALOG_PICKFILE(/WRITE,FILTER=[['*.def'],['iGPS Offset/Psdecay File (*.def)']])
  IF FILE EQ '' THEN RETURN
  IF FILE_TEST(FILE,/REGULAR) && (N_ELEMENTS(APPEND) LE 0 || APPEND EQ 0) THEN BEGIN
    YN=MSGBOX('File already exist! Overwrite it?',/QUESTION)
    IF YN EQ 'No' THEN GOTO, RE_SEL_OUT_PSDECAY
  ENDIF
  CD, GETPATHNAME(FILE)
  
  PSDECAYS=*ST.PSDECAYS
  
  IF N_ELEMENTS(APPEND) GT 0 && APPEND EQ 1 THEN BEGIN
    OPENW, FID, FILE, /GET_LUN,/APPEND
  ENDIF ELSE BEGIN
    OPENW, FID, FILE, /GET_LUN
  ENDELSE
  
  ;;HEADERS
  ;PRINTF,FID,'# PSDECAYS ADDED BY TIAN'
  WRITE_SYS_INFO,FID,PROG='iGPS:PSDECAY',SRC=PATH
  ;;
  ;;SYNTAX:
  ;;  7odm 2006.0397 n 2006 015 -0.0019 +/- 0.0013
  FOR OI=0,N_ELEMENTS(PSDECAYS)-1 DO BEGIN
    PSDECAY=PSDECAYS[OI]
    TMP=STRSPLIT(PSDECAY,'-',/EXTRACT)
    SITE=TMP[0]
    DECYR=DOUBLE(TMP[2])
    YR=FIX(DECYR)
    CMDSTR="DOY,'"+STRTRIM(DECYR,2)+"Y',DAY_OF_YEAR=DOYR"
    DUMMY=EXECUTE(CMDSTR)
    NEU=TMP[1]
    PRINTF, FID, TYPE, SITE,DECYR,NEU,YR,DOYR, $
      FORMAT='(1X,A,1X,A,1X,F10.5,1X,A1,1X,I4,1X,I03)'
  ENDFOR
  FREE_LUN, FID
  MSGBOX, 'Done!', TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_BTN_APPEND, EV
  ON_IGPS_PANEL_PSDECAY_BTN_SAVEAS, EV, APPEND=1
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_SET_LIST_CUR, EV
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_SEL, INDEX=INDEX) NE 0 THEN RETURN
  IF N_ELEMENTS(SITES_SEL) LT 1 THEN BEGIN
    MSGBOX,'Please select ONE site first!',/ERROR,TITLE='iGPS',DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  SITE=LAST(SITES_SEL)
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_PSDECAY_LST_PSDECAYS')
  WIDGET_CONTROL,ID,GET_UVALUE=PSDECAYS
  ;HELP, PSDECAYS
  
  IF PSDECAYS[0] EQ '' THEN BEGIN ;NONE PSDECAY
    WIDGET_CONTROL,ID,SET_UVALUE=PSDECAYS,/NO_COPY
    RETURN
  ENDIF
  
  ;CHECK WHETHER ANY ITEMS FOR CURRENT SITE
  TMP=STR_LINES2ARR(PSDECAYS,'-')
  SITES=STRUPCASE( REFORM(TMP[0,*]) )
  POS=WHERE( SITES EQ STRUPCASE(SITE) )
  IF POS[0] EQ -1 THEN BEGIN  ;NO PSDECAY FOR CURRENT SITE
    WIDGET_CONTROL,ID,SET_UVALUE=PSDECAYS,/NO_COPY
    RETURN
  ENDIF
  
  WIDGET_CONTROL,ID,SET_UVALUE=PSDECAYS,/NO_COPY
  WIDGET_CONTROL, ID, SET_LIST_SELECT=POS[0]
  
;  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST,/NO_COPY
;  IF NOT PTR_VALID(ST.PSDECAYS) THEN BEGIN  ;NONE PSDECAY
;    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST,/NO_COPY
;    RETURN
;  ENDIF
;  POS=STRPOS(STRUPCASE(*ST.PSDECAYS),STRUPCASE(SITE))
;  IND=WHERE(POS NE -1)
;  IF IND[0] EQ -1 THEN BEGIN  ;NO PSDECAY FOR CURRENT SITE
;    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST,/NO_COPY
;    RETURN
;  ENDIF
;
;  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST,/NO_COPY
  
;STOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_PSDECAY_BTN_TIP, EV
  STR=['','Define the time of strong earthquake which induces post-seismic relaxation.', $
    '', $
    '* If the input time series is "SIO NEU", you could input the imbeded epochs by checking the button "+ SIO/NEU Psdecay".',$
    '* Select the components (north, east, and up) for post-seismic decay events.',$
    '* Select and delete.',$
    '* "Clear" will delete all post-seismic events. Be careful! No warnings.',$
    '']
  MSGBOX, STR, TITLE='iGPS', $
    GROUP_LEADER=EV.TOP,/INFO
    
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SELECTOR_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) NE 0 THEN RETURN
  IF IGPS_CHECK_LIST_SITE(EV,SELECT=SITES_SEL,ALL=SITES_LIST,INDEX=INDEX) NE 0 THEN RETURN
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  FILES=*ST.FILES
  
  
  
  ;GET THE TIME SPAN LENGTH SETTINGS
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_LENGTH_MIN')
  WIDGET_CONTROL,ID,GET_VALUE=LENMIN
  LENMIN=STRTRIM(LENMIN[0],2)
  IF LENMIN NE '' THEN BEGIN
    LENMIN=DOUBLE(LENMIN)
  ENDIF ELSE BEGIN
    LENMIN=0D
  ENDELSE
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_LENGTH_MAX')
  WIDGET_CONTROL,ID,GET_VALUE=LENMAX
  LENMAX=STRTRIM(LENMAX[0],2)
  IF LENMAX NE '' THEN BEGIN
    LENMAX=DOUBLE(LENMAX)
  ENDIF ELSE BEGIN
    LENMAX=0D
  ENDELSE
  ;
  ;PRINT,'DATA SPAN:',LENMIN,LENMAX
  
  
  ;GET FROM ~ TO YEARS
  ;GET THE TIME SPAN LENGTH SETTINGS
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_YR_FROM')
  WIDGET_CONTROL,ID,GET_VALUE=YRFROM
  YRFROM=STRTRIM(YRFROM[0],2)
  IF YRFROM NE '' THEN BEGIN
    YRFROM=DOUBLE(YRFROM)
  ENDIF ELSE BEGIN
    YRFROM=0D
  ENDELSE
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_YR_TO')
  WIDGET_CONTROL,ID,GET_VALUE=YRTO
  YRTO=STRTRIM(YRTO[0],2)
  IF YRTO NE '' THEN BEGIN
    YRTO=DOUBLE(YRTO)
  ENDIF ELSE BEGIN
    YRTO=0D
  ENDELSE
  ;
  ;PRINT,'Data Span:',YRFROM,YRTO
  
  
  ;GET THE DATA GAP DEFINITION
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_GAP')
  WIDGET_CONTROL,ID,GET_VALUE=GAP
  GAP=STRTRIM(GAP[0],2)
  IF GAP EQ '' THEN BEGIN
    GAP=0D
  ENDIF ELSE BEGIN
    GAP=DOUBLE(GAP)
  ENDELSE
  ;PRINT,'Gap Threshold:',GAP
  
  ;PRINT, 'DATA TPYE: ', ST.TS_TYPE
  
  
  ;COPY OR MOVE?
  ID =WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_SELECTOR_CKB_DEL_SRC')
  IS_DEL_SRC = WIDGET_INFO(ID,/BUTTON_SET)
  ID =WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_OVERWRITE')
  IS_OVERWRITE = WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  
  
  FOR SI=0,N_ELEMENTS(INDEX)-1 DO BEGIN
    SITE=SITES_SEL[SI]
    FILE=FILES[INDEX[SI]]
    OFILE = OPATH+PATH_SEP()+GETFILENAME(FILE)
    IF IS_OVERWRITE NE 1 && FILE_TEST(OFILE,/REGULAR) THEN BEGIN
      PRINT,'[iGPS:SELECTOR]WARNING: already exist! Skip '+OFILE+'.',$
        FORMAT='(A)'
      CONTINUE
    ENDIF
    
    ON_IGPS_BTN_LOAD,EV,SIT_ID=INDEX[SI],UPDATE=UPDATE
    WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
    DATA=*ST.DATA
    FIRSTEOPCH=DATA[ST.IND_TIME,0]
    LASTEPOCH=LAST(DATA[ST.IND_TIME,*])
    ;CHECK THE MINIMUM TIME SPAN
    DATABAK = DATA
    IF YRFROM EQ 0 AND YRTO EQ 0 THEN GOTO, NOFROMTO
    FIRSTEPOCH = DATA[ST.IND_TIME,0]
    LASTEPOCH = LAST(DATA[ST.IND_TIME,*])
    
    IF YRFROM NE 0 THEN BEGIN
    ;IF YRFROM LT FIRSTEPOCH THEN CONTINUE
    ENDIF
    IF YRTO NE 0 THEN BEGIN
    ;IF YRTO GT LASTEPOCH THEN CONTINUE
    ENDIF
    
    IND=-1
    IF YRFROM NE 0 AND YRTO NE 0 THEN BEGIN
      IND=WHERE(DATA[ST.IND_TIME,*] GE YRFROM AND DATA[ST.IND_TIME,*] LE YRTO)
    ENDIF
    IF YRFROM NE 0 AND YRTO EQ 0 THEN BEGIN
      IND=WHERE(DATA[ST.IND_TIME,*] GE YRFROM)
    ENDIF
    IF YRFROM EQ 0 AND YRTO NE 0 THEN BEGIN
      IND=WHERE(DATA[ST.IND_TIME,*] LE YRTO)
    ENDIF
    
    IF IND[0] EQ -1 THEN CONTINUE
    
    DATA = DATA[*,IND]
    
    NOFROMTO:
    ;NUMBER OF OBSERVATIONS CHECK
    ;IF N_ELEMENTS(DATA[0,*]) LT LENMIN*365.25 THEN BEGIN
    ;time span
    ;PRINT,LAST(DATA[0,*])-FIRST(DATA[0,*])
    IF LAST(DATA[0,*])-FIRST(DATA[0,*]) LT LENMIN THEN BEGIN
      ;PRINT,'SKIP '+STRTRIM(N_ELEMENTS(DATA[0,*]),2)+' '+FILES[FI]
      CONTINUE
    ENDIF
    
    
    ;CHECK DATA GAP
    IF GAP NE 0 THEN BEGIN
      MJD=*ST.TIME_AXES_VAL_MJD
      NDAYS=N_ELEMENTS(DATA[0,*])
      TMP=MJD[1:NDAYS-1]-MJD[0:NDAYS-2]
      GAP_SZ_MAX=0
      ;NUMBER OF GAPS
      POS=WHERE(TMP GT 1)
      IF POS[0] EQ -1 THEN BEGIN
        NGAP=0
      ENDIF ELSE BEGIN
        NGAP=N_ELEMENTS(POS)
        GAP_SZ_MAX=MAX(TMP)
      ENDELSE
      
      IF GAP NE 0 AND MAX(TMP) GT GAP THEN BEGIN
        ;PRINT,'SKIP [MAX GAP:'+STRTRIM(MAX(TMP),2)+' '+FILES[FI]
        CONTINUE
      ENDIF
    ;PRINT,'#GAP:',NGAP,'  LARGEST: ',MAX(TMP),'DAYS;  MEAN:',MEAN(TMP),FILES[FI]
    ;CONTINUE
    ENDIF
    
    DAT=DATA
    
    ;COPY OR MOVE?
    IF IS_DEL_SRC EQ 0 THEN BEGIN
      PRINT,'[iGPS:SELECTOR]Copying '+OFILE+'.',FORMAT='(A)'
      WIDGET_CONTROL, ST.LBL_ID, SET_VALUE='Copying '+OFILE+'.'+(IS_OVERWRITE? 'Overwritten! ':'')+' ...'
      FILE_COPY,FILE,OFILE,/OVERWRITE
      IF ST.TS_TYPE EQ 'JPL LAT/LON/RAD' THEN BEGIN
        FILE=DESUFFIX(FILE)+'.lon'
        OFILE = OPATH+PATH_SEP()+GETFILENAME(FILE)
        FILE_COPY,FILE,OFILE
        FILE=DESUFFIX(FILE)+'.rad'
        OFILE = OPATH+PATH_SEP()+GETFILENAME(FILE)
        FILE_COPY,FILE,OFILE
      ENDIF
    ENDIF ELSE BEGIN
      PRINT,'[iGPS:SELECTOR]Moving '+OFILE+'.',FORMAT='(A)'
      WIDGET_CONTROL, ST.LBL_ID, SET_VALUE='Moving '+OFILE+' ...'
      FILE_MOVE,FILE,OFILE,OVERWRITE=IS_OVERWRITE
    ENDELSE
    
  ENDFOR ;END-OF-LOOP FOR EACH SITE
  
  WIDGET_CONTROL, ST.LBL_ID, SET_VALUE=ST.LBL_TEXT
  MSGBOX,'Done!',/INFO, DIALOG_PARENT=EV.TOP
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SELECTOR_BTN_TIP, EV
  STR=['','Selec sites with length, gag, and span criterions.', $
    '', $
    '* Minumum and maximum length.',$
    '* Starting and ending time. (Do NOT cut the series if longer.)',$
    '* Maximum days of data gap.',$
    '']
  MSGBOX, STR, TITLE='iGPS', $
    GROUP_LEADER=EV.TOP,/INFO
    
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SELECTOR_GEOG_BTN_FROMMAP, EV
  IMVIEWER,RECT=RECT,TOOL=4
  ;PRINT,RECT
  IF RECT[0] EQ -9999 THEN RETURN
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_GEOG_TXT_LEFT')
  WIDGET_CONTROL,ID,SET_VALUE=STRTRIM(RECT[0],2)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_GEOG_TXT_RIGHT')
  WIDGET_CONTROL,ID,SET_VALUE=STRTRIM(RECT[1],2)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_GEOG_TXT_BOTTOM')
  WIDGET_CONTROL,ID,SET_VALUE=STRTRIM(RECT[2],2)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_GEOG_TXT_TOP')
  WIDGET_CONTROL,ID,SET_VALUE=STRTRIM(RECT[3],2)
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SELECTOR_GEOG_BTN_OK,EV
  ;ENSURE SIO NEU FORMAT
  ;IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) NE 0 THEN RETURN
  IF IGPS_CHECK_LIST_SITE(EV,SELECT=SITES_USE,ALL=SITES_LIST,INDEX=INDEX) NE 0 THEN RETURN
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_GEOG_COORDS_FILE')
  WIDGET_CONTROL,ID,GET_VALUE=COORDS_FILE
  COORDS_FILE=STRTRIM(COORDS_FILE[0],2)
  IF COORDS_FILE EQ '' THEN BEGIN
    MSGBOX,'No site coordinates file!',/ERROR,TITLE='iGPS ERROR',DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_GEOG_TXT_TOP')
  WIDGET_CONTROL,ID,GET_VALUE=YMAX
  YMAX=DOUBLE(YMAX[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_GEOG_TXT_BOTTOM')
  WIDGET_CONTROL,ID,GET_VALUE=YMIN
  YMIN=DOUBLE(YMIN[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_GEOG_TXT_RIGHT')
  WIDGET_CONTROL,ID,GET_VALUE=XMAX
  XMAX=DOUBLE(XMAX[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_GEOG_TXT_LEFT')
  WIDGET_CONTROL,ID,GET_VALUE=XMIN
  XMIN=DOUBLE(XMIN[0])
  ;PRINT,XMIN,XMAX,YMIN,YMAX
  ;RETURN
  ;COPY OR MOVE?
  ID =WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_SELECTOR_GEOG_CKB_DEL_SRC')
  IS_DEL_SRC = WIDGET_INFO(ID,/BUTTON_SET)
  ID =WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_OVERWRITE')
  IS_OVERWRITE = WIDGET_INFO(ID,/BUTTON_SET)
  
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  
  ;COPY FILES
  ;STOP
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Querying coordinates for '+STRTRIM(N_ELEMENTS(SITES_USE),2)+' sites. Please wait.'
  READ_NET, COORDS_FILE,SITE=SITES_USE,LLH=LLHS
  
  FOR SI=0, N_ELEMENTS(SITES_USE)-1 DO BEGIN
    PRINT, '[SELECTOR BY GEOGRAPHIC]Processing '+SITES_USE[SI]+'..'
    WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Processing '+SITES_USE[SI]+'..'
    WIDGET_CONTROL,ST.LST_ID,SET_LIST_SELECT=INDEX[SI]
    LLH=LLHS[*,SI]
    IF FINITE(LLH[0]) NE 1 THEN BEGIN
      PRINT,'[SELECTOR BY GEOGRAPHIC]WARNING:no coordiantes for '+SITES_USE[SI]
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=''
      CONTINUE
    ENDIF
    LON=LLH[0]
    LAT=LLH[1]
    IF LON GT 180 THEN LON=LON-360
    IF LON LT -180 THEN LON=180+LON
    
    IF LON LT XMIN || LON GT XMAX || LAT LT YMIN || LAT GT YMAX THEN BEGIN
      PRINT,'[SELECTOR BY GEOGRAPHIC]Out of range:'+SITES_USE[SI],LON,LAT
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Out of range:'+SITES_USE[SI]+$
        STRING(LON,LAT,FORMAT='(2(",",F10.5))')
      CONTINUE
    ENDIF
    
    ;IND=WHERE(SITES_LIST EQ SITES_USE[SI])
    IND=INDEX[SI]
    ;STOP
    
    FILES=(*ST.FILES)[IND]
    FOR FI=0, N_ELEMENTS(FILES)-1 DO BEGIN
      FILE = FILES[FI]
      OFILE = OPATH+PATH_SEP()+GETFILENAME(FILE)
      IF IS_OVERWRITE NE 1 && FILE_TEST(OFILE,/REGULAR) THEN BEGIN
        PRINT,'[SELECTOR BY GEOGRAPHIC]WARNING: already exist! ['+OFILE+']'
        WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='WARNING: already exist! ['+OFILE+']'
        CONTINUE
      ENDIF
      IF IS_DEL_SRC EQ 0 THEN BEGIN
        PRINT,'[SELECTOR BY GEOGRAPHIC]Copying... '+OFILE
        WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='WARNING: already exist! ['+OFILE+']'
        FILE_COPY,FILE,OFILE,/OVERWRITE
      ENDIF ELSE BEGIN
        PRINT,'[SELECTOR BY GEOGRAPHIC]Moving... '+OFILE
        WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Moving... '+OFILE
        FILE_MOVE,FILE,OFILE,/OVERWRITE
      ENDELSE
    ENDFOR
  ENDFOR
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
  MSGBOX, 'Done!', TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
  
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SELECTOR_GEOG_BTN_TIP, EV
  STR=['Purpose:', $
    '  Select sites within geographic corners.', $
    '', $
    'Note:', $
    '  *Ranges (top, bottom, left, right) are in decimal degrees.',$
    '  *You can use "from Map" button to open a map window, click+drag and release to ',$
    '   draw a rectangular, then hit OK button to close the window and return ranges.', $
    '   To abort, click Cancel button or just quit.',$
    '']
  MSGBOX, STR, TITLE='iGPS', $
    GROUP_LEADER=EV.TOP,/INFO
    
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SELECTOR_NET_DP_NET,EV
  ;ENSURE SIO NEU FORMAT
  ;IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ID_TXT_SITEFILE = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_SELECTOR_NET_TXT_SITEFILE')
  WIDGET_CONTROL,ID_TXT_SITEFILE, SENSITIVE=EV.INDEX GT 0
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_SELECTOR_NET_DP_NET')
  WIDGET_CONTROL,ID,GET_VALUE=VALS
  SEL=WIDGET_INFO(ID,/DROPLIST_SELECT)
  NET=VALS[EV.INDEX]
  ;PRINT,NET
  IF STRUPCASE(NET) EQ 'ALL' THEN BEGIN
    RETURN
  ENDIF
  IF STRUPCASE(NET) EQ 'OTHER' THEN BEGIN
    FILE=''
  ENDIF ELSE BEGIN
    FILE=FILEPATH(ROOT_DIR=!IGPS_ROOT,SUBDIRECTORY=['tables'],NET+'.sit')
  ENDELSE
  
  WIDGET_CONTROL,ID_TXT_SITEFILE,SET_VALUE=FILE
  
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SELECTOR_NET_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  ;IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) NE 0 THEN RETURN
  IF IGPS_CHECK_LIST_SITE(EV,SELECT=SITES_SEL,ALL=SITES_LIST,INDEX=INDEX) NE 0 THEN RETURN
  
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SELECTOR_NET_DP_NET')
  SEL=WIDGET_INFO(ID,/DROPLIST_SELECT)
  IF SEL GT 0 THEN BEGIN
    ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_SELECTOR_NET_TXT_SITEFILE')
    WIDGET_CONTROL, ID, GET_VALUE=SITEFILE
    SITEFILE = STRTRIM(SITEFILE[0],2)
    IF SITEFILE EQ '' THEN BEGIN
      MSGBOX,'No site file!',/ERROR,TITLE='iGPS',DIALOG_PARENT=EV.TOP
      RETURN
    ENDIF
    ;HELP, SITEFILE
    RDSIT, SITEFILE, SITES=SITES_NET
    ;HELP, SITES_SEL, SITES_NET
    ;PRINT, SITES_SEL
    ;PRINT, SITES_NET
    ;stop
    ;Note: On Mon, Nov 09, 2015  9:38:33 AM by tianyf
    ;  If there are duplicate sites names in SITES_SEL (e.g. bjfs_gps.neu and bjfs_1ps.neu),
    ;  the set_intersect routine will fail to return correct results.
    ;SITES_USE = SET_INTERSECT(STRUPCASE(SITES_SEL), STRUPCASE(SITES_NET))
    ;  Therefore, use the old implementation.
    SITES_USE = SET_INTERSECT2(STRUPCASE(SITES_SEL), STRUPCASE(SITES_NET))
    IF SITES_USE[0] EQ '' THEN BEGIN
      MSGBOX,'No sites found!',TITLE='iGPS',/ERROR,DIALOG_PARENT=EV.TOP
      RETURN
    ENDIF
  ENDIF ELSE BEGIN
    SITES_USE=SITES_SEL
  ENDELSE
  ;stop
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  ;EXCLUDE PS-DECAY SITES
  
  ;COPY OR MOVE?
  ID =WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_SELECTOR_NET_CKB_DEL_SRC')
  IS_DEL_SRC = WIDGET_INFO(ID,/BUTTON_SET)
  ID =WIDGET_INFO(EV.TOP, FIND_BY_UNAME='CKB_OVERWRITE')
  IS_OVERWRITE = WIDGET_INFO(ID,/BUTTON_SET)
  
  
  ;COPY FILES
  ;STOP
  ;HELP,sites_use
  FOR SI=0, N_ELEMENTS(SITES_USE)-1 DO BEGIN
    PRINT, '[iGPS:ON_IGPS_PANEL_SELECTOR_NET_BTN_OK]Searching '+SITES_USE[SI]+'..',FORMAT='(A)'
    ;PRINT,PATH+PATH_SEP()+'*'+SITES_USE[SI]+ST.DT_QUERYSTR
    
    IND=WHERE(STRUPCASE(SITES_LIST) EQ STRUPCASE(SITES_USE[SI]))
    ;+BUG FIXED BY TIANYF ON JUNE 25, 2015
    ;  IF SITE IS NOT IN THE LIST, SKIP
    IF IND[0] EQ -1 THEN CONTINUE
    FILES=(*ST.FILES)[IND]
    FOR FI=0, N_ELEMENTS(FILES)-1 DO BEGIN
      FILE = FILES[FI]
      OFILE = OPATH+PATH_SEP()+GETFILENAME(FILE)
      IF IS_DEL_SRC EQ 0 THEN BEGIN
        PRINT,'[iGPS:ON_IGPS_PANEL_SELECTOR_NET_BTN_OK]Copying '+OFILE+'..',FORMAT='(A)'
        WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Copying '+OFILE+'.'+(IS_OVERWRITE? ' [Overwritten!] ':'')+' ...'
        IF IS_OVERWRITE  THEN BEGIN
          FILE_COPY,FILE,OFILE,/OVERWRITE
        ENDIF ELSE BEGIN
          IF FILE_TEST(OFILE,/REGULAR) EQ 1 THEN BEGIN
            PRINT,'[iGPS:ON_IGPS_PANEL_SELECTOR_NET_BTN_OK]WARNING: already exist! Skip '+OFILE+'!',$
              FORMAT='(A)'
            WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Exist! ['+OFILE+']'
            CONTINUE
          ENDIF ELSE BEGIN
            FILE_COPY,FILE,OFILE
            IF ST.TS_TYPE EQ 'JPL LAT/LON/RAD' THEN BEGIN
              file=desuffix(file)+'.lon'
              OFILE = OPATH+PATH_SEP()+GETFILENAME(FILE)
              FILE_COPY,FILE,OFILE
              file=desuffix(file)+'.rad'
              OFILE = OPATH+PATH_SEP()+GETFILENAME(FILE)
              FILE_COPY,FILE,OFILE
            ENDIF
          ENDELSE
        ENDELSE
      ENDIF ELSE BEGIN
        PRINT,'[iGPS:ON_IGPS_PANEL_SELECTOR_NET_BTN_OK]Moving '+OFILE+'..',FORMAT='(A)'
        WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Moving '+OFILE+'.'+(IS_OVERWRITE? ' [Overwritten!] ':'')+' ...'
        IF FILE_TEST(OFILE,/REGULAR) && IS_OVERWRITE NE 1 THEN BEGIN
          WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Exist! ['+OFILE+'] Skipped.'
          CONTINUE
        ENDIF
        FILE_MOVE,FILE,OFILE,OVERWRITE=IS_OVERWRITE
      ENDELSE
    ENDFOR
  ENDFOR
  MSGBOX,'Done!',DIALOG_PARENT=EV.TOP,TITLE='iGPS',/INFO
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SELECTOR_NET_BTN_TIP, EV
  STR=['','Select Sites by Sites List File.', $
    '', $
    'iGPS Site List File (*.sit) format:',$
    ' * non-blank first character line is comment', $
    ' * 4-char site names seperated by spaces',$
    ' * GPS Network files stillNOT ready.',$
    '',$
    'Example:',$
    '* test sites list file',$
    ' bjfs shao wuhn',$
    ' algo areq alrt',$
    '']
  MSGBOX, STR, TITLE='Select Sites by Network', $
    GROUP_LEADER=EV.TOP, WTITLE='iGPS',/INFO
    
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SMOOTH_BTN_OK,EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEXS) NE 0 THEN RETURN
  IF IGPS_CHECK_PATH(EV,PATH=PATH,OPATH=OPATH) NE 0 THEN RETURN
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_UPDPLOT')
  UPDATE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PREVIEW')
  PREVIEW=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_SZWIN')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  SZWIN=FIX(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_FROM')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  IF TMP[0] EQ '' THEN BEGIN
    DYR_FROM=-9999D0
  ENDIF ELSE BEGIN
    DYR_FROM=DOUBLE(TMP[0])
  ENDELSE
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_TO')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  IF TMP[0] EQ '' THEN BEGIN
    DYR_TO=-9999D0
  ENDIF ELSE BEGIN
    DYR_TO=DOUBLE(TMP[0])
  ENDELSE
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_N_MIN')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  NMIN=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_N_MAX')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  NMAX=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_E_MIN')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  EMIN=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_E_MAX')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  EMAX=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_U_MIN')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  UMIN=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_U_MAX')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  UMAX=DOUBLE(TMP[0])
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  FILES=*ST.FILES
  SF=ST.SF
  ;PRINT,'SF:',SF
  ;PRINT,DYR_FROM,DYR_TO
  ;PRINT,NMIN,NMAX,EMIN,EMAX,UMIN,UMAX
  
  NEUSTR=['N','E','U']
  NFO=0
  NFS=0
  FOR SI=0,N_ELEMENTS(SITES_USE)-1 DO BEGIN
    SITE=SITES_USE[SI]
    FILE=FILES[INDEXS[SI]]
    WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='[SMOOTH]Processing site:'+SITE
    PRINT,'[iGPS:SMOOTH]Processing site: '+SITE+' ['+GETFILENAME(FILE)+';'+ $
    FILE+'].'
    ON_IGPS_BTN_LOAD, EV, SIT_ID=INDEXS[SI],UPDATE=UPDATE
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    ;stop
    OFILE=OPATH+PATH_SEP()+GETFILENAME(FILE)
    IF OVERWRITE EQ 0 && FILE_TEST(OFILE,/REGULAR) THEN BEGIN
      STR='[iGPS:SMOOTH]Already exist. Skip '+OFILE+'.'
      PRINT,STR,FORMAT='(A)'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=STR
      NFS=NFS+1
      CONTINUE
    ENDIF
    NFO=NFO+1
    IND_NEU=ST.IND_NEU[WHERE(ST.IND_NEU NE -1)]
    IND_TIME=ST.IND_TIME
    DATA=*ST.DATA
    IF N_ELEMENTS(DATA[0,*]) LT SZWIN THEN BEGIN
      PRINT,'[iGPS:SMOOTH]WARNING:time series length is smaller than smooth window width!'
      CONTINUE
    ENDIF
    TIME_AXES_VAL=*ST.TIME_AXES_VAL
    
    IF DYR_FROM NE -9999D0 THEN BEGIN
      XMIN=DYR_FROM
    ENDIF ELSE BEGIN
      XMIN=MIN(TIME_AXES_VAL)
    ENDELSE
    
    IF DYR_TO NE -9999D0 THEN BEGIN
      XMAX=DYR_TO
    ENDIF ELSE BEGIN
      XMAX=MAX(TIME_AXES_VAL)
    ENDELSE
    
    
    ODATA=DATA
    IF PREVIEW THEN BEGIN
      WINDOW,XSIZE=1000,YSIZE=800,TITLE=FILE,/PIXMAP
      !P.MULTI=[0,1,3]
    ENDIF
    FOR I=0,2 DO BEGIN
      ODATA[3+I,*]=SMOOTH(DATA[3+I,*],SZWIN,/EDGE_TRUNCATE )
      CASE I OF
        0: BEGIN
          YRANGE=[NMIN,NMAX]
        END
        1: BEGIN
          YRANGE=[EMIN,EMAX]
        END
        2: BEGIN
          YRANGE=[UMIN,UMAX]
        END
      ENDCASE
      IF PREVIEW THEN BEGIN
        ;PRINT,XMIN,XMAX,YRANGE
        ;HELP,ST,/ST
        PLOT,DATA[0,*],DATA[3+I,*]*SF,BACKGROUND='FFFFFF'X,COLOR='000000'X,TITLE=SITE, $
          XRANGE=[XMIN,XMAX], $
          YRANGE=YRANGE, $
          PSYM=ST.PSYM, $
          CHARSIZE=2,/NODATA,$
          XSTYLE=1, $
          YTITLE=NEUSTR[I]+'(mm)',$
          YSTYLE=1
        OPLOT,DATA[0,*],DATA[3+I,*]*SF,COLOR='00FF00'X,PSYM=ST.PSYM
        OPLOT,ODATA[0,*],ODATA[3+I,*]*SF,COLOR='FF0000'X,THICK=2
      ENDIF
    ENDFOR
    
    
    
    OFILE=OPATH+PATH_SEP()+GETFILENAME(FILE)
    ;OFILE=OPATH+PATH_SEP()+desuffix(GETFILENAME(FILE))+'Vmf1trns4.jpg'
    STR=['Boxcar Filtering Width: '+STRTRIM(SZWIN,2)+' days']
    WRITE_SIO,OFILE,DATA=ODATA,USER=USER,PROG='iGPS:SMOOTH',HEADER=['#<<',*ST.HEADER], $
      SRC=FILE,COMMENT=STR
    IF PREVIEW THEN BEGIN
      !P.MULTI=0
      IMG=TVRD(TRUE=1)
      JFILE=DESUFFIX(OFILE)+'.jpg'
      WRITE_JPEG,JFILE,IMG,TRUE=1
    ENDIF
    
  ENDFOR
  
  MSGBOX,['Done!',$
    STRTRIM(NFO,2)+' files have been processed.', $
    STRTRIM(NFS,2)+' output files already exist and not overwritten!', $
    ''],$
    DIALOG_PARENT=EV.TOP,TITLE='iGPS',/INFO
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_SMOOTH_BTN_TIP, EV
  STR=['Smooth the residual position time series.','', $
    'Purpose:',$
    '  +Some signals are more evident in the smoothed plots.',$
    '  +To compare station position time series in fixed axises.',$
    '',$
    'Steps:', $
    '  1.Select the input path.',$
    '  2.Select a subset of sites (hold down SHIFT or CTRL keys when click sites).',$
    '  3.Set the Boxcar filtering winddow width (in days).',$
    '  4.Set the  time span for output plots (in decimal years; leave blank for plotting the whole time series',$
  '  5.Set y-axis plot ranges for north, east, and vertical components, respectively.',$
    '  6.Select the output path.',$
    '  7.Click OK button to run.',$
    
    '']
  MSGBOX, STR, TITLE='iGPS: Smooth Position Time Series', $
    GROUP_LEADER=EV.TOP,/INFO
    
END
;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_STAT_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  IF IGPS_CHECK_PATH(EV,PATH=PATH) NE 0 THEN RETURN
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN RETURN
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_STAT_FILE')
  WIDGET_CONTROL,ID,GET_VALUE=OFILE
  OFILE=STRTRIM(OFILE[0],2)
  IF OFILE EQ '' THEN BEGIN
    MSGBOX,'No output file!',/ERROR,TITLE='iGPS',DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Working...'
  OBS_STAT, FILES=(*ST.FILES)[INDEX], OFILE=OFILE, STATUS=STATUS
  
  IF STATUS THEN BEGIN
    MSGBOX, 'Time series span statistics process failed!', $
      TITLE='iGPS', /ERROR, DIALOG_PARENT=EV.TOP
  ENDIF ELSE BEGIN
    MSGBOX, 'Time series span statistics process completed!', $
      TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
  ENDELSE
  
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_STAT_BTN_OK_SDDN, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  IF IGPS_CHECK_PATH(EV,PATH=PATH) NE 0 THEN RETURN
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE,INDEX=INDEX) NE 0 THEN RETURN
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_STAT_FILE')
  WIDGET_CONTROL,ID,GET_VALUE=OFILE
  OFILE=STRTRIM(OFILE[0],2)
  IF OFILE EQ '' THEN BEGIN
    MSGBOX,'No output file!',/ERROR,TITLE='iGPS',DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Working...
  OBS_START_END, FILES=(*ST.FILES)[INDEX], OFILE=OFILE
  
  MSGBOX, 'Time series span statistics process completed!', $
    TITLE='iGPS', /INFO, DIALOG_PARENT=EV.TOP
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_STAT_BTN_TIP, EV
  STR=['Purpose:', $
    '  Create statistics information about Time Series.', $
    '', $
    'Steps:',$
    '  1.Select input data path. Only "SIO NEU" data type is supported at present.',$
    '  2.Select sites;', $
  '  3.Select output file [*.spa].',$
    '  4.Click the "OK:..." buttons', $
    '',$
    'Sample Outputs:',$
    '  1. Sample output for "site 1 0 1...":',$
    '   51542                          ',$
    'SITE |                            ',$
    '_____|____________________________...',$
    '     11222222222222222222222222222',$
    '     99000000000000000000000000000',$
    '     99000000000000000000000000000',$
    '     99000000000000000000000000000',$
    '     -----------------------------',$
    '     33000000000000000000000000000',$
    '     66000000000111111111122222222',$
    '     45123456789012345678901234567',$
    '_____|____________________________',$
    'ajac                              ',$
    'bgis *****************************',$
    'cand **** **  ********************',$
    '...', $
    '  ',$
    '  2. Sample output for "site dyrs dyre nepoch":',$
    'ajac       2000.6981       2008.3402        1974',$
    'bgis       1999.9959       2008.3402        2957',$
    'cand       1999.9959       2008.3402        2928',$
    '']
  MSGBOX, STR, TITLE='iGPS', $
    GROUP_LEADER=EV.TOP, WTITLE='iGPS',/INFO
    
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_STACKING_DLIST_ALG, EV
  ;HELP, EV, /ST
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_STACKING_CME_SITES_FILE')
  WIDGET_CONTROL, ID, SENSITIVE=EV.INDEX LE 1
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_STACKING_BTN_SITES_FILE, EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_SITES_FILE')
  WIDGET_CONTROL,ID,GET_VALUE=FILE
  FILE=STRTRIM(FILE[0],2)
  FILE=DIALOG_PICKFILE(TITLE='CME SITES?',FILE=FILE)
  IF FILE EQ '' THEN RETURN
  WIDGET_CONTROL, ID, SET_VALUE=FILE
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_STACKING_CKB_FLT,EV
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='WID_BASE_OUT')
  ;HELP,EV,/ST
  WIDGET_CONTROL,ID,SENSITIVE=EV.SELECT
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_STACKING_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_SEL, INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH) THEN RETURN
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_STACKING_DLIST_ALG')
  SEL = WIDGET_INFO(ID, /DROPLIST_SELECT)
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_STACKING_OUT_CME_FILE')
  WIDGET_CONTROL, ID, GET_VALUE=OFILE
  OFILE  = STRTRIM(OFILE[0], 2)
  IF OFILE EQ '' THEN BEGIN
    MSGBOX, 'No output CME file selected!', TITLE='iGPS', /ERROR, $
      DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_STACKING_CKB_FLT')
  CKB_FLT=WIDGET_INFO(ID,/BUTTON_SET)
  IF CKB_FLT EQ 1 THEN BEGIN
    IF IGPS_CHECK_PATH(EV,OPATH=OPATH) THEN RETURN
  ENDIF
  
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  FILES=*(ST.FILES)
  FILES=FILES[INDEX]
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_STACKING_CME_SITES_FILE')
  WIDGET_CONTROL, ID, GET_VALUE=CMEFILE
  CMEFILE  = STRTRIM(CMEFILE[0], 2)
  ;HELP,CMEFILE
  IF CMEFILE NE '' THEN BEGIN
    RDSIT, CMEFILE, SITES=SITES_NET
    SITES_USE = SET_INTERSECT(STRUPCASE(SITES_SEL), STRUPCASE(SITES_NET), $
      IND0=IND0,IND1=IND1)
    IF SITES_USE[0] EQ '' THEN BEGIN
      MSGBOX,'No CME sites found!',TITLE='iGPS',/ERROR,DIALOG_PARENT=EV.TOP
      RETURN
    ENDIF
    FILES_USE=FILES[IND0]
  ENDIF ELSE BEGIN
    SITES_USE=SITES_SEL
    FILES_USE=FILES
  ENDELSE
  
  ;PRINT,FILES_USE,SITES_USE
  ;RETURN
  STR='[STACKING]Calculating CME for time series...'
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=STR
  CME_CAL_STACKING_NIKOLAIDIS2002,  $
    OFILE=OFILE, $  ;OUTPUT CME FILE
    SITES=SITES_USE, $
    FILES=FILES_USE
    
  IF CKB_FLT THEN BEGIN
    STR='[STACKING]Corrrecting CME for time series...'
    WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=STR
    CME_APPLY_STACKING_NIKOLAIDIS2002, $
      PATH, $
      OPATH, $
      OFILE    ;cme data file
  ENDIF
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
  MSGBOX,'Done!',TITLE='iGPS',DIALOG_PARENT=EV.TOP,/INFO
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_STACKING_BTN_TIP, EV
  STR=['Purpose:', $
    '  Calculate the common-mode error (CME) of regional CGPS network and remove it.', $
    '  Algorithms can be found in Wdowinski et al.[1997], Nikolaidis [2002], etc.',$
    '', $
    'Steps:', $
    '  1.Select an input path;', $
  '  2.Select sites;', $
  '  3.Select site list file which contains site names used to calculate CME;', $
  '    Leave blank to use all selected sites in site list.', $
    '  4.Choose a filtering method;', $
  '    Currently, only regional stacking is supported.', $
    '  5.Select an output file in "Output:" field;', $
  '  6.Hit OK button to go.', $
    '' $
    ]
  MSGBOX, STR, $
    GROUP_LEADER=EV.TOP, TITLE='iGPS', /INFO
    
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_TS_CORR_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_SEL, INDEX=INDEX) NE 0 THEN RETURN
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH) THEN RETURN
  IF IGPS_CHECK_PATH(EV,OPATH=OPATH) THEN RETURN
  
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_TS_CORR_COORDS_FILE')
  WIDGET_CONTROL, ID, GET_VALUE=COORDS_FILE
  COORDS_FILE  = STRTRIM(COORDS_FILE[0], 2)
  IF COORDS_FILE EQ '' THEN BEGIN
    MSGBOX, 'No a priori coordiante file selected!', TITLE='iGPS', /ERROR, $
      DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  
  ;CORRELATION TYPE
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_TS_CORR_DLIST_ALG')
  CORR_TYPE = WIDGET_INFO(ID, /DROPLIST_SELECT) ;0-Concordance correlation; 1-Pearson's correlation
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_TS_CORR_TXT_NETEXT')
  WIDGET_CONTROL, ID, GET_VALUE=NETEXT
  NETEXT  = STRTRIM(NETEXT[0], 2)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_TS_CORR_TXT_ORGEXT')
  WIDGET_CONTROL, ID, GET_VALUE=ORGEXT
  ORGEXT  = STRTRIM(ORGEXT[0], 2)
  ;HELP,NETEXT,ORGEXT
  
  
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  FILES=*(ST.FILES)
  FILES=FILES[INDEX]
  
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  
  ;HELP,OPATH
  ;PRINT,OPATH
  ;RETURN
  STR='[TS_CORR]Calculating inter-station correlations for time series, please wait patiently ...'
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=STR
  TS_CORRELATION,  '',$
    OPATH, $  ;OUTPUT CME FILE
    COORDS_FILE=COORDS_FILE, $
    FILES=FILES, $
    PREFIX_NETWORK=NETEXT, $
    PREFIX_AGENCY=ORGEXT, $
    OVERWRITE=OVERWRITE, $
    CORR_TYPE=CORR_TYPE, $
    TLB=EV.TOP, $
    STATUS=STATUS
    
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
  IF STATUS EQ 1 THEN $
    MSGBOX,'Done!',TITLE='iGPS',DIALOG_PARENT=EV.TOP,/INFO
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_TS_CORR_BTN_TIP, EV
  STR=['Purpose:', $
    '  Calculate the inter-station correlation coefficient for cGPS network.', $
    '  The formular of concordance correlaion can be found in Lin [1989, 2000].',$
    '', $
    'Steps:', $
    '  1.Select an input path;', $
  '  2.Select sites;', $
  '  3.Select a priori coordinate file.', $
    '  4.Choose a corrlation type;', $
  '  5.Specify the network and processing agency names;', $
  '  6.Select an output path;', $
  '  7.Hit OK button to go.', $
    '', $
    '  Five file will be created in the output path:', $
    '  * 2 baseline file, one in angular degree and another in km;', $
  '  * 3 correlation matrix file for the individual component;', $
  '  * 1 SINEX file containing all the above results.', $
    '']
  MSGBOX, STR, $
    GROUP_LEADER=EV.TOP, TITLE='iGPS', /INFO
    
END




;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_CMC_CWSF_BTN_OK, EV
  ;ENSURE SIO NEU FORMAT
  IF IGPS_CHECK_TSTYPE(EV) NE 0 THEN RETURN
  ;GET SITES LIST
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_SEL, INDEX=INDEX) NE 0 THEN RETURN
  IF N_ELEMENTS(SITES_SEL) LT 4 THEN BEGIN
    MSGBOX, 'At least 4 sites should be selected!', TITLE='iGPS', /ERROR, $
      DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  ;STOP
  ;GET IN&OUT PATH
  IF IGPS_CHECK_PATH(EV,PATH=PATH) THEN RETURN
  IF IGPS_CHECK_PATH(EV,OPATH=OPATH) THEN RETURN
  
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_CMC_CWSF_COORDS_FILE')
  WIDGET_CONTROL, ID, GET_VALUE=COORDS_FILE
  COORDS_FILE  = STRTRIM(COORDS_FILE[0], 2)
  IF COORDS_FILE EQ '' THEN BEGIN
    MSGBOX, 'No a priori coordiante file selected!', TITLE='iGPS', /ERROR, $
      DIALOG_PARENT=EV.TOP
    RETURN
  ENDIF
  
  ;CORRELATION TYPE
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_TS_CORR_DLIST_ALG')
  CORR_TYPE = WIDGET_INFO(ID, /DROPLIST_SELECT) ;0-Concordance correlation; 1-Pearson's correlation
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_CMC_CWSF_TXT_NETEXT')
  WIDGET_CONTROL, ID, GET_VALUE=NETEXT
  NETEXT  = STRTRIM(NETEXT[0], 2)
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_CMC_CWSF_TXT_ORGEXT')
  WIDGET_CONTROL, ID, GET_VALUE=ORGEXT
  ORGEXT  = STRTRIM(ORGEXT[0], 2)
  
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_CMC_CWSF_TXT_DMIN')
  WIDGET_CONTROL, ID, GET_VALUE=DMIN
  DMIN  = STRTRIM(DMIN[0], 2)
  POS=STRPOS(DMIN,';')
  IF POS[0] NE -1 THEN DMIN=STRMID(DMIN,0,POS[0])
  ;check whether do the second round of filtering
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='PANEL_CMC_CWSF_TXT_DMIN2')
  WIDGET_CONTROL, ID, GET_VALUE=DMIN2
  DMIN2  = STRTRIM(DMIN2[0], 2)
  POS=STRPOS(DMIN2,';')
  IF POS[0] NE -1 THEN DMIN2=STRMID(DMIN2,0,POS[0])
  PRINT, DMIN2
  IF DMIN EQ DMIN2 THEN BEGIN
    MSGBOX, ['iGPS WARNING:', $
      '  The 2nd dmin cannot equal the 1st dmin!', $
      '', $
      '  Enter a different value or leave it blank.'], $
      /INFO, DIALOG_PARENT=EV.TOP, TITLE='iGPS Warning'
    RETURN
  ENDIF
  ;HELP, DMIN, DMIN2
  ;RETURN
  
  ;HELP,NETEXT,ORGEXT, DMIN
  
  
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  FILES=*(ST.FILES)
  FILES=FILES[INDEX]
  
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_OVERWRITE')
  OVERWRITE=WIDGET_INFO(ID,/BUTTON_SET)
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_PREVIEW')
  PREVIEW=WIDGET_INFO(ID,/BUTTON_SET)
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_CMC_CWSF_CKB_SAV')
  IS_USE_SAV=WIDGET_INFO(ID,/BUTTON_SET)
  
  ;HELP,OPATH
  ;PRINT,OPATH
  
  
  ;RETURN
  ;STOP
  OPATH_CORR=OPATH+PATH_SEP()+'corr'
  SNXFILE=OPATH_CORR+PATH_SEP()+NETEXT+'_'+ORGEXT+'_corr_neu'+'.snx'
  IF IS_USE_SAV EQ 0 || FILE_TEST(SNXFILE) NE 1 THEN BEGIN  ;WHEN NO CORR SNX FILE EXIST
    STR='[CMC_CWSF]Calculating inter-station correlations for time series, please wait patiently ...'
    WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=STR
    IF FILE_TEST(OPATH_CORR) NE 1 THEN FILE_MKDIR, OPATH_CORR
    TS_CORRELATION,  '',$
      OPATH_CORR, $  ;OUTPUT CME FILE
      COORDS_FILE=COORDS_FILE, $
      FILES=FILES+'', $
      PREFIX_NETWORK=NETEXT, $
      PREFIX_AGENCY=ORGEXT, $
      OVERWRITE=OVERWRITE, $
      SNXFILE=SNXFILE, $
      TLB=EV.TOP, $
      IS_USE_SAV=IS_USE_SAV, $
      CORR_TYPE=CORR_TYPE, $
      PREVIEW=PREVIEW, $  ;output baseline-correlation for each site
      ERRSTR=ERRSTR, $
      STATUS=STATUS
  ENDIF ELSE BEGIN
    STATUS=1
  ENDELSE
  ;RETURN
  
  IF STATUS EQ 0 THEN BEGIN
    ;    MSGBOX,'Error when calculating inter-station correlations '+ERRSTR+'', $
    ;      TITLE='iGPS Error',DIALOG_PARENT=EV.TOP,/ERR
    RETURN
  ENDIF
  
  LBL_TEXT='[CMC_CWSF]Extract common-mode signals ...''
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=LBL_TEXT
  
  
  ;use plot settings from smoothing panel
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_SZWIN')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  SZWIN=FIX(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_FROM')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  IF TMP[0] EQ '' THEN BEGIN
    DYR_FROM=-9999D0
  ENDIF ELSE BEGIN
    DYR_FROM=DOUBLE(TMP[0])
  ENDELSE
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_TO')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  IF TMP[0] EQ '' THEN BEGIN
    DYR_TO=-9999D0
  ENDIF ELSE BEGIN
    DYR_TO=DOUBLE(TMP[0])
  ENDELSE
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_N_MIN')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  NMIN=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_N_MAX')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  NMAX=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_E_MIN')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  EMIN=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_E_MAX')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  EMAX=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_U_MIN')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  UMIN=DOUBLE(TMP[0])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='PANEL_SMOOTH_YRANGE_U_MAX')
  WIDGET_CONTROL,ID,GET_VALUE=TMP
  UMAX=DOUBLE(TMP[0])
  
  XRANGE=[DYR_FROM, DYR_TO]
  YRANGES=[[NMIN,NMAX],[EMIN,EMAX],[UMIN,UMAX]]*1D3
  
  
  CMC_CAL_OPTIMAL, $
    GETPATHNAME(FILES[0]), $  ;RESIDUAL PATH
    SNXFILE, $ ;CORRELATION COEFFICIENTS
    OPATH, $  ;OUTPUT CME SERIES PATH
    FILES=FILES+'', $ ;Input files
    SZWIN=SZWIN, XRANGE=XRANGE, YRANGES=YRANGES, $
    DMIN=DMIN, $
    TLB=EV.TOP, $
    SF=ST.SF, $
    OPATH_CMC_RAW=OPATH_CMC_RAW1, $
    opath_flt_raw=opath_flt_raw1, $
    IS_USE_SAV=IS_USE_SAV, $
    PREVIEW=PREVIEW, $  ;output smoothed CMC and filtered time series
    OVERWRITE=OVERWRITE, $
    status=status
    
  ;RETURN
    
  IF DMIN2 NE '' THEN BEGIN
    ;Derive the 2nd CMC
    CMC_CAL_OPTIMAL, $
      GETPATHNAME(FILES[0]), $  ;RESIDUAL PATH
      SNXFILE, $ ;CORRELATION COEFFICIENTS
      OPATH, $  ;OUTPUT CME SERIES PATH
      FILES=FILES+'', $ ;Input files
      SZWIN=SZWIN, XRANGE=XRANGE, YRANGES=YRANGES, $
      DMIN=DMIN2, $
      TLB=EV.TOP, $
      SF=ST.SF, $
      OPATH_CMC_RAW=OPATH_CMC_RAW2, $
      IS_USE_SAV=IS_USE_SAV, $
      PREVIEW=PREVIEW, $  ;output smoothed CMC and filtered time series
      OVERWRITE=OVERWRITE, $
      STATUS=STATUS
      
    ;Calculate the CMC difference
    LBL_TEXT='Calculating the CMC difference time series ...'
    WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=LBL_TEXT
    OPATH_CMC_RAW_DIFF=OPATH+PATH_SEP()+'cmc.diff.'+STRTRIM(DMIN,2)+'-'+STRTRIM(DMIN2,2)
    IF FILE_TEST(OPATH_CMC_RAW_DIFF) NE 1 THEN BEGIN
      FILE_MKDIR, OPATH_CMC_RAW_DIFF
    ENDIF ELSE BEGIN  ;IF ALREADY EXIST, REMOVE OLD FILE FIRST
      FILES_T=FILE_SEARCH(OPATH_CMC_RAW_DIFF+PATH_SEP()+'*.neu', COUNT=NFT)
      FOR FI=0, NFT-1 DO BEGIN
        FILE_DELETE, FILES_T[FI], /VERBOSE
      ENDFOR
    ENDELSE
    TS_MINUSES, OPATH_CMC_RAW1, OPATH_CMC_RAW2, OPATH_CMC_RAW_DIFF, tlb=ev.TOP
    IF PREVIEW THEN $
      NEU_SMOOTH, OPATH_CMC_RAW_DIFF, XRANGE=XRANGE, YRANGE=YRANGES, SF=ST.SF, VERBOSE=0
      
    ;Calculate CMC diff correlations
    LBL_TEXT='Calculating inter-station correlations for the CMC difference time series ...'
    WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=LBL_TEXT
    OPATH_CMC_RAW_DIFF_CORR=OPATH+PATH_SEP()+'cmc.diff.'+STRTRIM(DMIN,2)+'-'+STRTRIM(DMIN2,2)+'.corr'
    IF FILE_TEST(OPATH_CMC_RAW_DIFF_CORR) NE 1 THEN FILE_MKDIR, OPATH_CMC_RAW_DIFF_CORR
    TS_CORRELATION, OPATH_CMC_RAW_DIFF,$
      OPATH_CMC_RAW_DIFF_CORR, $  ;OUTPUT CME FILE
      COORDS_FILE=COORDS_FILE, $
      PREFIX_NETWORK=NETEXT, $
      PREFIX_AGENCY='CMCDIFF', $
      OVERWRITE=1, $
      SNXFILE=SNXFILE, $
      TLB=EV.TOP, $
      IS_USE_SAV=0, $
      CORR_TYPE=CORR_TYPE, $
      PREVIEW=PREVIEW, $  ;output baseline-correlation for each site
      ERRSTR=ERRSTR, $
      STATUS=STATUS
      
    ;stop
    ;Show the clustering tree GUI
    LBL_TEXT='Performing correlation-based clustering ...'
    WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=LBL_TEXT
    CORR_CLUSTER_GUI, vTxtIn=SNXFILE, $
      vTxtRaw=GETPATHNAME(FILES[0]), $
      vTxtFlt=opath_flt_raw1, $
      vTxtCmc=OPATH_CMC_RAW_DIFF
  ENDIF
  
  ;stop
  ;  IF STATUS EQ 1 THEN $
  ;    MSGBOX,'Done!',TITLE='iGPS',DIALOG_PARENT=EV.TOP,/INFO
  
  WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_PANEL_CMC_CWSF_BTN_TIP, EV
  STR=['CMC Extractor', $
    '',$
    'Purpose:', $
    '  Calculate the common-mode component (CMC) for regional CGPS network [and remove it].', $
    '  Algorithms can be found in Tian and Shen [2015, submitted manuscript]',$
    '', $
    'Steps:', $
    '  1.Select an input path;', $
  '  2.Select sites (use "A" button to select all);', $
  '  3.Select a priori coordinate file.', $
    '  4.Choose a corrlation type;', $
  '  5.Specify the network and processing agency names;', $
  '  6.Set the minumum distance (dmin) in angular degrees;', $
  '    If two distances are given, iGPS will perform transient detection.', $
    '  7.Select an output path;', $
  '  8.Hit OK button to go.', $
    '']
    
  MSGBOX, STR, $
    GROUP_LEADER=EV.TOP, TITLE='iGPS', /INFO
    
END



;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_TOIN, EV
  ;HELP, EV, /ST
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_OUT')
  WIDGET_CONTROL,ID,GET_VALUE=OPATH
  OPATH = STRTRIM(OPATH[0],2)
  IF OPATH EQ '' THEN RETURN
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_IN')
  WIDGET_CONTROL,ID,SET_VALUE=OPATH
  IGPS_RESET, EV
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_TOIN_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      VAL='/\'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      VAL='//\\'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Copy value of Output Path to Input Path field.'
    END
  ENDCASE
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='BTN_TOIN')
  WIDGET_CONTROL,ID, SET_VALUE=VAL
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_TOOUT, EV
  ;HELP, EV, /ST
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_IN')
  WIDGET_CONTROL,ID,GET_VALUE=OPATH
  OPATH = STRTRIM(OPATH[0],2)
  IF OPATH EQ '' THEN RETURN
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='TXT_OUT')
  WIDGET_CONTROL,ID,SET_VALUE=OPATH
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_TOOUT_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      VAL='\/'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      VAL='\\//'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Copy value of Input Path to Output Path field.'
    END
  ENDCASE
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='BTN_TOOUT')
  WIDGET_CONTROL,ID, SET_VALUE=VAL
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_OUTLIER, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;
  ST.OVERPLOT_OUTLIER=EV.SELECT
  IF EV.SELECT THEN BEGIN
    IGPS_PANEL_SHOW, EV, OPT='OUTLIER'
    ST.CURPANEL='OUTLIER' ;FIX A BUG ON 2011APR18 TIAN
    IF (~ PTR_VALID(ST.DATA)) || ST.TS_TYPE EQ 'CORRCOEF XY' THEN BEGIN
      WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
      ;PRINT,ST.TS_TYPE
      RETURN
    ENDIF
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
    IGPS_DETECT_OUTLIERS, EV
  ENDIF ELSE BEGIN
    ST.OUTLIERS=PTR_NEW(REPLICATE(PTR_NEW(),3))
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  ENDELSE
  IGPS_UPDATE_DRAW_NEU,EV
  
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='BTN_OUTLIER')
  WIDGET_CONTROL,ID,SET_BUTTON=EV.SELECT,/NO_COPY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_OFFSET,EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  IF EV.SELECT EQ 1 THEN BEGIN
    IGPS_PANEL_SHOW, EV, OPT='OFFSET'
    ST.CURPANEL='OFFSET'
  ENDIF ELSE BEGIN
    IGPS_PANEL_HIDE_ALL, EV
    ST.CURPANEL=''
  ENDELSE
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='BTN_OFFSET')
  WIDGET_CONTROL,ID,SET_BUTTON=EV.SELECT
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  IGPS_UPDATE_DRAW_NEU,EV
  IGPS_OUTPUT_PATH_ONOFF, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_PSDECAY,EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  IF EV.SELECT EQ 1 THEN BEGIN
    IGPS_PANEL_SHOW, EV, OPT='PSDECAY'
    ST.CURPANEL='PSDECAY'
  ENDIF ELSE BEGIN
    IGPS_PANEL_HIDE_ALL, EV
    ST.CURPANEL=''
  ENDELSE
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='BTN_PSDECAY')
  WIDGET_CONTROL,ID,SET_BUTTON=EV.SELECT
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  IGPS_UPDATE_DRAW_NEU,EV
  IGPS_OUTPUT_PATH_ONOFF, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_TREND, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST, /NO_COPY
  ST.OVERPLOT[0]=EV.SELECT
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_DRAW_NEU,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_ANNUAL, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST, /NO_COPY
  ST.OVERPLOT[1]=EV.SELECT
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_CKB_TREND, EV
  IGPS_UPDATE_DRAW_NEU,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_SEMIANNUAL, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST, /NO_COPY
  ST.OVERPLOT[2]=EV.SELECT
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_CKB_TREND, EV
  IGPS_UPDATE_DRAW_NEU,EV
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO IGPS_UPDATE_CKB_TREND, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST, /NO_COPY
  TREND_ON=TOTAL((ST.OVERPLOT)[1:2])
  ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME='CKB_TREND')
  IS_SET=WIDGET_INFO(ID,/BUTTON_SET)
  WIDGET_CONTROL,ID,SENSITIVE=(TREND_ON LE 0)
  IF IS_SET NE 1 && TREND_ON GT 0 THEN BEGIN
    WIDGET_CONTROL,ID,SET_BUTTON=1
    ST.OVERPLOT[0]=1
  ENDIF
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_RAD_RAW, EV
  ;HELP, EV, /ST
  IF EV.SELECT EQ 1 THEN BEGIN
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    ST.DATA_AXES_TYPE='RAW'
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
    IGPS_UPDATE_ST_DATA, EV
    IGPS_UPDATE_DRAW_NEU, EV
  ENDIF
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_RAD_RESID, EV
  IF EV.SELECT EQ 1 THEN BEGIN
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    ST.DATA_AXES_TYPE='RESID'
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
    IGPS_UPDATE_ST_DATA, EV
    IGPS_UPDATE_DRAW_NEU, EV
  ENDIF
END
;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_DP_PSYM, EV
  ;HELP, EV, /ST
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ID=WIDGET_INFO(EV.TOP, FIND_BY_UNAME='DP_PSYM')
  SEL=WIDGET_INFO(ID, /DROPLIST_SELECT)
  IF SEL GT 7 THEN BEGIN
    SEL=-1*(SEL-7)
  ENDIF
  ST.PSYM=SEL
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST
  IGPS_UPDATE_DRAW_NEU, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_ERRORBAR, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  ST.ERROR_BAR=EV.SELECT
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  IGPS_UPDATE_DRAW_NEU,EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_RAD_TIME_DYR, EV
  ;HELP, EV, /ST
  IF EV.SELECT EQ 1 THEN BEGIN
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    ST.TIME_AXES_TYPE='DYR'
    ST.XTICK_FMT=''  ;SET BLANK TO USE SYSTEM DEFAULT
    IS_FROM_TO_FIXED=ST.IS_FROM_TO_FIXED
    ;PRINT,'IS_FROM_TO_FIXED:',IS_FROM_TO_FIXED
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
    ;STOP
    IF IS_FROM_TO_FIXED EQ 1 THEN BEGIN
      IGPS_UPDATE_TXT_FROM_TO, EV
    ENDIF
    IGPS_UPDATE_DRAW_NEU, EV
    IF IS_FROM_TO_FIXED NE 1 THEN BEGIN
      IGPS_UPDATE_TXT_FROM_TO, EV
    ENDIF
  ENDIF
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_RAD_TIME_MJD, EV
  ;stop
  IF EV.SELECT EQ 1 THEN BEGIN
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    ST.TIME_AXES_TYPE='MJD'
    ST.XTICK_FMT='(I5)'
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
    IGPS_UPDATE_TXT_FROM_TO, EV
    IGPS_UPDATE_DRAW_NEU, EV
    IGPS_UPDATE_TXT_FROM_TO, EV
  ENDIF
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_RAD_TIME_JD, EV
  IF EV.SELECT EQ 1 THEN BEGIN
    WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
    ST.TIME_AXES_TYPE='JD'
    ST.XTICK_FMT='(I7)'
    WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
    IGPS_UPDATE_DRAW_NEU, EV
    IGPS_UPDATE_TXT_FROM_TO, EV
  ENDIF
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_FROM_TO, EV
  IF IGPS_CHECK_LIST_SITE(EV,ALL=SITES,SELECT=SITES_USE, INDEX=INDEX) NE 0 THEN RETURN
  ;HELP,SITES
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  WIDGET_CONTROL, ST.ID_FROM, GET_VALUE=FROM
  FROM=DOUBLE(FROM[0])
  WIDGET_CONTROL, ST.ID_TO, GET_VALUE=TO
  TO=DOUBLE(TO[0])
  IF FROM LT 0 || TO LE 0 || FROM GE TO THEN BEGIN
    MSGBOX,'Invalid value!',TITLE='iGPS', DIALOG_PARENT=EV.TOP,/ERROR
    RETURN
  ENDIF
  ST.DRAW_N_XRANGE_VIS_USE=[FROM,TO]
  ST.DRAW_N_XRANGE_VIS=[FROM,TO]
  IF ST.TS_TYPE NE 'CORRCOEF XY' && ST.TS_TYPE NE 'CORRCOEF MAT' $
    && ST.TS_TYPE NE 'POWER SPECTRUM' $
    && ST.TS_TYPE NE 'CATS PSD' THEN BEGIN
    CASE ST.TIME_AXES_TYPE OF
      'DYR': BEGIN
        DECYRS_TO_MJD, FROM, MJD=FROM_MJD
        DECYRS_TO_MJD, TO, MJD=TO_MJD
      END
      'MJD': BEGIN
        FROM_MJD=FROM
        TO_MJD=TO
      END
      'JD': BEGIN
        FROM_MJD=FROM-2400000.5D0
        TO_MJD=TO-2400000.5D0
      END
      ELSE: BEGIN
        RETURN
      END
    ENDCASE
    ST.DRAW_N_XRANGE_VIS=[FROM_MJD,TO_MJD]
  ENDIF
  ;
  
  
  ;HELP, ST, /ST
  ;PRINT,ST.DRAW_N_XRANGE_VIS
  ;PRINT,TMPMIN,TMPMAX
  TS_TYPE=ST.TS_TYPE
  ;;
  ;;SET SLIDER
  ST.SLIDER_PAN_POS = (TOTAL(ST.DRAW_N_XRANGE_VIS_USE)/2D0-MIN(ST.DRAW_N_XRANGE)) $
    /(ST.DRAW_N_XRANGE[1]-ST.DRAW_N_XRANGE[0])*100
  WIDGET_CONTROL, ST.SLIDER_PAN_ID, SET_VALUE=ST.SLIDER_PAN_POS
  ;PRINT, 'Current slider pos:',ST.SLIDER_PAN_POS,TOTAL(ST.DRAW_N_XRANGE_VIS)/2D0-MIN(ST.DRAW_N_XRANGE)
  ;PRINT,(ST.DRAW_N_XRANGE[1]-ST.DRAW_N_XRANGE[0])
  
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_DRAW_NEU, EV
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_FROM_TO_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Zoom to the time range (starting time:left; ending time: right; in decimal years).'
    END
  ENDCASE
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_FROM_TO_FIXED, EV
  IF EV.SELECT EQ 1 THEN BEGIN
    IGPS_UPDATE_TXT_FROM_TO, EV
  ENDIF
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST,/NO_COPY
  ST.IS_FROM_TO_FIXED=EV.SELECT
  ;HELP,ST,/ST
  WIDGET_CONTROL,EV.TOP,SET_UVALUE=ST,/NO_COPY
  ;iGPS_UPDATE_DRAW_NEU,EV
  ;
  ON_IGPS_CKB_FROM_TO_FIXED_ONOFF, EV
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_FROM_TO_FIXED_ONOFF, EV
  CONTROLS=['TXT_FROM','BTN_FROM_TO','TXT_TO' $
    ,'SLD_DRAW_N_POS','BTN_ZOOM_IN','BTN_ZOOM_OUT','BTN_ZOOM_ZERO']
  FOR I=0,N_ELEMENTS(CONTROLS)-1 DO BEGIN
    CMDSTR='ID=WIDGET_INFO(EV.TOP,FIND_BY_UNAME="'+CONTROLS[I]+'")'
    TMP=EXECUTE(CMDSTR)
    WIDGET_CONTROL,ID,SENSITIVE=(~ EV.SELECT)
  ENDFOR
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_CKB_FROM_TO_FIXED_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Fix the X-axis to the left time range in decimal years (but not the Y-axis). '
    END
  ENDCASE
END


;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_SLD_DRAW_N_POS, EV
  ;HELP, EV,/ST
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  IF ST.IS_FROM_TO_FIXED EQ 1 THEN BEGIN
    RETURN
  ENDIF
  IF NOT PTR_VALID(ST.DATA) THEN RETURN
  TSMIN=ST.DRAW_N_XRANGE[0]
  TSMAX=ST.DRAW_N_XRANGE[1]
  POSVAL = EV.VALUE*1D0/100D0*(TSMAX-TSMIN)+TSMIN
  SZWIN=ST.DRAW_N_XRANGE_VIS[1]-ST.DRAW_N_XRANGE_VIS[0]
  
  ;;PRINT, ST.DRAW_N_XRANGE[0], ST.DRAW_N_XRANGE_VIS[0]
  IF ST.DRAW_N_XRANGE[0] EQ ST.DRAW_N_XRANGE_VIS[0] AND  $
    ;;IF ALREADY LEFT EDGE
    POSVAL LE SZWIN+ST.DRAW_N_XRANGE_VIS[0] THEN BEGIN
    RETURN
  ENDIF
  IF ST.DRAW_N_XRANGE[1] EQ ST.DRAW_N_XRANGE_VIS[1] AND  $
    POSVAL GE ST.DRAW_N_XRANGE_VIS[1] -SZWIN THEN BEGIN
    ;;ALREADY RIGHT EDGE
    RETURN
  ENDIF
  
  ;;
  
  TMPMIN=POSVAL-SZWIN/2
  IF TMPMIN LE TSMIN THEN BEGIN
    TMPMIN=TSMIN
    TMPMAX=TSMIN+SZWIN
    GOTO, ENDIT
  ENDIF
  
  TMPMAX=POSVAL+SZWIN/2
  IF TMPMAX GE TSMAX THEN BEGIN
    TMPMAX=TSMAX
    TMPMIN=TSMAX-SZWIN
  ENDIF
  
  ENDIT:
  
  ;PRINT, 'SZWIN:', SZWIN,TMPMIN, TMPMAX
  
  ST.DRAW_N_XRANGE_VIS=[TMPMIN, TMPMAX]
  TS_TYPE=ST.TS_TYPE
  
  IS_FROM_TO_FIXED=ST.IS_FROM_TO_FIXED
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_DRAW_NEU, EV
  IF IS_FROM_TO_FIXED NE 1 THEN BEGIN
    IGPS_UPDATE_TXT_FROM_TO, EV
  ENDIF
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_ZOOM_IN, EV, TSMIN=TSMIN, TSMAX=TSMAX
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF ST.IS_FROM_TO_FIXED EQ 1 THEN BEGIN
    RETURN
  ENDIF
  ;;
  TSMIN=MIN(ST.DRAW_N_XRANGE, MAX=TSMAX)
  TMPMIN=MIN(ST.DRAW_N_XRANGE_VIS, MAX=TMPMAX)
  ;;IF (TMPMAX-TMPMIN)/4D0 LT (TSMAX-TSMIN)/20D0 THEN RETURN
  ST.DRAW_N_XRANGE_VIS=[MEAN(ST.DRAW_N_XRANGE_VIS)-(TMPMAX-TMPMIN)/4D0, $
    MEAN(ST.DRAW_N_XRANGE_VIS)+(TMPMAX-TMPMIN)/4D0]
  ;PRINT,ST.DRAW_N_XRANGE_VIS
  ;PRINT,TMPMIN,TMPMAX
  TS_TYPE=ST.TS_TYPE
  ;;
  ;;SET SLIDER
  ST.SLIDER_PAN_POS = (TOTAL(ST.DRAW_N_XRANGE_VIS)/2D0-MIN(ST.DRAW_N_XRANGE)) $
    /(ST.DRAW_N_XRANGE[1]-ST.DRAW_N_XRANGE[0])*100
  WIDGET_CONTROL, ST.SLIDER_PAN_ID, SET_VALUE=ST.SLIDER_PAN_POS
  ;PRINT, 'Current slider pos:',ST.SLIDER_PAN_POS,TOTAL(ST.DRAW_N_XRANGE_VIS)/2D0-MIN(ST.DRAW_N_XRANGE)
  ;PRINT,(ST.DRAW_N_XRANGE[1]-ST.DRAW_N_XRANGE[0])
  
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_DRAW_NEU, EV
  IGPS_UPDATE_TXT_FROM_TO, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_ZOOM_IN_TRACK, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      VAL='+'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      VAL='++'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Zoom in to a subset of the time series.'
    END
  ENDCASE
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='BTN_ZOOM_IN')
  WIDGET_CONTROL,ID, SET_VALUE=VAL
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_ZOOM_OUT, EV
  ;;HELP, EV, /ST
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;NO ZOOM WHEN X-AXIS IS FIXED.
  IF ST.IS_FROM_TO_FIXED EQ 1 THEN BEGIN
    RETURN
  ENDIF
  
  TS_TYPE=ST.TS_TYPE
  TSMIN=MIN(ST.DRAW_N_XRANGE, MAX=TSMAX)
  TMPMIN=MIN(ST.DRAW_N_XRANGE_VIS, MAX=TMPMAX)
  ;;IF (TMPMAX-TMPMIN)/4D0 LT (TSMAX-TSMIN)/20D0 THEN RETURN
  XMIN=TMPMIN-(TMPMAX-TMPMIN)/4D0 > TSMIN
  XMAX=TMPMAX+(TMPMAX-TMPMIN)/4D0 < TSMAX
  ST.DRAW_N_XRANGE_VIS=[XMIN,XMAX]
  ;PRINT,ST.DRAW_N_XRANGE_VIS
  ;PRINT,TMPMIN,TMPMAX,TSMIN,TSMAX,XMIN,XMAX
  
  ;;SET SLIDER
  ST.SLIDER_PAN_POS = (TOTAL(ST.DRAW_N_XRANGE_VIS)/2D0-MIN(ST.DRAW_N_XRANGE)) $
    /(ST.DRAW_N_XRANGE[1]-ST.DRAW_N_XRANGE[0])*100
  WIDGET_CONTROL, ST.SLIDER_PAN_ID, SET_VALUE=ST.SLIDER_PAN_POS
  ;PRINT, 'CURRENT SLIDER POS:',ST.SLIDER_PAN_POS,TOTAL(ST.DRAW_N_XRANGE_VIS)/2D0-MIN(ST.DRAW_N_XRANGE)
  ;PRINT,(ST.DRAW_N_XRANGE[1]-ST.DRAW_N_XRANGE[0])
  
  ;IS_FROM_TO_FIXED=IS_FROM_TO_FIXED
  
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  
  ;WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_DRAW_NEU, EV
  ;IF IS_FROM_TO_FIXED NE 1 THEN BEGIN
  IGPS_UPDATE_TXT_FROM_TO, EV
;ENDIF
;  iGPS_UPDATE_DRAW_N, EV
;  IF TS_TYPE EQ 'CORRCOEF XY' THEN RETURN
;  iGPS_UPDATE_DRAW_E, EV
;  iGPS_UPDATE_DRAW_U, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_ZOOM_OUT_TRACK, EV
  WIDGET_CONTROL,EV.TOP,GET_UVALUE=ST
  CASE EV.ENTER OF
    0: BEGIN
      VAL='-'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      VAL='--'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Zoom out to a longer time series.'
    END
  ENDCASE
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='BTN_ZOOM_OUT')
  WIDGET_CONTROL,ID, SET_VALUE=VAL
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_ZOOM_ZERO, EV
  ;;HELP, EV, /ST
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  IF ST.IS_FROM_TO_FIXED EQ 1 THEN BEGIN
    RETURN
  ENDIF
  
  TS_TYPE=ST.TS_TYPE
  TSMIN=MIN(ST.DRAW_N_XRANGE, MAX=TSMAX)
  TMPMIN=MIN(ST.DRAW_N_XRANGE_VIS, MAX=TMPMAX)
  ;;IF (TMPMAX-TMPMIN)/4D0 LT (TSMAX-TSMIN)/20D0 THEN RETURN
  XMIN= TSMIN
  XMAX= TSMAX
  ST.DRAW_N_XRANGE_VIS=[XMIN,XMAX]
  ;PRINT,ST.DRAW_N_XRANGE_VIS
  ;PRINT,TMPMIN,TMPMAX,TSMIN,TSMAX,XMIN,XMAX
  
  ;;SET SLIDER
  ST.SLIDER_PAN_POS = 50
  WIDGET_CONTROL, ST.SLIDER_PAN_ID, SET_VALUE=50
  IS_FROM_TO_FIXED=IS_FROM_TO_FIXED
  WIDGET_CONTROL, EV.TOP, SET_UVALUE=ST, /NO_COPY
  IGPS_UPDATE_DRAW_NEU, EV
  ;IF IS_FROM_TO_FIXED NE 1 THEN BEGIN
  IGPS_UPDATE_TXT_FROM_TO, EV
;ENDIF
;  iGPS_UPDATE_DRAW_N, EV
;  IF TS_TYPE EQ 'CORRCOEF XY' THEN RETURN
;  iGPS_UPDATE_DRAW_E, EV
;  iGPS_UPDATE_DRAW_U, EV
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
PRO ON_IGPS_BTN_ZOOM_ZERO_TRACK, EV
  WIDGET_CONTROL, EV.TOP, GET_UVALUE=ST
  ;HELP, EV, /ST
  CASE EV.ENTER OF
    0: BEGIN
      VAL='|- -|'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE=ST.LBL_TEXT
    END
    1: BEGIN
      VAL='|<->|'
      WIDGET_CONTROL,ST.LBL_ID,SET_VALUE='Zoom to the whole time series.'
    END
  ENDCASE
  ID = WIDGET_INFO(EV.TOP, FIND_BY_UNAME='BTN_ZOOM_ZERO')
  WIDGET_CONTROL,ID, SET_VALUE=VAL
END

PRO ON_IGPS_TLB_RESIZE, ev

  ;HELP,EV,/ST
  ;Check the screen size of graphic controls
  ;1. menu
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='MNU_DATA')
  INFO=WIDGET_INFO(ID,/GEOMETRY)
  ;HELP, info,/st
  ysize_used1=info.SCR_YSIZE
  ;2. input path
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='BASE_DATAPATH')
  INFO=WIDGET_INFO(ID,/GEOMETRY)
  ;HELP, info,/st
  ysize_used2=info.SCR_YSIZE
  ;3. modeling paramters
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='BASE_RIGHT_L1')
  INFO=WIDGET_INFO(ID,/GEOMETRY)
  ;HELP, info,/st
  ysize_used3=info.SCR_YSIZE
  ;4. time option
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='BASE_RIGHT_L2')
  INFO=WIDGET_INFO(ID,/GEOMETRY)
  ;HELP, info,/st
  ysize_used4=info.SCR_YSIZE
  ;5. statusbar
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='LBL_STATUS')
  INFO=WIDGET_INFO(ID,/GEOMETRY)
  ;HELP, info,/st
  ysize_used5=info.SCR_YSIZE
  ;6. output path
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='WID_BASE_LOWEST')
  INFO=WIDGET_INFO(ID,/GEOMETRY)
  ;HELP, info,/st
  ysize_used6=info.SCR_YSIZE
  ;YSIZE_USED=YSIZE_USED1+YSIZE_USED2+YSIZE_USED3+YSIZE_USED4+YSIZE_USED5+YSIZE_USED6
  ;Not include the menubar
  YSIZE_USED=YSIZE_USED2+YSIZE_USED3+YSIZE_USED4+YSIZE_USED5+YSIZE_USED6
  
  ;print,'ysize_used:', ysize_used
  
  
  ;get xsize
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='BASE_PAPAMS')
  INFO=WIDGET_INFO(ID,/GEOMETRY)
  XSIZE_USED=INFO.SCR_XSIZE
  YSIZE_PARAMS=INFO.SCR_YSIZE
  
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='LST_SITE')
  INFO=WIDGET_INFO(ID,/GEOMETRY)
  YSIZE_LST_SITE=INFO.SCR_YSIZE
  
  ;print,'Xsize_used:', Xsize_used
  
  ;stop
  ;TBL height
  ;ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='BASE_IGPS')
  ;INFO=WIDGET_INFO(ID,/GEOMETRY)
  ;ysize_total=info.scr_ysize
  ;XSIZE_TOTAL=INFO.SCR_XSIZE
  YSIZE_TOTAL=EV.Y
  XSIZE_TOTAL=EV.X
  ;HELP, XSIZE_TOTAL
  ysize_rem=ysize_total-ysize_used
  ysize_draw=FIX(ysize_rem/3)
  ;YSIZE_DRAW=YSIZE_DRAW > FIX((YSIZE_LST_SITE+YSIZE_PARAMS-YSIZE_USED3-YSIZE_USED4-YSIZE_USED5)/3)
  
  XSIZE_DRAW=FIX(XSIZE_TOTAL-XSIZE_USED);-10
  ;print,'ysize_draw:', ysize_draw, XSIZE_DRAW
  
  
  ;STOP
  
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='DRAW_N')
  ;INFO=WIDGET_INFO(ID,/GEOMETRY)
  ;print,'old N ysize', info.scr_ysize
  WIDGET_CONTROL, id, draw_ysize=ysize_draw, draw_xsize=XSIZE_DRAW
  ;INFO=WIDGET_INFO(ID,/GEOMETRY)
  ;print,'new N ysize', info.scr_ysize
  
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='DRAW_E')
  WIDGET_CONTROL, id, draw_ysize=ysize_draw, draw_xsize=XSIZE_DRAW
  ID = WIDGET_INFO(ev.TOP, FIND_BY_UNAME='DRAW_U')
  WIDGET_CONTROL, id, draw_ysize=ysize_draw, draw_xsize=XSIZE_DRAW
  
  ;STOP
  IGPS_UPDATE_DRAW_NEU, ev
  
END

;/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
;; EMPTY STUB PROCEDURE USED FOR AUTOLOADING.
PRO IGPS_EVENTCB
END
