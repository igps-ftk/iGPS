#!/bin/sh

# Name:
#   sh_esa_s1_sbas
#   

# Purpose:
#   

# Example:
#   

# Modifications:
#   

# Algorigthm:
#   

# Dependency:
#   

PROG=sh_esa_s1_sbas



SAT=SAT #ENVI

file_ll_grd=

n_atm=0

intf_path=intf_all

out_path=SBAS

overwrite=n

wavelength=0.0554658 #for Sentinel-1

incidence=38
fix_incidence=n

range=800184.946186
fix_range=n

multilook=0  #multilook level (1 - 4:1,25m; 2 - 8:2,50m; 3 - 16:4,100m; 4 - 32:8,200m) 

prog_sbas=sbas


file_intf_tab=intf.tab
file_scene_tab=scene.tab


while [ "$1" != "" ]; do
  case $1 in
    -h|help)
      echo "Usage: sh_esa_s1_sbas  -sat SAT|ENVI -file_ll_grd grd_ll_filename  -atm num "
      echo "                       -opath out_path -overwrite y|n"
      echo "                       -fix_incidence y|n -fix_range y|n"
      echo     To skip one parameter, use \'\' as its value.
      exit 1
      ;;
    -sat)
      SAT=$2
      ;;
    -file_ll_grd)
      file_ll_grd=$2
      ;;
    -atm)
      n_atm=$2
      ;;
    -ipath)
      intf_path=$2
      ;;
    -opath)
      out_path=`dirname "$2/test.txt"`
      ;;
    -overwrite)
      overwrite=$2
      ;;
    -prog)
      prog_sbas=$2
      ;;
    -fix_incidence)
      fix_incidence=$2
      ;;
    -fix_range)
      fix_range=$2
      ;;
    -multilook)
      multilook=$2
      ;;
    -file_intf)
      file_intf_tab=$2
      ;;
    -file_scene)
      file_scene_tab=$2
      ;;
    *)
      echo "[$PROG]ERROR: invalid option ($1)!!"
      exit 1
      ;;
  esac

  shift 2
done

#echo $SAT $file_ll_grd $n_atm

file_log="log.`basename $out_path`"
echo file_log $file_log
#exit

echo "[$PROG]INFO: cleaning existing output directory if overwrite is y (rm -rf $out_path && mkdir $out_path)"
if [ -d $out_path ]; then
  if [ "$overwrite" == "y" ]; then
    echo "[$PROG]WARNING: output directory exist and will be overwritten!"
    #rm -rf $out_path
  else
    echo "[$PROG]WARNING: output directory exist! Stopped."
    exit 1
  fi 
fi
mkdir -p $out_path 
\cp -fp  orb.psxy $out_path
\cp -fp  orb.psxy.kml $out_path

echo \cp -fp  $file_intf_tab $out_path/intf.tab
echo \cp -fp  $file_intf_tab $out_path/intf.tab | sh
echo \cp -fp  $file_scene_tab $out_path/scene.tab
echo \cp -fp  $file_scene_tab $out_path/scene.tab | sh


cd ${out_path}
if [ $? -ne 0 ]; then
  echo "[$PROG]ERROR: cannot enter SBAS path ($out_path)!!"
  exit 1
fi
#
echo "[$PROG]INFO: working in `pwd`"

ln -s ../${intf_path} ./ia

for file_t in intf.tab scene.tab ; do
  line_ending=`cat -v "$file_t" | head -1 | awk '{print substr($0,length($0)-1)}'`
  #echo "[$PROG]INFO: line_ending of file $file_t is $line_ending"
  if [ "$line_ending" = '^M' ]; then
    echo "[$PROG]INFO: converting DOS text file to Linux/Unix line-ending format ($file_t) ..."
    dos2unix "$file_t"
  fi
done
#exit

if [ ! -s trans.dat ]; then
  echo "[$PROG]INFO: linking trans.dat file ..."
  ln -s ../topo/trans.dat .
fi
cp -fp ../baseline* .
cp -fp ../data.in .

sh_sar_plot_intf_tab >& log.sh_sar_plot_intf_tab &


file_ra=`head -1 intf.tab | awk '{print $1}'`
pair=`echo $file_ra | awk -F \/ '{print $3}'`

#exit


#
echo "[$PROG]INFO: reading dimensions information from $file_ra "
xdim=`gmt grdinfo -C $file_ra | awk '{print $10}'`
ydim=`gmt grdinfo -C $file_ra | awk '{print $11}'`


if [ ! -s ../topo/master.PRM ]; then
  echo "\cp -fp ../intf_all/$pair/supermaster.PRM ../topo/master.PRM"
  echo "\cp -fp ../intf_all/$pair/supermaster.PRM ../topo/master.PRM" | sh
fi
if [ ! -s ../topo/master.PRM ]; then
  echo "[$PROG]ERROR: topo/master.PRM is missing ($1)!!"
  exit 1
fi
\cp -fp ../topo/master.PRM .


files_prm=`ls ../topo/*.PRM | sort`
if [ $? -ne 0 ]; then
    echo "[]ERROR: error when searching PRM file!!"
    exit 1
fi
file_prm=`echo $files_prm | head -1 | awk '{print $1}'`
sid=`basename $file_prm | awk -F- '{print $3}'`

if [ "$fix_incidence" != "y" ]; then

led_name=`grep led_file $file_prm | awk '{print $3}'`
if [ ! -s $led_name ]; then
  #for single subswath processing (F1/F2/F3)
  if [ -s ../raw/$led_name ]; then
    \cp -f ../raw/$led_name .
  elif [ -s ../topo/$led_name ]; then
    \cp -f ../topo/$led_name .
  elif [ -s ../../F1/raw/$led_name ]; then
    \cp -f ../../F1/raw/$led_name .
  else
    echo "[]ERROR:no LED file found($lef_name)!!"
    #exit 1
  fi

fi
fi

nintf=`cat intf.tab | wc -l`
nscen=`cat scene.tab | wc -l`

#fix wavelength to Sentinel-1's. Change it as necessary.
#if [ ! -s "../topo/master.PRM" ]; then
#    echo "[$PROG]ERROR: ../topo/master.PRM must exist!!"
#    exit 1
#fi
#
#wavelength=`grep "radar_wavelength" ../topo/master.PRM | awk '{print $3}'`
echo "[$PROG]INFO: wavelength: $wavelength"
#exit


if [ "$fix_incidence" != "y" ]; then
  #echo 1 > ./incidence
  if [ -s ../incidence ]; then
    tmp=`grep ERROR ../incidence`
    if [ "$tmp" != "" ]; then
        echo "$PROG[]ERROR: invalid incidence angle (incidence)!! Please remove it to obtain a new one automatically."
        exit 1
        #rm -f ../incidence
    fi
  fi
  
  if [ ! -s "../incidence" ]; then
      echo "[$PROG]INFO:calculating new incidence ..."
      if [ "$file_ll_grd" = "" ]; then
          file_ll_grd="_ll"
      fi
      echo "[$PROG]INFO: converting radar coordinates ($file_ra) to geographic ones ($file_ll_grd) ..."
      \rm -rf ${file_ll_grd}.grd
      \rm -rf gauss_*
      touch gauss_3600
      proj_ra2ll.csh trans.dat $file_ra ${file_ll_grd}.grd
      \rm -rf gauss_*
      #exit
  
  
      echo sh_sar_cal_sat_incidence -sat $SAT -file $file_ll_grd
      incidence=`sh_sar_cal_sat_incidence -sat $SAT -file $file_ll_grd | tail -1`
      tmp=`echo $incidence | grep -i error`
      if [ "$tmp" != "" ]; then
          echo "ERROR: invalid incidence angle ($incidence)!!"
          exit 1
      fi
      echo $incidence > ../incidence
      echo "[$PROG]INFO:using new incidence $incidence."
  else
      incidence=`cat ../incidence`
      echo "[$PROG]INFO:using old incidence $incidence."
  fi

fi #end-of-if-fix_incidence-n
#exit
#echo "../intf_all/$pair/gauss_*"
\cp -fp ../incidence ./

tmp=`ls gauss_*` >& /dev/null
if [ "$tmp" = "" ]; then
  if [ $multilook -eq 0 ]; then
    file_filter=`find ../intf_all/$pari/ -maxdepth 1 -name "gauss_*"`
    if [ "$file_filter" = "" ]; then
      file_filter=`find ../../F?/intf_all/$pair/ -maxdepth 1 -name "gauss_*"`
    fi
    echo file_filter $file_filter
    if [ "$file_filter" = "" ]; then
      echo "[]WARNING: using default filter width : 400"
      touch gauss_400
    else
      \cp -fp $file_filter .
    fi
  else
    case $multilook in
      1)
        touch gauss_100
        ;;
      2)
        touch gauss_200
        ;;
      3)
        touch gauss_400
        ;;
      4)
        touch gauss_800
        ;;
      1)
        echo "[$PROG]ERROR: invalid multilook optin ($multilook)!!"
        exit 1
        ;;
    esac
  fi
fi
ls -l gauss_*
ng=`ls gauss_* |wc -l`
if [ $ng -gt 1 ]; then
  echo "[$PROG]ERROR: more than 1 gauss_* files exist!!"
  exit 1
fi

if [ "$fix_range" != "y" ]; then
  ##http://gmt.soest.hawaii.edu/boards/6/topics/7951?r=8244#message-8244
  ##1. Yes, I believe the formula is written wrong in some way. Should be
  ##rng_pixel_size = (speed of light) / (rng_samp_rate) / 2
  ##rng = rng_pixel_size * (x_min+x_max) /2 + near_range
  ##2. I think the numbers are sort of randomly written there.
  ##3. For a specific point on the ground (e.g. lon lat elevation), you can use SAT_look to compute the look vector.
  ##Cheers,
  ##Xiaohua(Eric)
  near_range=`grep "near_range" ../topo/master.PRM | awk '{print $3}'`
  echo "[$PROG]INFO:near_range $near_range"
  C_speed=300000000.
  rng_samp_rate=`grep "rng_samp_rate" ../topo/master.PRM | tail -1 | awk '{print $3}'`  
  echo "[$PROG]INFO:rng_samp_rate $rng_samp_rate"
  rng_pixel_size=`echo $C_speed $rng_samp_rate | awk '{print $1/$2/2.}'` 
  echo "[$PROG]INFO:rng_pixel_size $rng_pixel_size"
  Np=`grep "num_rng_bins" ../topo/master.PRM | awk '{print int($3/2.)}'` 
  echo "[$PROG]INFO:Np $Np"
  range=`echo $near_range $Np $rng_pixel_size | awk '{print $1+$2*$3}'`
fi #end-of-if-fix_range-n
echo "[$PROG]INFO:range $range"
gmt grdinfo -C $file_ra

echo  "[$PROG]INFO:nintf $nintf nscen $nscen xdim $xdim ydim $ydim "
#exit


echo  "[$PROG]INFO: running sbas program (may be time-consuming for large data set) ... :>"
t1=`date`
#sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -smooth 1.0 -wavelength 0.0554658 -incidence 30 -range 800184.946186 -rms -dem
echo time $prog_sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -atm $n_atm -smooth 1.0 -wavelength ${wavelength} -incidence ${incidence} -range ${range} -rms -dem
echo  "[$PROG]INFO: `pwd`"
#exit
echo OMP_NUM_THREADS  $OMP_NUM_THREADS 
if [ $n_atm -eq 0 ]; then 
    echo time $prog_sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -smooth 1.0 -wavelength ${wavelength} -incidence ${incidence} -range ${range} -rms -dem 
    time $prog_sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -smooth 1.0 -wavelength ${wavelength} -incidence ${incidence} -range ${range} -rms -dem #2>&1 | tee $file_log
else
    echo time $prog_sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -atm $n_atm -smooth 1.0 -wavelength ${wavelength} -incidence ${incidence} -range ${range} -rms -dem 
    time $prog_sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -atm $n_atm -smooth 1.0 -wavelength ${wavelength} -incidence ${incidence} -range ${range} -rms -dem #2>&1 | tee $file_log
fi



proj_ra2ll.csh trans.dat vel.grd vel_ll.grd

#create color table
t2=`basename $out_path | awk -F. '{print $5+0}'`
echo t2 is $t2
#gmt grd2cpt vel_ll.grd -T= -Z -Cjet > vel_ll.cpt
if [ $t2 -lt 50 ]; then
  gmt makecpt -Cjet -T-50/50/.1 -Z -I > vel.cpt
elif [ $t2 -lt 100 ]; then
  gmt makecpt -Cjet -T-30/30/.1 -Z -I > vel.cpt
elif [ $t2 -lt 200 ]; then
  gmt makecpt -Cjet -T-20/20/.1 -Z -I > vel.cpt
else
  gmt makecpt -Cjet -T-10/10/.1 -Z -I > vel.cpt
fi
#grd2kml.csh vel_ll vel.cpt
sh_grd2kml 
#grd2xyz vel_ll.grd | grep -v NaN | awk '{print "",$0}' > vel_ll.xyz
pwd


sh_esa_s1_corr_mask

sh_esa_s1_sbas_tar $out_path
#tar zcf ${out_path}.tar.gz vel_ll.kml vel_ll.png *.tab vel_mask_ll* rms_mask_ll3* look_mask_ll3* baseline* data.in f-baseline* incidence

t2=`date`

text="`pwd`  from $t1 to $t2"
echo "sh_mail -prog $PROG -text $text "
sh_mail -prog $PROG -text "$text" 

#proj_ra2ll.csh trans.dat rms.grd rms_ll.grd
#gmt makecpt -Cjet -T-3/3/.1 -Z -I > rms_ll.cpt
#grd2kml.csh rms_ll rms_ll.cpt
#grd2xyz rms_ll.grd | grep -v NaN | awk '{print "",$0}' > rms_ll.xyz

sh_grd_resample_mask

tar zcf r4.tar.gz r4
#sh_grd2nc 'disp_???????'
#sh_grd2nc 'disp_???'
echo  "[$PROG]INFO: normal end (`pwd`)"
cd ..
