#!/bin/bash

# Name:
#   sh_asf_s1_get_slc_roi
#   

# Purpose:
#   Download S1 SLC files for a given region

# Example:
#   

# Modifications:
#   

# Algorithm:
#   

# Dependency:
#   

PROG=sh_asf_s1_get_slc_roi

if [ -t 0 ]; then
    interactive=1
else
    interactive=0
    . ${HOME}/.bashrc  
fi
#echo "interactive $interactive"


timestamp=`date | sed -e "s/ /_/g" | sed -e "s/:/-/g"`

path_old=`pwd`

usage_of_it(){
cat <<eob
${PROG}
|_Use aria2 to download S1 SLC zip files returned by ASF API search.
  https://docs.asf.alaska.edu/api/basics/
|+
  -sh_asf_s1_query
  -aria2
|<
  -r|-roi ROI_FILE_KML
  -ac|-aria2_conf ARIA2_CONF_FILE
  [-o|-orb|-orbit|-orb_type |ASCENDING|DESCENDING]
    default: none (both)
  [-p|-path OUTPUT_PATH]
    default: \`pwd\`
  [-w1 FROM_w1_WEEKS_AGO]
    default: 3
  [-w2 TO_w2_WEEKS_AGO]
    default: 0
  [-h|-help|--help]
|e.g.,
  ${PROG} 
(c)iGPS (https://github.com/igps-ftk/)
eob
}

if [ "$1" == "" ]; then
    usage_of_it
    #exit 1
fi

this_host=`hostname`

w1=3 #download data backward three weeks
w2=0

file_roi=   #region of interest in KML polygon format
user=   #EARTHDATA username (only for DIPP system; please specify your own aria2.conf file with -ac option)
file_aria2_conf=null

orb_type='ASCENDING'
orb_type=DESCENDING
orb_type=

path=`pwd`

file_tmp_py=_tmp_${PROG}_${timestamp}_download.py
#echo $file_tmp_py

while [ "$1" != "" ]; do
  case $1 in
    -ac|-aria2_conf)
      file_aria2_conf=$2
      ;;
    -u|-user)
      user=$2
      ;;
    -o|-orb|-orbit|-orb_type)
      orb_type=$2
      ;;
    -p|-path)
      path=$2
      ;;
    -r|-roi)
      file_roi=$2
      ;;
    -w1)
      w1=$2
      ;;
    -w2)
      w2=$2
      ;;
    -h|-help|--help)
      usage_of_it
      exit 1
      ;;
    *)
      usage_of_it
      echo -e "[$PROG]\033[1;33;41mERROR\033[0m: invalid option ($1)!!"
      exit 1
      ;;
  esac
  shift 2
done



#hardwired parameters for DIPP system only
###>>>DIPP
if [ "$file_roi" == "" ]; then #DIPP defaults
  #check the data root directory
  if [ "$esa_data" == "" ]; then
    echo -e "[$PROG]\033[1;33;41mERROR\033[0m: environment variable esa_data not set!!"
    exit 1
  fi
  if [ ! -d $esa_data ]; then
    echo -e "[$PROG]\033[1;33;41mERROR\033[0m: esa_data ($esa_data) not exist!!"
    exit 1
  fi
  
  file_roi=${esa_data}/vector/L_.roi_china_east.kml
  file_roi=${esa_data}/vector/roi_china_20210216.kml
  file_roi=${esa_data}/vector/L0.roi_tibet_20210327.kml
  file_roi=${esa_data}/vector/L0.roi_tibet_20220325.kml
  file_roi=${esa_data}/vector/L0.roi_tibet_20241216.kml
  file_roi=${esa_data}/vector/L0.roi_tibet_20250506.kml

  #file_roi=${esa_data}/vector/L0.roi_tibet.kml
  #file_roi=${esa_data}/vector/L0.roi_tibet.arv.kml
  #file_roi=${esa_data}/vector/L0.roi_tibet_20210327_chuandian.psxy
  
  case $this_host in
    gpsac15)
      #orb_type='ASCENDIGN'
      path=/g15a/gsar/china_east/S1.3
      ;;
    gpsac12)
      orb_type='ASCENDING'
      path=/g14i/esa.data/china_east/S1.3
      path=/g18h/gsar/tmp
      path=/g19b/gsar/tmp/
      path=/g6f/gsar/tmp/
      ;;
    gpsac17)
      #orb_type='DESCENDING'
      file_roi=${esa_data}/vector/L0.roi_tibet.arv.kml
      file_roi=${esa_data}/vector/roi_china_20210216.kml
      file_roi=${esa_data}/vector/L_.roi_china_east.psxy
      path=/g17c/gsar/asf_tibet/S1
      #path=/g17b/gsar/asf_tibet/S1/
      ;;
    SNOW1)
      #orb_type='DESCENDING'
      path=/cygdrive/d/esa.data/asf_tibet/S1
      ;;
    gpsac16)
      orb_type='DESCENDING'
      path=/g18h/gsar/tmp2/
      path=/g19b/gsar/tmp2/
      path=/g6f/gsar/tmp2/
      ;; 
    gpsac18)
      #orb_type='DESCENDING'
      path=/g18h/gsar/tmp/
      ;;
    node4)
      orb_type='DESCENDING'
      path=/sar/esa.sentinel-1/in-progress/d000/
      file_roi=${esa_data}/vector/roi_northeast.kml
      ;;
    node5)
      #orb_type='DESCENDING'
      path=/sar/esa.sentinel-1/in-progress/d001/
      file_roi=${esa_data}/vector/roi_northwest.kml
      ;;
    node6)
      #orb_type='DESCENDING'
      path=/sar/esa.sentinel-1/in-progress/d002/
      file_roi=${esa_data}/vector/roi_whs_20221005.kml
      ;;
    *)
      echo -e "[$PROG]\033[1;33;41mERROR\033[0m: wrong DIPP host ($this_host)!!"
      echo "[$PROG]INFO: for non-DIPP system, use"
      usage_of_it
      exit 1
      ;;
  esac
  echo host $this_host orb_type $orb_type
  #exit

fi

if [ "$user" == "" ];then
  user=tianyunfeng
fi
echo user is $user


###<<<DIPP


if [ "$file_roi" == "" ]; then
  echo -e "[$PROG]\033[1;33;41mERROR\033[0m: no aoi KML file given!!"
  exit 1
fi
if [ ! -s $file_roi ]; then
  echo -e "[$PROG]\033[1;33;41mERROR\033[0m: aoi KML file not exist ($file_roi)!!"
  exit 1
fi

if [ "$path" == "" ]; then
  path=`pwd`
fi
if [ ! -d $path ]; then
  ehco "mkdir -p ${path}"
  echo "mkdir -p ${path}" | sh
fi
cd $path
pwd

file_lock="${path}/_tmp_${PROG}.lock"
if [ -s $file_lock ]; then
  echo "[$PROG]WARNING: locked by $file_lock!! Quit."
  exit 1
fi

echo "[$PROG]INFO: downloading data for ROI ($file_roi) at $this_host ..." > $file_lock
#exit


if [ "$orb_type" == "" ]; then
  sh_asf_s1_query -r $file_roi -roi_type polygon -out_file ${file_tmp_py} -weeks $w1 -eweeks $w2
else
  sh_asf_s1_query -r $file_roi -roi_type polygon -out_file ${file_tmp_py} -weeks $w1 -eweeks $w2  -orb_type $orb_type
  echo orb_type is $orb_type
  #sh_asf_s1_query -r $file_roi -roi_type polygon -orb_type $orb_type -out_type KML -out_file ${orb_type}.kml -weeks $w1 -eweeks $w2
  ##sh_asf_s1_query -r $file_roi -roi_type polygon -out_type KML -out_file ${orb_type}.kml -weeks $w1 -eweeks $w2
  ##sh_asf_s1_query -r $file_roi -roi_type polygon -out_file ${orb_type}.py -weeks $w1 -eweeks $w2
fi

echo "sh_asf_s1_get_slc_py -file ${file_tmp_py} -path $path -ac $file_aria2_conf"
echo "sh_asf_s1_get_slc_py -file ${file_tmp_py} -path $path -ac $file_aria2_conf" | sh

\rm -f $file_lock $file_tmp_py

echo "[$PROG]INFO: done."
