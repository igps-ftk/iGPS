#!/bin/sh

# Name:
#   sh_sar_auto_grid_restore_to_init
#   

# Purpose:
#   

# Example:
#   

# Modifications:
#   

# Algorigthm:
#   

# Dependency:
#   


PROG=sh_sar_auto_grid_restore_to_init

path_old=`pwd`

usage(){
  echo "[$PROG]Usage: ${PROG} "
  echo "[$PROG]Usage: e.g.,"
  echo "[$PROG]Usage:  "
}


root_expt=/sar/proc_gmtsar/auto_grid

expt=

is_clean_intf=y
is_clean_slc=y

iws='iw1 iw2 iw3'

while [ "$1" != "" ]; do
  case $1 in
    -e|-expt)
      expt=$2
      ;;
    -i|-iw)
      iws=`echo $2 | sed -e 's/,/ /g'`
      ;;
    -del_intf)
      is_clean_intf=$2
      ;;
    -del_slc)
      is_clean_slc=$2
      ;;
    *)
      echo "[$PROG]ERROR: invalid option ($1)!!"
      usage
      exit 1
      ;;
  esac
  shift 2  
done


if [ "$expt" == "" ]; then
  #current directory?
  expt=`basename $path_old`
  tmp=`echo $expt | grep '^[AD]..._....'`
  echo $tmp $expt
  if [ "$tmp" == "" ]; then
    echo "[$PROG]ERROR: no expt given!!"
    exit 1
  fi
  echo "[]INFO:processing current directory ($expt) ..."
  #exit 1
fi

if [ ! -d $root_expt/$expt ]; then
  echo "[$PROG]ERROR: expt not exist($root_expt/$expt)!!"
  exit 1
fi


for iw in $iws; do
  iw_id=`echo $iw | awk '{print substr($1,3,1)+0}'`

  if [ $iw_id -ne 1 -a $iw_id -ne 2 -a $iw_id -ne 3 ]; then
    echo "[$PROG]ERROR: wrong iw ($iw)!! Check input ($iws)."
    exit 1
  fi

  path_Fi=$root_expt/$expt/F${iw_id}
  echo path_Fi $path_Fi
  if [ ! -d $path_Fi ]; then
    echo "[$PROG]INFO: expt not exist ($path_Fi)."
    continue
  fi


  if [ "$is_clean_intf" == "y" ]; then
    if [ -d $path_Fi/intf ]; then
      echo "\rm -rf $path_Fi/intf"
      echo "\rm -rf $path_Fi/intf" | sh
    fi
    if [ -d $path_Fi/intf_all ]; then
      echo "\rm -rf $path_Fi/intf_all"
      echo "\rm -rf $path_Fi/intf_all" | sh
    fi
    if [ -d $path_Fi/intf_all_x2 ]; then
      echo "\rm -rf $path_Fi/intf_all_x2"
      echo "\rm -rf $path_Fi/intf_all_x2" | sh
    fi
    if [ -d $path_Fi/intf_all_los_ll_png ]; then
      echo "\rm -rf $path_Fi/intf_all_los_ll_png"
      echo "\rm -rf $path_Fi/intf_all_los_ll_png" | sh
    fi
  fi

  if [ "$is_clean_slc" == "y" ]; then
    if [ ! -s $path_Fi/data.in -o ! -s $path_Fi/baseline_table.dat -o ! -d $path_Fi/raw -o ! -s $path_Fi/data.in.old -o ! -s $path_Fi/baseline_table.dat.old ]; then
      continue
    fi
    nl_in=`cat $path_Fi/data.in.old | wc -l | awk '{print $1+0}'`
    nl_bl=`cat $path_Fi/baseline_table.dat.old | wc -l | awk '{print $1+0}'`
    if [ $nl_in -ne 2 -o $nl_bl -ne 2 ]; then
      echo "[$PROG]ERROR: the original files (data.in.old, baseline_table.dat.old) are not correct!"
      nl_inlst_init=`grep -h '^ ' $path_Fi/../input.lst.init | wc -l`
      if [ $nl_inlst_init -ne 2 ]; then
        echo "[$PROG]ERROR: wrong input.lst.init!!"
        exit 1
      fi
      #
      if [ $nl_in -ne 2 ]; then
        echo "[$PROG]INFO: correcting data.in.old ..."
        ids_init=`grep -h '^ ' $path_Fi/../input.lst.init | awk -F_ '{print substr($6,1,8)}'`
        \rm -f $path_Fi/data.in.old
        for id_init in $ids_init; do
          tmp=`cat $path_Fi/data.in | grep $id_init`
          if [ "$tmp" == "" ]; then
            echo "[$PROG]ERROR: cannot correct data.in.old!!"
            exit 1
          fi
          cat $path_Fi/data.in | grep $id_init >> $path_Fi/data.in.old
        done
      fi
      if [ $nl_bl -ne 2 ]; then
        echo "[$PROG]INFO: correcting baseline_tabl.dat.old ..."
        ids_init=`grep -h '^ ' $path_Fi/../input.lst.init | awk -F_ '{print substr($6,1,8)}'`
        \rm -f $path_Fi/baseline_table.dat.old
        for id_init in $ids_init; do
         tmp=`cat $path_Fi/baseline_table.dat | grep $id_init` 
          if [ "$tmp" == "" ]; then 
            echo "[$PROG]ERROR: cannot correct baseline_table.old!!"
            exit 1
          fi 
          cat $path_Fi/baseline_table.dat | grep $id_init >> $path_Fi/baseline_table.dat.old
        done
      fi
    fi

    id_i1=`cat $path_Fi/baseline_table.dat.old | head -1 | awk '{print substr($1,1,11)}'`
    id_i2=`cat $path_Fi/baseline_table.dat.old | tail -1 | awk '{print substr($1,1,11)}'`

    nl_bl_new=`cat $path_Fi/baseline_table.dat | wc -l | awk '{print $1+0}'`
    if [ $nl_bl_new -le 2 ]; then
      echo "[$PROG]WARNING: no need to remove SLC."
      continue
    fi
    nl_bl_new2=`cat $path_Fi/baseline_table.dat | grep -v $id_i1 | grep -v $id_i2  | wc -l | awk '{print $1+2}'`
    if [ $nl_bl_new -ne $nl_bl_new2 ]; then
      echo "[$PROG]ERROR: something wrong with baseline files!!"
      exit 1
    fi
    echo nl_in $nl_in nl_bl $nl_bl id_i1 $id_i1 id_i2 $id_i2 nl_bl_new $nl_bl_new nl_bl_new2 $nl_bl_new2
    ids_del=`cat $path_Fi/baseline_table.dat | grep -v $id_i1 | grep -v $id_i2 | awk '{print substr($1,1,11)}'`
    echo ids_del $ids_del
    #exit
    for id_del in $ids_del; do
      files_slc=`find $path_Fi/raw/ -maxdepth 1 -type f -name "${id_del}_*"|sort`
      if [ "$files_slc" != "" ]; then
        for file_slc in $files_slc; do
          echo "\rm -f $file_slc"
          echo "\rm -f $file_slc" | sh
        done
      fi
    done    
    echo "\mv $path_Fi/baseline_table.dat.old $path_Fi/baseline_table.dat"
    echo "\mv $path_Fi/baseline_table.dat.old $path_Fi/baseline_table.dat" | sh
    echo "\mv $path_Fi/data.in.old $path_Fi/data.in"
    echo "\mv $path_Fi/data.in.old $path_Fi/data.in" | sh


  fi

done
