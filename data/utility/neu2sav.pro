
PRO NEU2SAV, $
  PATH, $   ;Input PATH
  FILES=FILES, $
  TLB=TLB, $
  PROG=PROG_IN, $
  OVERWRITE=OVERWRITE

  PROG='NEU2SAV'
  IF N_ELEMENTS(PROG_IN) NE 0 THEN PROG=PROG_IN+':'+PROG

  IF N_PARAMS() LT 1 THEN BEGIN
    path=FILEPATH(ROOT_DIR=!IGPS_ROOT,SUBDIRECTORY=['example','cmc','PBO'],'WNAM_Clean_ResidNeuTimeSeries_comb_20150318.test')
  ENDIF

  IF N_ELEMENTS(OVERWRITE) EQ 0 THEN OVERWRITE=0
  IS_READ_DATA=1

  LBL_ID=-1
  IF N_ELEMENTS(TLB) NE 0 THEN BEGIN
    LBL_ID=WIDGET_INFO(TLB, FIND_BY_UNAME='LBL_STATUS')
  ENDIF

  NF=N_ELEMENTS(FILES)
  IF NF EQ 0 THEN BEGIN
    FILES = FILE_SEARCH(PATH+PATH_SEP()+'*.neu', COUNT=NF)
  ENDIF
  IF NF LE 0 THEN BEGIN
    STR_STATUS=STRING('['+PROG+']ERROR: no files found in <',PATH,'>!!')
    PRINT, STR_STATUS
    IF LBL_ID NE -1 THEN WIDGET_CONTROL,LBL_ID,SET_VALUE=STR_STATUS
    RETURN
  ENDIF
  ;  NF=10



  OFILE=GETPATHNAME(PATH+PATH_SEP()+'text.txt')+'.sav'

  ;HELP,OVERWRITE
  ;CHECK WHETHER WE NEED TO READ FILES
  IF FILE_TEST(OFILE,/REGULAR) && OVERWRITE NE 1 THEN BEGIN
    STR_STATUS=STRING('['+PROG+'] WARNING: output file already exist <'+OFILE+'>! Skip.')
    PRINT, STR_STATUS
    IF LBL_ID NE -1 THEN WIDGET_CONTROL,LBL_ID,SET_VALUE=STR_STATUS
    RETURN
  ENDIF

  ;Check whether the number of sites are consistent.
  FILES_BAK=FILES
  NF_BAK=NF
  IF FILE_TEST(OFILE,/REGULAR) THEN BEGIN
    RESTORE, FILENAME=OFILE
    ;IF THE NUMBERS OF SITES DIFFER
    IF NF NE NF_BAK THEN BEGIN
      NF=NF_BAK
      FILES=FILES_BAK
      STR_STATUS=STRJOIN(STRING('['+PROG+'] WARNING: output file exist but number of sites differ! Re-read data.'))
      PRINT, STR_STATUS
      IF LBL_ID NE -1 THEN WIDGET_CONTROL,LBL_ID,SET_VALUE=STR_STATUS
      GOTO, CONT_READ
    ENDIF
    ;IF THE NUMBERS OF SITES ARE THE SAME, BUT THE SITES DIFFER
    FILES1=FILES
    FILES2=GETFILENAME(FILES_BAK)
    POS=(FILES1 EQ FILES2)
    POS2=WHERE(POS EQ 1)
    IF POS2[0] EQ -1 || N_ELEMENTS(POS2) NE N_ELEMENTS(POS) THEN BEGIN
      NF=NF_BAK
      FILES=FILES_BAK
      STR_STATUS=STRJOIN(STRING('['+PROG+'] WARNING: output file exist but sites differ! Re-read data.'))
      PRINT, STR_STATUS
      IF LBL_ID NE -1 THEN WIDGET_CONTROL,LBL_ID,SET_VALUE=STR_STATUS
      GOTO, CONT_READ
    ENDIF
    ;STOP
  ENDIF

  ;IF OUTPUT FILE EXIST AND THE LATEST, THEN NO CHANGES.
  IF FILE_TEST(OFILE,/REGULAR) THEN BEGIN
    INFO_OFILE=FILE_INFO(OFILE)
    ;STOP
    FOR FI=0, NF-1 DO BEGIN
      INFO_FI=FILE_INFO(FILES[FI])
      IF INFO_OFILE.MTIME LT INFO_FI.MTIME THEN GOTO, CONT_READ
    ENDFOR
    STR_STATUS=STRJOIN(STRING('['+PROG+'] WARNING: output file already exist and the latest<',OFILE,'>! No need to re-do.'))
    PRINT, STR_STATUS
    IF LBL_ID NE -1 THEN WIDGET_CONTROL,LBL_ID,SET_VALUE=STR_STATUS
    RETURN
  ENDIF

  CONT_READ:

  ;READ IN ALL DATA
  PDATA=PTR_NEW()  ;ARRAY TO HOLD ALL DATA FROM FILES
  MJDMINS=-1
  MJDMAXS=-1
  ;;SITES NAMES
  SITES=STRARR(NF)
  HEADERS=REPLICATE(PTR_NEW(),NF)

  STR_STATUS=STRING('['+PROG+'] Reading all data ...')
  PRINT, STR_STATUS
  IF LBL_ID NE -1 THEN WIDGET_CONTROL,LBL_ID,SET_VALUE=STR_STATUS
  FOR FI=0, NF-1 DO BEGIN
    FILE=FILES[FI]
    STR_STATUS=STRING('['+PROG+'] Reading '+STRTRIM(FI+1,2)+'/'+STRTRIM(NF,2)+' <'+GETFILENAME(FILE)+'> in <'+GETPATHNAME(FILE)+'> ...')
    PRINT, STR_STATUS
    IF LBL_ID NE -1 THEN WIDGET_CONTROL,LBL_ID,SET_VALUE=STR_STATUS

    READ_NEU, FILE, DATA=DATA, HEADER=HEADER
    ;stop
    HEADERS[FI]=PTR_NEW(HEADER)
    SITE=STRLOWCASE(STRMID(GETFILENAME(FILE),0,4))
    SITES[FI]=SITE
    PDATA=[PDATA, PTR_NEW(DATA)]
    MJDS=YDOY2MJD(DATA[1,*], DATA[2,*])
    MJDMINS=[MJDMINS, MJDS[0]]
    MJDMAXS=[MJDMAXS, LAST(MJDS)]
  ENDFOR
  PDATA=PDATA[1:*]
  MJDMINS=MJDMINS[1:*]
  MJDMAXS=MJDMAXS[1:*]
  MJDMIN=MIN(MJDMINS)
  MJDMAX=MAX(MJDMAXS)
  NDAYS=ULONG(MJDMAX-MJDMIN+1)

  MJDS=LINDGEN(NDAYS)+MJDMIN

  DATAA=DBLARR(N_ELEMENTS(data[*,0])-3,NDAYS,NF)
  INDSA=INTARR(NDAYS,NF)

  STR_STATUS=STRING('['+PROG+'] Preparing data ...')
  PRINT, STR_STATUS
  IF LBL_ID NE -1 THEN WIDGET_CONTROL,LBL_ID,SET_VALUE=STR_STATUS
  FOR FI=0, NF-1 DO BEGIN
    DATA=*PDATA[FI]
    MJDSFI=YDOY2MJD(DATA[1,*], DATA[2,*])
    ARR_IND, MJDS, MJDSFI, INDEX=IND
    DATAA[*,IND,FI]=DATA[3:*,*]
    INDSA[[IND],FI]=1
  ENDFOR
  ;;

  DATES=DBLARR(3,N_ELEMENTS(MJDS))
  FOR DI=0ULL,N_ELEMENTS(MJDS)-1 DO BEGIN
    DOY,MJDS[DI],DYEAR=DYR,DAY_OF_YEAR=DOYR
    DATES[*,DI]=[DYR,FIX(DYR),DOYR]
    ;STOP
  ENDFOR

  FILES=GETFILENAME(FILES[0:nf-1])  ;Save only filenames (NO path names; for cross-OS purpose)

  ;SAVE
  SAVE,FILENAME=OFILE,DATAA,DATES,INDSA,NDAYS,FILES,SITES,NF,HEADERS

  FOR I=0,N_ELEMENTS(PDATA)-1 DO IF PTR_VALID(PDATA[I]) THEN PTR_FREE,PDATA[I]
  FOR I=0,N_ELEMENTS(HEADERS)-1 DO IF PTR_VALID(HEADERS[I]) THEN PTR_FREE,HEADERS[I]

  ;HELP, OFILE,DATAA,DATES,INDSA,NDAYS,FILES,SITES,NF,HEADERS
  STR_STATUS=STRING('['+PROG+'] Normal end.')
  PRINT, STR_STATUS
  IF LBL_ID NE -1 THEN WIDGET_CONTROL,LBL_ID,SET_VALUE=STR_STATUS
  ;THAT'S ALL.
END
