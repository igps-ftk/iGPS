#!/bin/sh

# Name:
#   sh_esa_s1_assemble3_snap
#   

# Purpose:
#   Assemble three frames S1 images, even with two different days, e.g. the end of the first day and the beginning of the second day, or vice versa.

# Example:
#   

# Modifications:
#   

# Algorigthm:
#   

# Dependency:
#   

if [ "$esa_data" = "" ]; then
    echo "[ERROR]ESA environment variable esa_data must be set first! Stopped."
    exit 1
fi


if [ "$esa_unzip" = "" ]; then
    echo "ESA environment esa_unzip variable not set! Stopped!!"
    exit 1
fi

if [ "$1" = "" ]; then
  echo "Usage: sh_esa_s1_assemble3_snap input_file  [iw_type]"
  exit 1
fi

file=$1

iw_typ=iw2
if [ "$2" != "" ]; then
    iw_typ=$2
fi

file_tmp=`pwd`/.tmp.unzip
echo $file_tmp
\rm -f $file_tmp
grep -h '^ ' $file | awk -F_ '{print $6,$0}'| sort |uniq > .files
times=`cat .files | awk '{print $1}'`
file_ids=`cat .files | awk '{print $2}' | awk -F. '{print $1}'`
#echo $file_ids
#exit

ntim=`echo $times | wc -w`
echo "# days: $ntim"
dyrs=
for time_i in $times; do
  year=`echo $time_i | awk '{print substr($1,1,4)}'`
  mon=`echo $time_i | awk '{print substr($1,5,2)}'`  
  day=`echo $time_i | awk '{print substr($1,7,2)}'`
  hr=`echo $time_i | awk '{print substr($1,10,2)}'`
  min=`echo $time_i | awk '{print substr($1,12,2)}'`
  sec=`echo $time_i | awk '{print substr($1,14,2)}'`
  #echo $time_i $year $mon $day $hr $min $sec
  dyr=`doy $year $mon $day $hr $min | tail -1 | awk '{print $3}'`
  dyrs="$dyrs $dyr"
done
#echo $dyrs
#exit

\rm -f .tmp.pair
i=1
while [ $i -lt $ntim ]; do
  dyr1=`echo $dyrs | awk '{print $I}' I=$i`
  file_id1=`echo $file_ids | awk '{print $I}' I=$i`
  j=`expr $i + 1`
  k=`expr $i + 2`
  while [ $j -le $ntim -a $k -le $ntim ]; do  
    dyr2=`echo $dyrs | awk '{print $J}' J=$j`
    file_id2=`echo $file_ids | awk '{print $J}' J=$j`
    dyr3=`echo $dyrs | awk '{print $K}' K=$k`
    file_id3=`echo $file_ids | awk '{print $K}' K=$k`
    is_ok=`echo $dyr1 $dyr2 $dyr3 | awk '{if( ($2-$1)<0.0027 && ($3-$1)<0.0027 ) {print 1}else{print 0}}'`
    if [ $is_ok -eq 1 ]; then  
      echo $i $j $k
      echo $file_id1 $file_id2 $file_id3 >> .tmp.pair
    fi
    j=`expr $j + 2`
  done
  echo $i
  i=`expr $i + 3`
done
#echo $dyrs
#exit

##days=`grep -h '^ ' $file | awk -F_ '{print $6}' | awk -FT '{print $1}' | sort |uniq`
##echo $days
##for day in $days; do
##  echo $day
##  nf=`grep '^ ' -h $file | grep $day | wc -l` 
##  if [ $nf -ne 3 ]; then
##    echo "[]ERROR: not enough files ($nf) for combining data of $day!!"
##    #grep '^ ' -h $file | grep $day
##    continue
##  fi
##  echo "combining $nf frames for $day ..."
##  grep '^ ' -h $file | grep $day |sort | awk '{print $0}' >> $file_tmp
##  #tfiles=`grep '^ ' -h $file | grep $day |sort`
##  #echo $tfiles
##done
##exit  

grep -h '^ ' $file |sort|uniq> $file_tmp

#sh_esa_s1_unzip $file_tmp

\rm -rf raw0 raw
mkdir raw0 raw
cd raw0
pwd
sh_esa_s1_link_raworig $file_tmp $iw_typ
sh_esa_s1_link_orb3 >& tiff_EOF.list
sh_esa_s1_prep_prep $file_tmp $iw_typ

ls -l s1*.tiff | awk '{print $9,$11}' | sed -e 's/.tiff//g'> .tmp.tiff
##days=`grep -h '^ ' $file_tmp | awk -F_ '{print $6}' | awk -FT '{print $1}' | sort |uniq`
##for day in $days; do
##  echo $day
##  echo "combining $nf frames for $day ..."
##  file1=`cat .tmp.tiff | grep $day |sort | awk '{print $1}' | head -1`
##  file2=`cat .tmp.tiff | grep $day |sort | awk '{print $1}' | tail -1`
##  echo assemble_tops 0s 0s $file1 $file2 ../raw/$file1
##  echo assemble_tops 0s 0s $file1 $file2 ../raw/$file1 | sh
##done

#
while read line; do
  echo $day
  echo "combining $nf frames for $line ..."
  id1=`echo $line | awk '{print $1}'`
  id2=`echo $line | awk '{print $2}'`
  id3=`echo $line | awk '{print $3}'`
  echo $id1 $id2 $id3
  file1=`cat .tmp.tiff | grep $id1 | awk '{print $1}'`
  echo $file1
  file2=`cat .tmp.tiff | grep $id2 | awk '{print $1}'`
  echo $file2
  file3=`cat .tmp.tiff | grep $id3 | awk '{print $1}'`
  echo $file3
  echo assemble_tops 0s 0s $file1 $file2 $file3 ../raw/$file1
  echo assemble_tops 0s 0s $file1 $file2 $file3 ../raw/$file1 | sh
done < ../.tmp.pair