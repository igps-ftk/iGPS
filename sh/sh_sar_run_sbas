#!/bin/csh -f
#
# Script to create time series 
#  
#   Xiaohua(Eric) Xu
#   June 2016
#
#Modification
#   Add support to get sbas parameters automatically
#       by tianyf on Mon Jun 26 16:32:55 CST 2017
#
#
# First, prepare the input files needed for sbas
#

if ( "$1" == "-h" || "$1" == "-help" ) then
    echo Usage: sh_sar_run_sbas  [ SAT/ENVI [ grd_ll_filename  [atm_num] ] ]
    echo     To skip one parameter, use \'\' as its value.
    exit 1
endif

set SAT = SAT
if ( "$1" != "" ) then
    set SAT = $1
endif


set file_ll_grd = 
if ( "$2" != "" ) then
    set file_ll_grd = `pwd`/$2
endif

set n_atm = 0
if ( "$3" != "" ) then
    set n_atm = $3
endif
echo $SAT $file_ll_grd $n_atm

#exit

echo "cleaning existing output directory (rm -rf SBAS && mkdir SBAS)"
rm -rf SBAS
mkdir SBAS
cd SBAS && rm -f intf.tab scene.tab
#
# based on baseline_table.dat create the intf.tab and scene.tab for sbas
#
# phase  corherence  ref_id  rep_id  baseline
#echo "../intf_all/2015275_2016078/unwrap.grd ../intf_all/2015275_2016078/corr.grd 2015275 2016078 43.094446" > intf.tab
#echo "../intf_all/2015275_2016294/unwrap.grd ../intf_all/2015275_2016294/corr.grd 2015275 2016294 43.094446" >> intf.tab
#echo "../intf_all/2016078_2016294/unwrap.grd ../intf_all/2016078_2016294/corr.grd 2016078 2016294 0" >> intf.tab

\cp -f  ../intf.tab ./
\cp -f ../scene.tab ./
dos2unix ./intf.tab  ./scene.tab

#echo "../intf_all/2015068_2015092/unwrap.grd ../intf_all/2015068_2015092/corr.grd 2015068 2015092 37.7213" >> intf.tab
#echo "../intf_all/2015068_2015116/unwrap.grd ../intf_all/2015068_2015116/corr.grd 2015068 2015116 7.30062" >> intf.tab
#echo "../intf_all/2015068_2015140/unwrap.grd ../intf_all/2015068_2015140/corr.grd 2015068 2015140 -13.2457" >> intf.tab
#echo "../intf_all/2015092_2015116/unwrap.grd ../intf_all/2015092_2015116/corr.grd 2015092 2015116 -30.4207" >> intf.tab
#echo "../intf_all/2015092_2015140/unwrap.grd ../intf_all/2015092_2015140/corr.grd 2015092 2015140 -50.967" >> intf.tab
#echo "../intf_all/2015116_2015140/unwrap.grd ../intf_all/2015116_2015140/corr.grd 2015116 2015140 -20.5463" >> intf.tab
#
# scene_id  day
#echo "2015275 640" > scene.tab
#echo "2016078 808" >> scene.tab 
#echo "2016294 1024" >> scene.tab
#echo "2015116 472" >> scene.tab
#echo "2015140 496" >> scene.tab
set file_tmp = `head -1 intf.tab | awk '{print $1}'`
echo $file_tmp
set xdim = `gmt grdinfo -C $file_tmp | awk '{print $10}'`
set ydim = `gmt grdinfo -C $file_tmp | awk '{print $11}'`
#
# run sbas
#
set nintf = `cat intf.tab | wc -l`
set nscen = `cat scene.tab | wc -l`
if ( ! -s "../topo/master.PRM" ) then
    echo "[]ERROR: ../topo/master.PRM must exist!!"
    exit 1
endif
set wavelength = `grep "radar_wavelength" ../topo/master.PRM | awk '{print $3}'`
echo wavelength: $wavelength
#exit
#echo 1 > ./incidence
set tmp = `grep ERROR ../incidence`
if ( "$tmp" != "" ) then
    echo "Invalid incidence angle! Re-calculate it."
    rm -f ../incidence
endif

if ( ! -s "../incidence" ) then
    echo "[]INFO:calculating new incidence ..."
    if ( "$file_ll_grd" == "" ) then
        set file_ll_grd = "`dirname $file_tmp`/corr_ll"
    endif
    echo sh_sar_cal_sat_incidence -sat $SAT -file $file_ll_grd
    set incidence = `sh_sar_cal_sat_incidence -sat $SAT -file $file_ll_grd | tail -1`
    set tmp = `echo $incidence | grep -i error`
    if ( "$tmp" != "" ) then
        echo "ERROR: invalid incidence angle ($incidence)!!"
        exit 1
    endif
    echo $incidence > ../incidence
    echo "[]INFO:using new incidence $incidence."
else
    set incidence = `cat ../incidence`
    echo "[]INFO:using old incidence $incidence."
endif
#exit
#range
set near_range = `grep "near_range" ../topo/master.PRM | awk '{print $3}'`
#mean range = near_range + N*dr
#where N is the nunmber of pixel from the center of the scene to near_range
#and dr = C_speed/rng_samp_rate/2
set C_speed = 300000000
set rng_samp_rate = `grep "rng_samp_rate" ../topo/master.PRM | awk '{print $3}'`
set dr = `echo $C_speed $rng_samp_rate | awk '{print $1/$2/2}'`
echo dr: $dr
set Np = `grep "num_rng_bins" ../topo/master.PRM | awk '{print int($3/2)}'` 
echo N: $Np
set range = `echo $near_range $Np $dr | awk '{print $1+$2*$3}'`
echo range: $range

echo  $nintf $nscen $xdim $ydim 
#exit
#sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -smooth 1.0 -wavelength 0.0554658 -incidence 30 -range 800184.946186 -rms -dem
echo time sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -atm $n_atm -smooth 1.0 -wavelength ${wavelength} -incidence ${incidence} -range ${range} -rms -dem
if ( $n_atm == 0 ) then 
    echo time sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -smooth 1.0 -wavelength ${wavelength} -incidence ${incidence} -range ${range} -rms -dem | sh
else
    echo time sbas intf.tab scene.tab $nintf $nscen $xdim $ydim -atm $n_atm -smooth 1.0 -wavelength ${wavelength} -incidence ${incidence} -range ${range} -rms -dem | sh
endif

#exit
#
# project the velocity to Geocooridnates
#
ln -s ../topo/trans.dat .
proj_ra2ll.csh trans.dat vel.grd vel_ll.grd
gmt grd2cpt vel_ll.grd -T= -Z -Cjet > vel_ll.cpt
gmt makecpt -Cjet -T-10/10/.1 -Z -I > vel_ll.cpt4
grd2kml.csh vel_ll vel_ll.cpt4
grd2xyz vel_ll.grd | grep -v NaN | awk '{print "",$0}' > vel_ll.xyz

proj_ra2ll.csh trans.dat rms.grd rms_ll.grd
gmt makecpt -Cjet -T-3/3/.1 -Z -I > rms_ll.cpt
grd2kml.csh rms_ll rms_ll.cpt
grd2xyz rms_ll.grd | grep -v NaN | awk '{print "",$0}' > rms_ll.xyz


sh_grd2nc

cd ..
