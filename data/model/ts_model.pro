;+
; NAME:
;	  TS_MODEL
;
; PURPOSE:
;  	+RETURN RESIDUAL TIME SERIES.
;   +MODEL TERMS.
;
;   REFINED MODEL [NIKOLAIDIS, 2002]
;   HTTP://SOPAC.UCSD.EDU
;
; INPUTS:
;	  T - TIME AXES
;     **TIME SHOULD BE IN UNIT OF DECIMAL YEAR
;   Y - TIME SERIES FOR A SINGLE COMPONENT.
;
; TYPE:
;	  FUNCTION
;   PROCEDURE
;
; NOTE:
;   IT IS NOT OPTIMAL TO ESTIMATE CO-SEISMIC OFFSET ALONG WITH POST-SEISMIC DECAY
;   PARAMETERS.
;
;-
FUNCTION TS_MODEL, $
    T, $  ;X-AXES (TIME IN DECIMAL YEAR)
    Y, $  ;Y-AXES (POSITIONS)
    COEF=COEF, $  ;COEFFICIENTS OF MODEL TERMS: ANNUAL/SEMIANNUA/RATE/OFFSET/...
    YFIT=YFIT, $  ;FITTED POSITIONS TIME SERIES
    ATB=ATB, $
    CCOV=CCOV, $
    ANNUAL=ANNUAL, $  ;WHETHER ESTIMATE AN ANNUAL TERM OR NOT
    SEMIANNUAL=SEMIANNUAL, $  ;WHETHER ESTIMATE AN SEMI-ANNUAL TERM OR NOT
    TTESTS=TTESTS, $
    OFFSET=OFFSET, $  ;EPOCHS WHEN JUMPS OCCURED
    PSDECAY=PSDECAY, $  ;EPOCHS WHEN POST-SEIMIC DECAY OCCURED [SEE BELOW]
    RMSE=RMSE, $  ;THE FIT ROOT-MEAN-SQUARE-ERROR
    SIGMA=SIGMA, $  ;STANDARD ERROR FOR PARAMETERS
    RESIDUAL=RESIDUAL, $  ;RESIDUAL TIME SERIES
    IMSL=IMSL, $
    HARMONICS=HARMONICS, $  ;IN CPY
    DEOFFPS=DEOFFPS, $
    SEASONALFIT=SEASONALFIT, $
    SEASONALDFIT=SEASONALDFIT, $
    RATECHANGE=RATECHANGE,  $
    DT=TD
    
  ;stop
  IF N_ELEMENTS(IMSL) EQ 0 THEN BEGIN
    DEFSYSV,'!IS_IMSL',EXISTS=IS_IMSL
    IF IS_IMSL EQ 1 THEN IMSL=!IS_IMSL ELSE IMSL=0
  ENDIF
  ;NOW, LET'S BEGIN.
  ;**NOTE: GIVEN A T/Y TIME SERIES, THIS FUNCTION RETURN THE MODELED TERMS.
  ;ALGORITHM [NIKOLAIDIS, 2002]:
  ;  X = A + B*T +
  ;      C*SIN(2*PI*T) + D*COS(2*PI*T) +
  ;      E*SIN(4*PI*T) + F*COS(4*PI*T) +
  ;      SUM[ G*HEAVSIDE(T-T_JUMP) ] +
  ;      SUM[ H* ... ]  +            EXPONENTIAL OR LOGARITHMIC
  ;      V
  NDAYS=N_ELEMENTS(T)
  A=DBLARR(2,NDAYS) ;DEFAULT ONLY ESTIMATE SLOPE AND INTERCEPT
  A[0,*]=1  ;INTERCEPT
  A[1,*]=T  ;TREND/SLOPE/RATE
  IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN  ;ANNUAL
    ;TWO KIND OF CALLINGS ACCEPT:
    ;  (1). .. = TS_MODEL(.., /ANNUAL)
    ;  (2). .. = TS_MODEL(.., ANNUAL=ANYTHING)
    ;HOWEVER, NO COEFFICIENTS FOR ANNUAL TERMS ARE RETURNED (THEY ARE IN COEF).
    B=DBLARR(2,NDAYS)
    B[0,*]=SIN(2*!DPI*T)
    B[1,*]=COS(2*!DPI*T)
    C=[A,B]
    A=C
  ENDIF
  IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN  ;SEMI-ANNUAL
    B=DBLARR(2,NDAYS)
    B[0,*]=SIN(4*!DPI*T)
    B[1,*]=COS(4*!DPI*T)
    C=[A,B]
    A=C
  ENDIF
  FOR HI=0,N_ELEMENTS(HARMONICS)-1 DO BEGIN ;ANY COMBINATION OF SEASONAL SIGNALS WITH VARIED PERIODS
    B=DBLARR(2,NDAYS)
    ;ERRNEOUS:  AUG-19-2008 TIAN
    ;B[0,*]=SIN((HARMONICS[HI]+1)*2D0*!DPI*T)
    ;B[1,*]=COS((HARMONICS[HI]+1)*2D0*!DPI*T)
    ;CORRECT:
    B[0,*]=SIN(HARMONICS[HI]*2D0*!DPI*T)
    B[1,*]=COS(HARMONICS[HI]*2D0*!DPI*T)
    C=[A,B]
    A=C
  ENDFOR
  ;INTPU PARAMETER OFFSET ONLY CONTAINS THE TIME OF JUMPS
  ;   E.G.:
  ;      OFFSET=[1999., 2004]
  FOR OI=0, N_ELEMENTS(OFFSET)-1 DO BEGIN
    IF OFFSET[OI] EQ -9999 THEN CONTINUE
    B=DBLARR(1,NDAYS)
    ;fix a bug by tianyf on 2015-05-04
    ;
    ;the old way (it will include the day before the event, IF that day is closer to the event than the day following the event)
    ;TMP=MIN(ABS(T-OFFSET[OI]),POS)
    ;B[0,POS:*]=1
    ;
    ;the new way (only correct the data since the offset)
    POS=WHERE(T GE OFFSET[OI])
    B[POS]=1
    A=[A,B]
  ENDFOR
  ;PSDECAY = [ EPOCH, TAU, TYPE]
  ;  WHEN THERE ARE TWO OR MORE POST-SEISMIC EVENTS:
  ;PSDECAY = [ [ EPOCH1, TAU1, TYPE1], $
  ;            [ EPOCH2, TAU2, TYPE2], $
  ;            ...
  ;            [ EPOCHn, TAUn, TYPEn]]
  ;  WHERE,
  ;    TAU - DECAY TIME CONSTANT
  ;    TYPE:
  ;        0 - EXPONENTIAL
  ;        1 - LOGARITHMIC
  IF N_ELEMENTS(PSDECAY) GE 3 THEN BEGIN
    FOR PI=0, N_ELEMENTS(PSDECAY[0,*])-1 DO BEGIN
      IF PSDECAY[0,PI] GT FIRST(T) THEN BEGIN
        B=DBLARR(2,NDAYS)
      ENDIF ELSE BEGIN
        B=DBLARR(1,NDAYS)
      ENDELSE
      ;TMP=MIN(ABS(T-PSDECAY[0,PI]),POS)
      POS=FIRST(WHERE(T GE PSDECAY[0,PI]))
      CASE PSDECAY[2,PI] OF  ;CURRENT ONLTY CAN DEAL WITH TWO TYPES
        0: BEGIN  ;EXPONENTIAL
          IF PSDECAY[0,PI] GT FIRST(T) THEN BEGIN
            B[0,POS:*]=T[POS:*] ;**ALWAYS** ESTIMATE A RATE CHANGE
            B[1,POS:*]=EXP(-(T[POS:*]-PSDECAY[0,PI])/PSDECAY[1,PI])
          ENDIF ELSE BEGIN
            B[0,POS:*]=EXP(-(T[POS:*]-PSDECAY[0,PI])/PSDECAY[1,PI])
          ENDELSE
        END
        1: BEGIN  ;LOGARITHMIC
          IF PSDECAY[0,PI] GT FIRST(T) THEN BEGIN
            B[0,POS+1:*]=T[POS+1:*]
            ;LOGARITHMIC DECAY FORMULAR:
            ;  R(A,τ)=Aln(1+t/τ)
            B[1,POS:*]=ALOG(1+(T[POS:*]-PSDECAY[0,PI])/PSDECAY[1,PI])
          ENDIF ELSE BEGIN
            B[0,POS:*]=ALOG(1+(T[POS:*]-PSDECAY[0,PI])/PSDECAY[1,PI])
          ENDELSE
        END
      ENDCASE
      A=[A,B]
    ENDFOR
  ENDIF
  
  ;RATE CHANGES
  ;stop
  FOR RI=0, N_ELEMENTS(RATECHANGE)-1 DO BEGIN
    IF RATECHANGE[RI] EQ -9999 THEN CONTINUE
    B=DBLARR(1,NDAYS)
    POS=FIRST(WHERE(T GE RATECHANGE[RI]))
    B[0,POS:*]=T[POS:*] ; ESTIMATE A RATE CHANGE
    A=[A,B]
  ENDFOR
  
  ;
  NP=N_ELEMENTS(A[*,0])
  ;HELP, A
  ;HELP, IMSL
  ;stop
  IF IMSL THEN BEGIN
    A=TRANSPOSE(A) ;THIS STEP IS NEEDED FOR IMSL_... ROUTINES.
    
    ;CALL IMSL_... TO SOLVE THE LINEAR SYSTEM.
    COEF = IMSL_MULTIREGRESS( $
      A, $
      Y , $
      /DOUBLE, $
      COEF_COVARIANCES=CCOV, $
      RESIDUAL=RESIDUAL, $
      ANOVA_TABLE=ATB, $
      T_TESTS=TTEST, $
      RANK=RANK, $
      /NO_INTERCEPT)
      
    SIGMA=TTEST[*,1]
    YFIT=Y-RESIDUAL
    ;print,'coef imsl:',coef
    ;
    
    ;NP=N_ELEMENTS(A[0,*])
    IF N_ELEMENTS(COEF) GE 6 THEN BEGIN
      IF ARG_PRESENT(DEOFFPS) THEN BEGIN
        DEOFFPS=RESIDUAL+COEF[0]+COEF[1]*T+ $
          COEF[2]*SIN(2*!DPI*T)+COEF[3]*COS(2*!DPI*T)+ $
          COEF[4]*SIN(4*!DPI*T)+COEF[5]*COS(4*!DPI*T)
      ENDIF
      IF ARG_PRESENT(SEASONALFIT) THEN BEGIN
        SEASONALFIT=$
          COEF[2]*SIN(2*!DPI*T)+COEF[3]*COS(2*!DPI*T)+ $
          COEF[4]*SIN(4*!DPI*T)+COEF[5]*COS(4*!DPI*T)
      ENDIF
      
      IF ARG_PRESENT(SEASONALDFIT) THEN BEGIN
        DOY,STRTRIM(FIRST(T),2)+'Y',MJD=MJD0,DAY_OF_YEAR=DOYR0
        DOY,STRTRIM(LAST(T),2)+'Y',MJD=MJD1
        NDAYS=ROUND(MJD1-MJD0+1)
        DOY,FIX(FIRST(T)),1,DOYR0,12,0,MJD=MJD0
        TD=DBLARR(NDAYS)
        FOR I=0,NDAYS-1 DO BEGIN
          DOY,MJD0+I,DYEAR=DYR
          TD[I]=DYR
        ENDFOR
        
        SEASONALDFIT=$
          COEF[2]*SIN(2*!DPI*TD)+COEF[3]*COS(2*!DPI*TD)+ $
          COEF[4]*SIN(4*!DPI*TD)+COEF[5]*COS(4*!DPI*TD)
      ENDIF
    ENDIF
  ;help,a
  ;STOP
  ;help,coef
  ;print,coef
    
  ENDIF ELSE BEGIN
    ;HELP,A
    ;On Thu, Nov 12, 2015  4:52:34 PM by tianyf
    ;Method used to estimate parameters are changed from least-square routine (LA_LEAST_SQUARES)
    ;to multiple linear regression procedure (REGRESS).
    ;
    ;    ;old method
    ;    COEF = LA_LEAST_SQUARES( $
    ;      A, $
    ;      Y , $
    ;      /DOUBLE, $
    ;      ;CORRELATION=CCOV, $
    ;      RESIDUAL=RESIDUAL)
    ;stop
    ;New method using REGRESS routine.
    A1=REFORM(A[1:*,*])
    ;HELP,A1
    COEF1 = REGRESS( $
      A1, $
      Y , $
      CHISQ=CHISQ,SIGMA=SIGMA1,CONST=CONST, $
      /DOUBLE,STATUS=STATUS)
    ;HELP, CHISQ
    COEF=[CONST,REFORM(COEF1)]
    ;print,coef
    
    COEF_REM=COEF
    ;YFIT=YFIT,STATUS=STATUS)
    ;FTEST=TTEST, $
    ;SIGMA=SGIMA)
    ;PRINT,COEF
    YFIT=T*COEF_REM[1]+COEF_REM[0]
    IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN  ;ANNUAL
      COEF_REM=COEF_REM[2:*]
      YFIT=YFIT+SIN(2*!DPI*T)*COEF_REM[0]+COS(2*!DPI*T)*COEF_REM[1]
    ENDIF
    
    IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN  ;ANNUAL
      COEF_REM=COEF_REM[2:*]
      YFIT=YFIT+SIN(4*!DPI*T)*COEF_REM[0]+COS(4*!DPI*T)*COEF_REM[1]
    ENDIF
    
    FOR HI=0,N_ELEMENTS(HARMONICS)-1 DO BEGIN
      COEF_REM=COEF_REM[2:*]
      YFIT=YFIT+SIN(HARMONICS[HI]*2D0*!DPI*T)*COEF_REM[0]+COS(HARMONICS[HI]*2D0*!DPI*T)*COEF_REM[1]
    ENDFOR
    
    IF N_ELEMENTS(OFFSET) GT 0 THEN BEGIN
      COEF_REM=COEF_REM[1:*]
    ENDIF
    FOR OI=0, N_ELEMENTS(OFFSET)-1 DO BEGIN
      ;STOP
      IF OFFSET[OI] EQ -9999 THEN CONTINUE
      ;PRINT,OFFSET[OI]
      B=DBLARR(1,NDAYS)
      ;TMP=MIN(ABS(T-OFFSET[OI]),POS)
      POS=FIRST(WHERE(T GE OFFSET[OI]))
      B[0,POS:*]=1
      COEF_REM=COEF_REM[1:*]
      ;PRINT,COEF_REM
      YFIT=YFIT+B*COEF_REM[0]
    ENDFOR
    
    ;STOP
    IF N_ELEMENTS(PSDECAY) GE 3 THEN BEGIN
      COEF_REM=[0,COEF_REM]
      FOR PI=0, N_ELEMENTS(PSDECAY[0,*])-1 DO BEGIN
        IF PSDECAY[0,PI] GT FIRST(T) THEN BEGIN
          B=DBLARR(2,NDAYS)
        ENDIF ELSE BEGIN
          B=DBLARR(1,NDAYS)
        ENDELSE
        ;TMP=MIN(ABS(T-PSDECAY[0,PI]),POS)
        ;STOP
        POS=FIRST(WHERE(T GE PSDECAY[0,PI]))
        CASE PSDECAY[2,PI] OF  ;CURRENT ONLTY CAN DEAL WITH TWO TYPES
          0: BEGIN  ;EXPONENTIAL
            IF PSDECAY[0,PI] GT FIRST(T) THEN BEGIN
              B[0,POS:*]=T[POS:*] ;ESTIMATE A RATE CHANGE
              B[1,POS:*]=EXP(-(T[POS:*]-PSDECAY[0,PI])/PSDECAY[1,PI])
            ENDIF ELSE BEGIN
              B[0,POS:*]=EXP(-(T[POS:*]-PSDECAY[0,PI])/PSDECAY[1,PI])
            ENDELSE
          END
          1: BEGIN  ;LOGARITHMMIC
            IF PSDECAY[0,PI] GT FIRST(T) THEN BEGIN
              B[0,POS:*]=T[POS:*]
              ;LOGARITHMIC DECAY FORMULAR:
              ;  R(A,τ)=Aln(1+t/τ)
              B[1,POS:*]=ALOG(1+(T[POS:*]-PSDECAY[0,PI])/PSDECAY[1,PI])
            ENDIF ELSE BEGIN
              B[0,POS:*]=ALOG(1+(T[POS:*]-PSDECAY[0,PI])/PSDECAY[1,PI])
            ENDELSE
          END
        ENDCASE
        COEF_REM=COEF_REM[2:*]
        YFIT=YFIT+B[0,*]*COEF_REM[0]+B[1,*]*COEF_REM[1]
      ;HELP,YFIT
      ENDFOR
    ENDIF
    
;    ;STOP
;     FOR RI=0, N_ELEMENTS(RATECHANGE)-1 DO BEGIN
;      ;STOP
;      IF RATECHANGE[RI] EQ -9999 THEN CONTINUE      
;      B=DBLARR(1,NDAYS)
;      POS=FIRST(WHERE(T GE RATECHANGE[RI]))
;      B[0,POS:*]=T[POS:*] ; ESTIMATE A RATE CHANGE
;      COEF_REM=COEF_REM[1:*]
;      ;PRINT,COEF_REM
;      YFIT=YFIT+B*COEF_REM[0]
;    ENDFOR
    
    ;STOP
    RESIDUAL=Y-YFIT
    ;SIGMA=DBLARR(N_ELEMENTS(COEF))
    SIGMA=[0,SIGMA1]
    
  ;HELP,T2,Y2FIT
  ;STOP
  ENDELSE
  ;F_TESTS:
  ;  0—coefficient estimate
  ;  1—estimated standard error of the coefficient estimate
  ;  2—t-statistic for the test that the coefficient is 0
  ;  3—p-value for the two-sided t test
  ;
  RMSE=SQRT(TOTAL(RESIDUAL^2)/(NDAYS-NP))
  ;HELP,RMSE,NDAYS,NP,A
  ;PRINT,'RMSE:',RMSE
  
  RETURN, RESIDUAL
END

;TS_MODEL PROCEDURE
;  WHEN POST-SEISMIC DECAY IS PRESENTED, THIS PROCEDURE WILL CALL THE *TS_MODEL*
;  FUNCTION TO SOLVE THE POST-SEISMIC DECAY COEFFICIENTS ITERATELY--ONE BY ONE.
PRO TS_MODEL, $
    T, $
    Y, $
    COEF=COEF, $
    YFIT=YFIT,$
    ATB=ATB, $
    RMSE=RMSE,$
    SIGMA=SIGMA, $
    ANNUAL=ANNUAL, $
    SEMIANNUAL=SEMIANNUAL, $
    OFFSET=OFFSET, $  ;DIFFERENT FROM ABOVE DEFINITION [SEE BELOW]
    PSDECAY=PSDECAY, $  ;DIFFERENT FROM ABOVE DEFINITION [SEE BELOW]
    RESIDUAL=RESIDUAL, $
    PS_TYPE=PS_TYPE, $
    SLOPE=SLOPE, $
    TAU=TAUS, $
    CCOV=CCOV, $
    DEOFFPS=DEOFFPS, $  ;TIME SERIES CORRECTED FOR OFFSET AND POST-SEISMIC DECAY (ONLY LINEAR RATE, ANNUAL AND SEMI-ANNUAL)
    SEASONALFIT=SEASONALFIT, $
    DT=DT,$
    SEASONALDFIT=SEASONALDFIT,  $ ;SEASONAL FIT FOR EACH DAY
    RATECHANGE=RATECHANGE,  $
    T2=T2,Y2FIT=YFIT3
    
  ;ON_ERROR,0
    
  ;STOP
  ;  ;FOR TEST, GENERATE SIMULATED SERIES
  ;  IF N_PARAMS() LT 0 THEN BEGIN
  ;    NDAYS=3000
  ;    X=INDGEN(NDAYS)*1D0/366+1998
  ;    Y=X*(-0.003)+RANDOMU(0,NDAYS)*0.003+SIN(2*!DPI*X)*0.00100
  ;
  ;    EPOCH=NDAYS/4
  ;    ;Y[EPOCH:*]=Y[EPOCH:*]-0.005
  ;    EPOCH=NDAYS*3/4
  ;    ;Y[EPOCH:*]=Y[EPOCH:*]+0.003
  ;    SITE='TEST'
  ;    Y=Y-MEAN(Y)
  ;    Y=Y*1000D0
  ;  ENDIF
    
  IF N_PARAMS() LT 1 THEN BEGIN
    ;IF NO INPUT PARAMETER...
    FILE=FILEPATH(ROOT_DIR=!IGPS_ROOT, $
      SUBDIRECTORY=['example','sio','cleanedNeuUnf'],$
      'bjfsCleanUnf.neu')
      
    file='C:\Papers.data\fwp\position\2016jul01\PPP_COOR.disp\neu.demean\lsch_gfzppp.neu'
    file_resid='C:\Papers.data\fwp\position\2016jul01\PPP_COOR.disp\neu.demean.resid\lsch_gfzppp.neu'
    
    ;    ;EXAMPLE OF INPUT *PSDECAY* PARAMETER.
    ;    ;SIZE, SIGMA, TAU, EPOCH
    ;    PSDECAY=[ $
    ;      [-9999,-9999,-9999,2003.9767D0], $
    ;      [-9999,-9999,-9999,2004.7445]]
    ;    ;
    ;    ;CO-SEISMMIC JUMPS
    ;    ;SIZE, SIGMA, EPOCH
    ;    OFFSET=[[-9999,-9999,2003.9767D0], $
    ;      [-9999,-9999,2004.7445]]
    
    ;THE TEST FILE IS A SIO/NEU FILE.
    READ_SIO, FILE, $
      DATA = DATA
      
    ;QUERY_SIO,FILE, OFFSET_U=OFFSET, PSDECAY_U=PSDECAY
    QUERY_ICD,FILE_resid, OFFSET_E=OFFSET, PSDECAY_E=PSDECAY
    ;stop
    IF OFFSET[2,0] EQ -9999 THEN BEGIN
      OFFSET=-9999
    ENDIF
    IF PSDECAY[3,0] EQ -9999 THEN BEGIN
      PSDECAY=-9999
    ENDIF
    
    ;ANNUAL=1
    ;SEMIANNUAL=1
    
    ;FORM THE TEST SERIES
    T=REFORM(DATA[0,*])  ;X-AXES
    Y=REFORM(DATA[4,*])  ;Y-AXES
    
  ENDIF
  
  
  
  
  ;help,t2
  IF N_ELEMENTS(T2) EQ 0 THEN BEGIN
    ;Date 2000/01/01  0:00 hrs, DOY   1 JD  2451544.5000 MJD  51544.0000
    ;Date 2017/01/01  0:00 hrs, DOY   1 JD  2457754.5000 MJD  57754.0000
    ;Date 2019/01/01  0:00 hrs, DOY   1 JD  2458484.5000 MJD  58484.0000
    ;Date 2021/01/01  0:00 hrs, DOY   1 JD  2459215.5000 MJD  59215.0000
    ;Date 2025/01/01  0:00 hrs, DOY   1 JD  2460676.5000 MJD  60676.0000
    ;Date 2110/02/27  0:00 hrs, DOY  58 JD  2491778.5000 MJD  91778.0000
    MJDS2=FINDGEN(59215ULL-51544ULL)+51544D0
    ;MJDS2=FINDGEN(91778ULL-51544ULL)+51544D0
    JD_TO_DECYRSS, MJDS2, T2
    T2=REFORM(T2)
  ENDIF
  
  ;CHECK IF RATE CHANGE REQUESTED
  IF N_ELEMENTS(RATECHANGE) GE 3 && RATECHANGE[2,0] NE -9999 THEN BEGIN
    IND=INDGEN(N_ELEMENTS(RATECHANGE[0,*]))
    FOR PI=0,N_ELEMENTS(RATECHANGE[0,*])-1 DO BEGIN
      IF RATECHANGE[2,PI] GE LAST(T) || RATECHANGE[2,PI] LE FIRST(T) THEN IND[PI]=-1
    ENDFOR
    POS=WHERE(IND GT -1)
    IF POS[0] NE -1 THEN BEGIN
      RATECHANGE=RATECHANGE[*,POS]
      POS=SORT(RATECHANGE[2,*])
      RATECHANGE=RATECHANGE[*,POS]
    ENDIF
  ENDIF
  
  ;CHECK THE VALID RANGE OF OFFSETS AND PSDECAYS
  IF N_ELEMENTS(OFFSET) GE 3 && OFFSET[2,0] NE -9999 THEN BEGIN
    IND=INDGEN(N_ELEMENTS(OFFSET[0,*]))
    FOR PI=0,N_ELEMENTS(OFFSET[0,*])-1 DO BEGIN
      IF OFFSET[2,PI] GE LAST(T) || OFFSET[2,PI] LE FIRST(T) THEN IND[PI]=-1
    ENDFOR
    POS=WHERE(IND GT -1)
    IF POS[0] NE -1 THEN BEGIN
      OFFSET=OFFSET[*,POS]
      POS=SORT(OFFSET[2,*])
      OFFSET=OFFSET[*,POS]
    ENDIF
  ENDIF
  
  IF N_ELEMENTS(PSDECAY) GE 4 && PSDECAY[3,0] NE -9999 THEN BEGIN
    IND=INDGEN(N_ELEMENTS(PSDECAY[0,*]))
    FOR PI=0,N_ELEMENTS(PSDECAY[0,*])-1 DO BEGIN
      IF PSDECAY[3,PI] GE LAST(T) || PSDECAY[3,PI] LE FIRST(T) THEN IND[PI]=-1
    ENDFOR
    POS=WHERE(IND GT -1)
    IF POS[0] NE -1 THEN BEGIN
      PSDECAY=PSDECAY[*,POS]
      POS=SORT(PSDECAY[3,*])
      PSDECAY=PSDECAY[*,POS]
    ENDIF
  ENDIF
  
  ;SAVE Y FOR FINAL SOLUTION
  YBAK=Y
  ;HOWEVER, THE FINAL SOLUTION PROVED TO PRODUCE A LESS ACCURATE RESULT.
  ;THUS, THE FINAL RUN ARE DISCARDED.
  
  ;POS_IND - INDICATES POSITION OF OFFSET COEFFICIENTS IN *COEF* VARIABLE.
  POS_IND=2
  IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN
    POS_IND=POS_IND+2
  ENDIF
  IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN
    POS_IND=POS_IND+2
  ENDIF
  
  ;THE DEFAULT SEARCH RANGE FOR POST-SEISMIC DECAY TIME CONSTANT.
  ;NIKOLAIDIS [2002] USE A STEP OF 10 DAYS.
  ;THE DEFAULT USE A STEP OF 1 DAYS, FROM 10 TO 510 DAYS.
  IF N_ELEMENTS(TAUS) EQ 0 THEN BEGIN
    TAUS=INDGEN(500)+10
    TAUS=(INDGEN(100)+1)*5
  ENDIF
  
  ;*SLOPE* - ARRAY TO CONTAINS VALUES OF ESTIMATED RATES.
  ;#     slope 1:  0.0072 +/- 0.0004 m/yr (1999.6370 - 2003.9767)
  SLOPE=DBLARR(4)
  SLOPE[*]=-9999D0
  
  IF N_ELEMENTS(PSDECAY) GE 4 && PSDECAY[3,0] NE -9999 THEN BEGIN
    PSDECAY[3,*]=PSDECAY[3,*];+1/365.25D0
    IF N_ELEMENTS(PS_TYPE) EQ 0 THEN PS_TYPE=1  ;DEFAULT TO BE LOGARITHMIC
    NPS=N_ELEMENTS(PSDECAY[3,*])  ;NUMBER OF PSDECAY EVENTS
    ;INITIATE SLOPE ARRAY:
    SLOPE=[[SLOPE], [MAKE_ARRAY(4,N_ELEMENTS(PSDECAY[3,*]),VALUE=-9999D0)] ]
    ;
    CMDSTR='RESIDUAL = TS_MODEL(T,Y, COEF=COEF, ATB=ATB, CCOV=CCOV, SIGMA=SIGMA, YFIT=YFIT, RMSE=RMSE, RESIDUAL=RESIDUAL, DEOFFPS=DEOFFPS';, SEASONALFIT=SEASONALFIT, DT=DT,SEASONALDFIT=SEASONALDFIT'
    ;CMDSTR='RESIDUAL = TS_MODEL(T,Y, COEF=COEF, ATB=ATB, CCOV=CCOV, SIGMA=SIGMA, YFIT=YFIT, RMSE=RMSE, RESIDUAL=RESIDUAL'
    IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN
      CMDSTR=CMDSTR+', /ANNUAL'
    ENDIF
    IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN
      CMDSTR=CMDSTR+', /SEMIANNUAL'
    ENDIF
    IF N_ELEMENTS(OFFSET) GE 3 THEN BEGIN
      OFF_TIME=REFORM(OFFSET[2,*])
      CMDSTR=CMDSTR+', OFFSET=OFF_TIME'
    ENDIF
    IF N_ELEMENTS(RATECHANGE) GE 3 THEN BEGIN
      RC_TIME=REFORM(RATECHANGE[2,*])
      CMDSTR=CMDSTR+', RATECHANGE=RC_TIME'
    ENDIF
    CMDSTR=CMDSTR+', PSDECAY=PS_TIME'
    CMDSTR=CMDSTR+')'
    ;THE ABOVE *OFF_TIME* AND *PS_TIME* VARIABLES ARE IN THE SAME FORMAT OF
    ;THOSE IN *TS_MODEL* FUNCTION.
    ;STOP
    ;PRINT,OFF_TIME
    
    ;SORT THE PS-DECAY TIME. THE LATEST EVENT IS DEALED WITH FIRSTLY.
    ; **THIS IS NOT NEEDED ACCTUALLY, BECAUSE THE TIME IN INPUT *PSDECAY* IS
    ;   ALREADY IN ASSCENDING SEQUENCE.
    ;   IF NOT, WE SORT THEM.
    PS_TIMES=REFORM(PSDECAY[3,*])
    PS_TIMES=PS_TIMES[SORT(PS_TIMES)]
    ;NOW, WE REVERSE THE PS-DECAY TIMES--THE LATEST ONE IS THE FIRST ONE.
    PS_TIMES=REVERSE(PS_TIMES)
    ;*PS_TIME* - INPUT PARAMETER FOR CALLING *TS_MODEL* FUNCTION.
    PS_TIME=DBLARR(3)
    PS_TIME[2,*]=PS_TYPE
    ;SOLVE EACH PS DECAY ITERATELY.
    FOR PI=0,N_ELEMENTS(PSDECAY[3,*])-1 DO BEGIN
      ;RMSES=-1
      RMSES=DBLARR(N_ELEMENTS(TAUS))
      PS_TIME[0]=PS_TIMES[PI]
      FOR TI=0,N_ELEMENTS(TAUS)-1 DO BEGIN
        PS_TIME[1]=TAUS[TI]/365.25D0
        TMP=EXECUTE(CMDSTR)
        ;RMSES=[RMSES,RMSE]
        RMSES[TI]=RMSE
        IF N_PARAMS() LT 2 THEN BEGIN  ;PLOT FOR DEBUG
          WINDOW,0
          ;DEVICE, DECOMPOSED=1
          !P.MULTI = [0, 1, 2]
          PLOT, T,Y,BACKGROUND='FFFFFF'X,COLOR=0
          OPLOT, T,YFIT,COLOR='0000FF'X
          PLOT, T, RESIDUAL, BACKGROUND='FFFFFF'X,COLOR=0
          !P.MULTI=0
        ENDIF
      ENDFOR
      ;GET THE BEST FIT VALUE OF TAU.
      ;RMSES=RMSES[1:*]
      TMP=MIN(RMSES,POS)
      TAU=TAUS[POS]
      ;USE THE BEST *TAU* TO DO THE LATEST MODELLING.
      PS_TIME[1]=TAU/365.25D0
      ;HELP, OFF_TIME, PS_TIME
      TMP=EXECUTE(CMDSTR) ;RUN AGAIN TO CORRENT CURRENT PS-DECAY
      ;CORRECT THE RIGHT PART OF SERIES.
      ;TMP=MIN(ABS(T-PS_TIME[0]),POS)
      POS=FIRST(WHERE(T GE PS_TIME[0]))
      ;FIRST, GET PSDECAY CORRECTIONS.
      CASE PS_TYPE OF
        0: BEGIN
          Y_BIAS=-1D0*T[POS:*]*COEF[N_ELEMENTS(COEF)-2] ;ESTIMATE A RATE CHANGE
          Y_BIAS=Y_BIAS-LAST(COEF)*EXP(-(T[POS:*]-PS_TIME[0])/PS_TIME[1])
        END
        1: BEGIN
          Y_BIAS=-1D0*T[POS:*]*COEF[N_ELEMENTS(COEF)-2]
          ;R(A,τ)=Aln(1+t/τ)
          Y_BIAS=Y_BIAS-LAST(COEF)*ALOG(1+(T[POS:*]-PS_TIME[0])/PS_TIME[1])
        END
      ENDCASE
      ;SAVE THE CURRENT CO-SEISMIC JUMP.
      ;SOMETIME, THERE IS NO CO-SEISMIC JUMP. E.G. AGMT-E
      IF N_ELEMENTS(OFFSET) GE 3 && OFFSET[2] NE -9999 THEN BEGIN
        ;stop
        TMP=MIN(ABS(OFFSET[2,*]-PS_TIME[0]), POS_OFF)
        OFFSET[0,POS_OFF]=COEF[POS_IND+POS_OFF]
        OFFSET[1,POS_OFF]=SIGMA[POS_IND+POS_OFF]
        ;DELETE CURRENT CO-SEISMIC JUMP.
        IND=INV_IND(POS_OFF,TOP=N_ELEMENTS(OFF_TIME))
        ;HELP, IND
        ;PRINT,OFF_TIME
        IF N_ELEMENTS(IND) NE 0 && IND[0] NE -1 THEN BEGIN
          OFF_TIME=OFF_TIME[IND]
        ENDIF ELSE BEGIN
          OFF_TIME=[-9999D0]
        ENDELSE
        ;HELP, OFF_TIME
        ;SECOND, GET CO-SEISMIC JUMP CORRECTIONS.
        Y_BIAS=Y_BIAS-OFFSET[0,POS_OFF]
        ;PERFORM THE CORRECTION: PS-DECAY + CO-SEISMIC
        Y[POS:*]=Y[POS:*]+Y_BIAS
      ENDIF
      ;      ;stop
      ;      IF N_PARAMS() LT 2 THEN BEGIN
      ;        PRINT,CMDSTR
      ;        HELP, PS_TIME
      ;        PRINT,PS_TIME
      ;        PRINT,'TAU:',TAU,' DAYS'
      ;        PRINT,COEF
      ;        WINDOW,1
      ;        ;DEVICE, DECOMPOSED=1
      ;        !P.MULTI = [0, 1, 2]
      ;        PLOT, T,Y,BACKGROUND='FFFFFF'X,COLOR=0, TITLE='RAW & FITTED TIME SERIES'
      ;        OPLOT, T,YFIT,COLOR='0000FF'X
      ;        FOR OI=0, N_ELEMENTS(OFFSET)-1 DO BEGIN
      ;          TMP=MIN(ABS(OFFSET[OI]-T),POS)
      ;          OPLOT,[T[POS],T[POS]],[MIN(Y),MAX(Y)], COLOR='FF0000'X
      ;        ENDFOR
      ;        PLOT, T, RESIDUAL, BACKGROUND='FFFFFF'X,COLOR=0, TITLE='RESIDUAL TIME SERIES'
      ;        FOR OI=0, N_ELEMENTS(OFFSET)-1 DO BEGIN
      ;          TMP=MIN(ABS(OFFSET[OI]-T),POS)
      ;          OPLOT,[T[POS],T[POS]],[MIN(Y),MAX(Y)], COLOR='FF0000'X
      ;        ENDFOR
      ;        !P.MULTI=0
      ;      ;MSGBOX,'TAU:'+STRTRIM(TAU,2)+' DAYS'
      ;      ENDIF
      ;
      ;SAVE CURRENT PS-DECAY PARAMETERS.
      PSDECAY[2,NPS-PI-1]=TAU
      PSDECAY[0,NPS-PI-1]=LAST(COEF)
      PSDECAY[1,NPS-PI-1]=LAST(SIGMA)
      PSDECAY[3,NPS-PI-1]=PS_TIMES[PI]
      
      ;OFFSET PARAMETERS ARE ALREADY SAVED [SEE ABOVE].
      
      ;SAVE RATE CHANGES.
      ;  **NOTE: ONLY RATE CHANGE IS SAVED.
      SLOPE[0,NPS-PI]=COEF[N_ELEMENTS(COEF)-2]
      SLOPE[1,NPS-PI]=SIGMA[N_ELEMENTS(COEF)-2]
      SLOPE[2,NPS-PI]=PS_TIME[0]
      SLOPE[3,NPS-PI-1]=PS_TIME[0]
    ENDFOR  ;END-OF-LOOP FOR EACH PS-DECAY EVENT.
    
    ;STOP
    ;FINAL RUN
    ;++FINAL SOLUTION ARE WORSE THAN ITERATE RUN.
    ;++THUS, NO FINAL SOLUTION.
    GOTO, NO_FINAL_RUN
    ;    Y=YBAK
    ;    PS_TIME=DBLARR(3,N_ELEMENTS(PSDECAY[0,*]))
    ;    PS_TIMES=PSDECAY[3,*]
    ;    IND=SORT(PS_TIMES)
    ;    PSDECAY[3,*]=PS_TIMES[IND]
    ;    PS_TAUS=PSDECAY[2,*]
    ;    PSDECAY[2,*]=PS_TAUS[IND]
    ;    PS_TIME[0,*]=PSDECAY[3,*]
    ;    PS_TIME[1,*]=PSDECAY[2,*]
    ;    PS_TIME[2,*]=PS_TYPE
    ;    TMP=EXECUTE(CMDSTR)
    ;    IF N_PARAMS() LT 2 THEN BEGIN
    ;      PRINT,CMDSTR
    ;      HELP, PS_TIME
    ;      PRINT,PS_TIME
    ;      PRINT,'TAU:',TAU,' DAYS'
    ;      PRINT,COEF
    ;      WINDOW,2
    ;      ;DEVICE, DECOMPOSED=1
    ;      !P.MULTI = [0, 1, 2]
    ;      PLOT, T,Y,BACKGROUND='FFFFFF'X,COLOR=0, TITLE='RAW & FITTED TIME SERIES'
    ;      OPLOT, T,YFIT,COLOR='0000FF'X
    ;      FOR OI=0, N_ELEMENTS(OFFSET)-1 DO BEGIN
    ;        TMP=MIN(ABS(OFFSET[OI]-T),POS)
    ;        OPLOT,[T[POS],T[POS]],[MIN(Y),MAX(Y)], COLOR='FF0000'X
    ;      ENDFOR
    ;      PLOT, T, RESIDUAL, BACKGROUND='FFFFFF'X,COLOR=0, TITLE='RESIDUAL TIME SERIES'
    ;      FOR OI=0, N_ELEMENTS(OFFSET)-1 DO BEGIN
    ;        TMP=MIN(ABS(OFFSET[OI]-T),POS)
    ;        OPLOT,[T[POS],T[POS]],[MIN(Y),MAX(Y)], COLOR='FF0000'X
    ;      ENDFOR
    ;      !P.MULTI=0
    ;    ;MSGBOX,'TAU:'+STRTRIM(TAU,2)+' DAYS'
    ;    ENDIF
    ;    ;HELP, COEF, SIGMA
    ;    ;ASSIGN VALUES
    ;    SLOPE[0,0]=COEF[1]
    ;    SLOPE[1,0]=SIGMA[1]
    ;    SLOPE[2,0]=FIRST(T)
    ;    IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN
    ;      ANNUAL=[[COEF[2],SIGMA[2]], $
    ;        [COEF[3], SIGMA[3]] ]
    ;    ENDIF
    ;    IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN
    ;      SEMIANNUAL=[ [COEF[POS_IND-2],SIGMA[POS_IND-2]], $
    ;        [COEF[POS_IND-1],SIGMA[POS_IND-1]] ]
    ;    ENDIF
    ;    IF N_ELEMENTS(OFFSET) GE 3 THEN BEGIN
    ;      OFFSET[0,*]=COEF[POS_IND:POS_IND+N_ELEMENTS(OFFSET[2,*])-1]
    ;      OFFSET[1,*]=SIGMA[POS_IND:POS_IND+N_ELEMENTS(OFFSET[2,*])-1]
    ;    ENDIF
    ;
    ;    FOR PI=NPS-1,0,-1 DO BEGIN
    ;      SLOPE[0,NPS-PI-1+1]=COEF[N_ELEMENTS(COEF)-2-PI*2]
    ;      SLOPE[1,NPS-PI-1+1]=SIGMA[N_ELEMENTS(COEF)-2-PI*2]
    ;      SLOPE[3,NPS-PI-1+1-1]=PSDECAY[3,NPS-PI-1]
    ;      SLOPE[2,NPS-PI-1+1]=PSDECAY[3,NPS-PI-1]
    ;      PSDECAY[0,NPS-PI-1]=COEF[N_ELEMENTS(COEF)-1-PI*2]
    ;      PSDECAY[1,NPS-PI-1]=SIGMA[N_ELEMENTS(COEF)-1-PI*2]
    ;    ENDFOR
    ;    SLOPE[3,NPS]=LAST(T)
    
    NO_FINAL_RUN:
    ;GOTO, GOT_FINAL_RUN
    ;///LET'S GO ON HERE////////////////////////////////////////////////////////
    ;NOW ALL PS-DECAY PARAMETERS ARE SOLVED.
    ;GET THE INITIAL RATE FROM THE LAST RUN.
    SLOPE[0,0]=COEF[1]
    SLOPE[1,0]=SIGMA[1]
    SLOPE[2,0]=FIRST(T)
    SLOPE[3,NPS]=LAST(T)
    ;FILL THE REMAINING OFFSET PARAMETERS.
    ;Bug fixed - by tianyf on
    ;  The previous non-coseismic offset was already fixed, if there are two/more psdecay events.
    ;    Therefore, we should extract the information ONLY for the remaining offsets.
    IF N_ELEMENTS(OFF_TIME) GE 1 THEN BEGIN
      ;OI=0
      ;PRINT,OFF_TIME
      ;STOP
      IS_SHIFT_POS_IND=0
      FOR I=0, N_ELEMENTS(OFF_TIME)-1 DO BEGIN
        IF OFF_TIME[I] GT PS_TIME[0] AND IS_SHIFT_POS_IND EQ 0 THEN BEGIN
          POS_IND=POS_IND+1
          IS_SHIFT_POS_IND=1
        ENDIF
        TMP=MIN(ABS(OFFSET[2,*]-OFF_TIME[I]), POS_OFF)
        OFFSET[0,POS_OFF]=COEF[POS_IND]
        OFFSET[1,POS_OFF]=SIGMA[POS_IND]
        POS_IND=POS_IND+1
      ;OI=OI+1
      ;PRINT,'OFFSET:',I,OI
      ENDFOR
    ENDIF
    ;    IF N_ELEMENTS(OFFSET) GE 3 THEN BEGIN
    ;      OI=0
    ;      FOR I=0, N_ELEMENTS(OFFSET[0,*])-1 DO BEGIN
    ;        IF OFFSET[0,I] NE -9999 THEN CONTINUE
    ;        OFFSET[0,I]=COEF[POS_IND+I]
    ;        OFFSET[1,I]=SIGMA[POS_IND+I]
    ;        OI=OI+1
    ;        ;PRINT,'OFFSET:',I,OI
    ;      ENDFOR
    ;    ENDIF
    ;STOP
    IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN
      ANNUAL=[[COEF[2],SIGMA[2]], $
        [COEF[3], SIGMA[3]] ]
    ENDIF
    IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN
      SEMIANNUAL=[ [COEF[POS_IND-2],SIGMA[POS_IND-2]], $
        [COEF[POS_IND-1],SIGMA[POS_IND-1]] ]
    ENDIF
    
    ;STOP
    
    ;COMPOSE THE FITTED
    ;help,coef
    YFIT=COEF[0]+COEF[1]*t
    YFIT3=COEF[0]+COEF[1]*t2
    IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN
      YFIT=YFIT+COEF[2]*SIN(2*!DPI*T)+COEF[3]*COS(2*!DPI*T)
      YFIT3=YFIT3+COEF[2]*SIN(2*!DPI*T2)+COEF[3]*COS(2*!DPI*T2)
    ENDIF
    IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN
      YFIT=YFIT+COEF[POS_IND-2]*SIN(2*!DPI*T)+COEF[POS_IND-1]*COS(2*!DPI*T)
      YFIT3=YFIT3+COEF[POS_IND-2]*SIN(2*!DPI*T2)+COEF[POS_IND-1]*COS(2*!DPI*T2)
    ENDIF
    
    FOR OI=0, N_ELEMENTS(OFFSET[0,*])-1 DO BEGIN
      PRINT,offset[*,oi]
      ;TMP=MIN(ABS(T-OFFSET[2,OI]),POS)
      POS=FIRST(WHERE(T GE OFFSET[2,OI]))
      POS3=FIRST(WHERE(T2 GE OFFSET[2,OI]))
      ;print,OFFSET[*,OI]
      YFIT[POS:*]=YFIT[POS:*]+OFFSET[0,OI]
      ;help,pos3
      ;stop
      YFIT3[POS3:*]=YFIT3[POS3:*]+OFFSET[0,OI]
    ENDFOR
    FOR PI=0, N_ELEMENTS(PSDECAY[0,*])-1 DO BEGIN
      ;help,pi
      ;TMP=MIN(ABS(T-PSDECAY[3,PI]),POS)
      POS=FIRST(WHERE(T GE PSDECAY[3,PI]))
      POS3=FIRST(WHERE(T2 GE PSDECAY[3,PI]))
      ;help,pos3
      CASE PS_TYPE OF
        0: BEGIN
          Y_BIAS=+1D0*T[POS:*]*SLOPE[0,PI+1] ;ESTIMATE A RATE CHANGE
          Y_BIAS=Y_BIAS+PSDECAY[0,PI]*EXP(-(T[POS:*]-PSDECAY[3,PI])/(PSDECAY[2,PI]/365.25D0))
          ;
          Y_BIAS3=+1D0*T2[POS:*]*SLOPE[0,PI+1] ;ESTIMATE A RATE CHANGE
          Y_BIAS3=Y_BIAS3+PSDECAY[0,PI]*EXP(-(T2[POS3:*]-PSDECAY[3,PI])/(PSDECAY[2,PI]/365.25D0))
        END
        1: BEGIN
          Y_BIAS=+1D0*T[POS:*]*SLOPE[0,PI+1]
          ;R(A,τ)=Aln(1+t/τ)
          Y_BIAS=Y_BIAS+PSDECAY[0,PI]*ALOG(1+(T[POS:*]-PSDECAY[3,PI])/(PSDECAY[2,PI]/365.25D0))
          ;
          Y_BIAS3=+1D0*T2[POS3:*]*SLOPE[0,PI+1]
          ;R(A,τ)=Aln(1+t/τ)
          Y_BIAS3=Y_BIAS3+PSDECAY[0,PI]*ALOG(1+(T2[POS3:*]-PSDECAY[3,PI])/(PSDECAY[2,PI]/365.25D0))
        END
      ENDCASE
      YFIT[POS:*]=YFIT[POS:*]+Y_BIAS
      YFIT3[POS3:*]=YFIT3[POS3:*]+Y_BIAS3
    ENDFOR
    ;help, yfit
    GOT_FINAL_RUN:
    
    
  ;  ;stop
  ;  ;HELP,NPS
  ;    ;add rate changes to get changed-rate
  ;    FOR PI=NPS,1,-1 DO BEGIN
  ;      SLOPE[0,PI]=TOTAL(SLOPE[0,0:PI])
  ;    ENDFOR
    
  ;THAT'S ALL FOR PS-DECAY MODELLING.
  ENDIF ELSE BEGIN
    ;
    ;help,cmdstr
    ;STOP
    ;CMDSTR='RESIDUAL = TS_MODEL(T,Y, COEF=COEF, SIGMA=SIGMA, YFIT=YFIT, RMSE=RMSE'
    CMDSTR='RESIDUAL = TS_MODEL(T,Y, COEF=COEF, ATB=ATB, CCOV=CCOV, SIGMA=SIGMA, YFIT=YFIT, RMSE=RMSE, RESIDUAL=RESIDUAL, DEOFFPS=DEOFFPS';, SEASONALFIT=SEASONALFIT, DT=DT,SEASONALDFIT=SEASONALDFIT'
    ;CMDSTR='RESIDUAL = TS_MODEL(T,Y, COEF=COEF, ATB=ATB, CCOV=CCOV, SIGMA=SIGMA, YFIT=YFIT, RMSE=RMSE, RESIDUAL=RESIDUAL'
    IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN
      CMDSTR=CMDSTR+', /ANNUAL'
    ENDIF
    IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN
      CMDSTR=CMDSTR+', /SEMIANNUAL'
    ENDIF
    IF N_ELEMENTS(OFFSET) GE 3 THEN BEGIN
      OFF_TIME=REFORM(OFFSET[2,*])
      CMDSTR=CMDSTR+', OFFSET=OFF_TIME'
    ENDIF
    IF N_ELEMENTS(RATECHANGE) GE 3 THEN BEGIN
      RC_TIME=REFORM(RATECHANGE[2,*])
      CMDSTR=CMDSTR+', RATECHANGE=RC_TIME'
    ENDIF
    CMDSTR=CMDSTR+')'
    ;PRINT,CMDSTR
    TMP=EXECUTE(CMDSTR)
    ;HELP,RMSE
    ;STOP
    IF N_PARAMS() LT 2 THEN BEGIN
      ;PRINT,CMDSTR
      PRINT,COEF
      OLD_WIN=!D.WINDOW
      WINDOW,/FREE
      WIN=!D.WINDOW
      ;DEVICE, DECOMPOSED=1
      !P.MULTI = [0, 1, 2]
      PLOT, T,Y,BACKGROUND='FFFFFF'X,COLOR=0, TITLE='RAW & FITTED TIME SERIES'
      OPLOT, T,YFIT,COLOR='0000FF'X
      
      FOR OI=0, N_ELEMENTS(OFFSET)-1 DO BEGIN
        ;TMP=MIN(ABS(OFFSET[OI]-T),POS)
        POS=FIRST(WHERE(T GE OFFSET[OI]))
        OPLOT,[T[POS],T[POS]],[MIN(Y),MAX(Y)], COLOR='FF0000'X
      ENDFOR
      PLOT, T, RESIDUAL, BACKGROUND='FFFFFF'X,COLOR=0, TITLE='RESIDUAL TIME SERIES'
      FOR OI=0, N_ELEMENTS(OFFSET)-1 DO BEGIN
        ;TMP=MIN(ABS(OFFSET[OI]-T),POS)
        POS=FIRST(WHERE(T GE OFFSET[OI]))
        OPLOT,[T[POS],T[POS]],[MIN(Y),MAX(Y)], COLOR='FF0000'X
      ENDFOR
      !P.MULTI=0
      WSET,OLD_WIN
    ENDIF
    ;
    SLOPE=DBLARR(4,1)
    SLOPE[0,0]=COEF[1]
    SLOPE[1,0]=SIGMA[1]
    SLOPE[2,0]=FIRST(T)
    SLOPE[3,0]=LAST(T)
    IF N_ELEMENTS(OFFSET) GE 3 && OFFSET[2,0] NE -9999 THEN BEGIN
      FOR OI=0,N_ELEMENTS(OFFSET[0,*])-1 DO BEGIN
        OFFSET[0,OI]=COEF[POS_IND+OI]
        OFFSET[1,OI]=SIGMA[POS_IND+OI]
      ENDFOR
    ENDIF
    IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN
      ANNUAL=[[COEF[2],SIGMA[2]], $
        [COEF[3], SIGMA[3]] ]
    ENDIF
    IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN
      SEMIANNUAL=[ [COEF[POS_IND-2],SIGMA[POS_IND-2]], $
        [COEF[POS_IND-1],SIGMA[POS_IND-1]] ]
    ENDIF
    
    IF KEYWORD_SET(yfit3) THEN BEGIN
      ;COMPOSE THE FITTED
      ;YFIT=COEF[0]+COEF[1]*t
      YFIT3=COEF[0]+COEF[1]*t2
      IF KEYWORD_SET(ANNUAL) || (N_ELEMENTS(ANNUAL) GT 0 && ANNUAL EQ 1) || (ARG_PRESENT(ANNUAL) && N_ELEMENTS(ANNUAL) EQ 0) THEN BEGIN
        ;YFIT=YFIT+COEF[2]*SIN(2*!DPI*T)+COEF[3]*COS(2*!DPI*T)
        YFIT3=YFIT3+COEF[2]*SIN(2*!DPI*T2)+COEF[3]*COS(2*!DPI*T2)
      ENDIF
      IF KEYWORD_SET(SEMIANNUAL) || (N_ELEMENTS(SEMIANNUAL) GT 0 && SEMIANNUAL EQ 1) || (ARG_PRESENT(SEMIANNUAL) && N_ELEMENTS(SEMIANNUAL) EQ 0) THEN BEGIN
        ;YFIT=YFIT+COEF[POS_IND-2]*SIN(2*!DPI*T)+COEF[POS_IND-1]*COS(2*!DPI*T)
        YFIT3=YFIT3+COEF[POS_IND-2]*SIN(2*!DPI*T2)+COEF[POS_IND-1]*COS(2*!DPI*T2)
      ENDIF
      IF N_ELEMENTS(OFFSET) GE 3 THEN BEGIN
        FOR OI=0, N_ELEMENTS(OFFSET[0,*])-1 DO BEGIN
          ;TMP=MIN(ABS(T-OFFSET[2,OI]),POS)
          ;POS=FIRST(WHERE(T GE OFFSET[2,OI]))
          POS3=FIRST(WHERE(T2 GE OFFSET[2,OI]))
          ;print,OFFSET[*,OI]
          ;YFIT[POS:*]=YFIT[POS:*]+OFFSET[0,OI]
          YFIT3[POS3:*]=YFIT3[POS3:*]+OFFSET[0,OI]
        ENDFOR
      ENDIF
    ENDIF
    
    
  ENDELSE
  
  ;ALL DONE
  
  ;OUTPUT FOR DEBUG
  IF N_PARAMS() LT 2 THEN BEGIN
    PRINT,'COEF:', COEF
    PRINT,'SIGMA:', SIGMA
    PRINT,'OFFSET:', OFFSET
    PRINT,'PSDECAY:', PSDECAY
    PRINT,'SLOPE:', SLOPE
  ENDIF
  
  Y=YBAK
  YFIT=Y-RESIDUAL ; THE RE-COMPOSED MODEL DATA SEEMS MAY CONTAIN SOME ERRORS.
END
