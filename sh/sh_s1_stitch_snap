#!/bin/sh

# Name:
#   sh_s1_stitch_snap
#   

# Purpose:
#   

# Example:
#   

# Modifications:
#   

# Algorigthm:
#   

# Dependency:
#   

PROG=sh_s1_stitch_snap

timestamp=`date | sed -e "s/ /_/g" | sed -e "s/:/-/g"`

path_old=`pwd`

usage_of_it(){
    echo "[$PROG]HELP: $PROG   "
    echo "[$PROG]HELP:   [ -file input_file ]"
    echo "[$PROG]HELP:   [ -iw iw_type ]"
    echo "[$PROG]HELP:   [ -roi pins_file_kml ]"
    echo "[$PROG]HELP:   [ -raw0 RAW0_DIR ]"
    echo "[$PROG]HELP:   [ -raw RAW_DIR ]"

    echo "[$PROG]HELP:   [-h|-help]"
    echo "[$PROG]HELP: e.g.,"
    echo "[$PROG]HELP:   ${PROG} "
}


if [ $# -lt 2 ]; then
  usage_of_it
  exit 1
fi

#temporary files used by this script
file_tmp_pair=`pwd`/_tmp_${PROG}_${timestamp}_pair
file_tmp_tiff_safe=`pwd`/_tmp_${PROG}_${timestamp}_tiff_safe
file_tmp_unzip=`pwd`/_tmp_${PROG}_${timestamp}_unzip
file_roi=`pwd`/pins #temporary ROI file

#default value for command-line parameters 
file_roi_kml=
file=
iw_typ=
path_raw0=`pwd`/raw0
path_raw=`pwd`/raw

while [ "$1" != "" ]; do
    case $1 in
        -file)
            file=$2
            ;;
        -iw)
            iw_typ=$2  
            ;;
        -roi)
            file_roi_kml=$2
            ;;
        -raw0)
            path_old=`pwd`
            cd $2
            if [ $? -ne 0 ]; then
                echo "[$PROG]ERROR: invalid -raw0 value ($2) !!"
                cd $path_old
                exit 1
            fi
            path_raw0=`pwd`
            cd $path_old
            ;;
        -raw)
            path_old=`pwd`
            cd $2
            if [ $? -ne 0 ]; then
                echo "[$PROG]ERROR: invalid -raw value ($2) !!"
                cd $path_old
                exit 1
            fi
            path_raw=`pwd`
            cd $path_old
            ;;
        -h|-help|--help)
            usage_of_it
            exit 1
            ;;
        *)
            echo "[$PROG]ERROR: invalid option ($1) !!"
            usage_of_it
            exit 1
            ;;
    esac
    
    shift 2
done


if [ "$file" = "" ]; then
    echo "[$PROG]ERROR: no input file specified!!"
    exit 1
fi

if [ "$iw_typ" = "" ]; then
    echo "[$PROG]ERROR: no subswath (iw1/iw2/iw3) specified!!"
    exit 1
fi

if [ "$file_roi_kml" != "" ]; then
    #convert ROI
    gmt kml2gmt $file_roi_kml |grep -v '>'  > $file_roi
    cat $file_roi | awk '{print "["PROG"]INRO:"$0}' PROG=$PROG 
fi


master_date=`grep '^ ' $file | head -1 | awk -F_ '{print substr($6,1,8)}'`
echo "[$PROG]INFO: master date is $master_date"
sh_sar_datetime_snap -f $file -o $file_tmp_pair -u $file_tmp_unzip -m $master_date
###
###file_tmp_unzip=`pwd`/.tmp.unzip
###echo $file_tmp_unzip
###\rm -f $file_tmp_unzip
###days=`grep -h '^ ' $file | awk -F_ '{print $6}' | awk -FT '{print $1}' | sort |uniq`
###echo $days
###for day in $days; do
###  echo $day
###  nf=`grep '^ ' -h $file | grep $day | wc -l` 
###  #if [ $nf -ne 1 ]; then
###  #  echo "[$PROG]ERROR: not enough files ($nf) for combining data of $day!!"
###  #  #grep '^ ' -h $file | grep $day
###  #  echo continue
###  #fi
###  echo "[$PROG]INFO: combining $nf frames for $day ..."
###  grep '^ ' -h $file | grep $day |sort | awk '{print $0}' >> $file_tmp_unzip
###  #tfiles=`grep '^ ' -h $file | grep $day |sort`
###  #echo $tfiles
###done
###
###grep -h '^ ' $file_tmp_unzip | awk -F_ '{print $6,$0}'| sort |uniq |grep "$master_date" > .files
###grep -h '^ ' $file_tmp_unzip | awk -F_ '{print $6,$0}'| sort |uniq |grep -v "$master_date" >> .files
###times=`cat .files | awk '{print $1}'`
###file_ids=`cat .files | awk '{print $2}' | awk -F. '{print $1}'`
###echo "file_ids : $file_ids"
####exit
###
###ntim=`echo $times | wc -w`
###echo "# days: $ntim"
###dyrs=
###for time_i in $times; do
###  year=`echo $time_i | awk '{print substr($1,1,4)}'`
###  mon=`echo $time_i | awk '{print substr($1,5,2)}'`  
###  day=`echo $time_i | awk '{print substr($1,7,2)}'`
###  hr=`echo $time_i | awk '{print substr($1,10,2)}'`
###  min=`echo $time_i | awk '{print substr($1,12,2)}'`
###  sec=`echo $time_i | awk '{print substr($1,14,2)}'`
###  #echo $time_i $year $mon $day $hr $min $sec
###  dyr=`doy $year $mon $day $hr $min | tail -1 | awk '{print $3}'`
###  dyrs="$dyrs $dyr"
###done
###echo "dyrs : $dyrs"
###
###
###\rm -f .tmp.pair
###i=1
###is_new=0
###while [ $i -lt $ntim ]; do
###  dyr1=`echo $dyrs | awk '{print $I}' I=$i`
###  file_id1=`echo $file_ids | awk '{print $I}' I=$i`
###  file_ids_i="$file_id1"
###  j=`expr $i + 1`
###  ni=0
###  while [ $j -le $ntim ]; do  
###    dyr2=`echo $dyrs | awk '{print $J}' J=$j`
###    file_id2=`echo $file_ids | awk '{print $J}' J=$j`
###    is_ok=`echo $dyr1 $dyr2  | awk '{if( sqrt(($2-$1)*($2-$1))<0.0027 ) {print 1}else{print 0}}'`
###    if [ $is_ok -eq 1 ]; then  
###      ##echo i j are  $i $j 
###      file_ids_i="$file_ids_i $file_id2"
###      ni=`expr $ni + 1`
###    else
###      echo $file_ids_i  >> .tmp.pair
###      break
###    fi
###    j=`expr $j + 1`
###  done
###  ##echo i ni are $i $ni
###  i=`expr $i + $ni + 1`
###  #ni=0 #??
###done
###
###if [ $ni -eq 0 ]; then
###    file_ids_i=`echo $file_ids | awk '{print $I}' I=$i`
###fi
###echo $file_ids_i  >> .tmp.pair
####echo $dyrs
#exit


\rm -rf  ${path_raw}
mkdir  ${path_raw}
cd ${path_raw}
pwd
sh_s1_link_raworig $file_tmp_unzip $iw_typ
#sh_s1_link_orb3 >& tiff_EOF.list
sh_s1_prep_prep $file_tmp_unzip $iw_typ

ls -l *.tiff | sed -e 's/.tiff//g'> $file_tmp_tiff_safe

#exit


if [ "$file_roi_kml" != "" ]; then
    # get starting and ending azimuths
    pin1=`head -1 $file_roi | awk '{print $1,$2}'` 
    pin2=`tail -1 $file_roi | awk '{print $1,$2}'` 
fi


#mosaic 
\rm -rf tiff_EOF.list
\rm -rf ./data.in
while read safes; do
  nf=`echo $safes | awk '{print NF}'` 
  echo "combining $nf frames for $safes ..."
  files=
  for safe in $safes; do
    file_tiff_i=`grep $safe $file_tmp_tiff_safe | awk '{print $9}'`
    if [ "$files" == "" ]; then
      files="$file_tiff_i"
    else
      files="$files:$file_tiff_i"
    fi
  done
  
  file1=`echo $files | awk -F: '{print $1}'`
  file2=`echo $files | awk -F: '{print $NF}'`
  echo file1 $file1
  echo file2 $file2
  tmp=`echo $file1 | awk -F- '{print $1"-"$2"-"$3"-"$4"-"$5}'`
  ofile=$tmp
  tmp=`echo $file2 | awk -F- '{print "-"$6}'`
  ofile="$ofile$tmp"
  tmp=`echo $file1 | awk -F- '{print "-"$7"-"$8"-"$9}'`
  ofile="$ofile$tmp"
  
  echo "output file: $ofile"
  sh_s1_link_orb_ftk -files ${ofile}.tiff > tiff_EOF.list
  file_orb=`grep '^ ' tiff_EOF.list | tail -1 | awk '{print $2}'`
  echo "${files}:${file_orb}" >> ./data.in
  
  #exit
 
done < $file_tmp_pair

echo "[$PROG]INFO: clean temporary files ..."
echo "\rm -f $file_tmp_pair $file_tmp_tiff_safe"

echo "[$PROG]INFO: done."