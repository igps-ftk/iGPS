#!/bin/bash

# Name:
#   sh_sar_intf_all_cut_roi
#   

# Purpose:
#   Cut corr_cut.grd and unwarp_mask.grd files in intf_all directory according to ROI KML file.


# Example:
#   

# Modifications:
#   

# Algorithm:
#   

# Dependency:
#   trans.dat
#   intf_all/
#

PROG=sh_sar_intf_all_cut_roi

timestamp=`date | sed -e "s/ /_/g" | sed -e "s/:/-/g"`

path_old=`pwd`

usage_of_it(){
cat <<eob
${PROG} 
|_Clip area of interest from interferograms.
  intf_all/: corr_cut.grd, unwarp_mask.grd
|+
  -intf_all/*
  -GMT
  -proj_ll2ra_ascii.csh (GMTSAR)
  -
|<  
  [-r|-roi|-f|-file ROI_KML_FILE]
  [-p|-path INPUT_PATH]
    default: intf_all
  [-o|-opath OUTPUT_PATH]
    default: intf_all_roi
  [-d|-dt|-detrend y|n]
    default: y
  [-h|-help|--help]
|e.g., in F1 (F2/F3)
  ${PROG} -file roi_lasa.kml -opath intf_all_lasa
(c)iGPS (https://github.com/igps-ftk/)
eob
}

if [ $# -eq 0 ]; then
    usage_of_it
    exit 1
fi

file_tmp_grd=_tmp_${PROG}_${timestamp}_grd

roi_file=

types='corr_cut.grd unwrap_mask.grd'


path=./intf_all/
opath=./intf_all_roi/
is_detrend=y

while [ "$1" != "" ]; do
  case $1 in
    -r|-roi|-roi_file|-f|-file)
        roi_file=$2
        ;;
    -p|-path)
        path=$2
        ;;
    -o|-opath)
        opath=$2
        ;;
    -d|-dt|-detrend)
        is_detrend=$2
        ;;
    -h|-help|--help)
      usage_of_it
      exit 1
      ;;
    *)
      usage_of_it
      echo -e "[$PROG]\033[1;33;41mERROR\033[0m: invalid option ($1)!!"
      exit 1
      ;;
  esac
  shift 2
done

echo "[$PROG]INFO: ROI KML is $roi_file"
echo "[$PROG]INFO: $path"
echo "[$PROG]INFO: $opath"

file_tmp_llh=_tmp_$PROG_$timestamp_llh
file_tmp_xyz=_tmp_$PROG_$timestamp_xyz

gmt kml2gmt $roi_file | grep -v '>' | awk '{print $1,$2,0}'>  $file_tmp_llh
cat $file_tmp_llh

ln -s ./topo/trans.dat .

proj_ll2ra_ascii.csh trans.dat $file_tmp_llh $file_tmp_xyz
cat $file_tmp_xyz
#exit

files=`find ${path} -name "corr_cut.grd" | sort`

file=`echo $files | awk '{print $1}'`
pI=`gmt grdinfo -I $file`
#echo $pI
pR=`gmt gmtinfo $pI $file_tmp_xyz`
#echo $pR
#exit

for file in $files; do
    path_in=`dirname $file`
    path_out="${opath}/`basename $path_in`"
    if [ ! -d $path_out ]; then
      mkdir -p $path_out
    fi
    
    #if [ ! -s $path_out/unwrap_mask_ll.png ]; then
    #   \cp -r $path_in/unwrap_mask_ll.png $path_out
    #fi

    for type in $types; do
      file_in=${path_in}/${type}
      file_out=${path_out}/${type}
      if [ -s $file_out ]; then
          echo "[$PROG]INFO: already exist ($file_out). Skipped."
          continue
      fi
 
      if [ "$is_detrend" != "y" ]; then
        echo gmt grdcut $file_in $pR -G${file_out}
        echo gmt grdcut $file_in $pR -G${file_out} | sh
      else
        if [ "$type" = "unwrap_mask.grd" ]; then 
        #if current file is unwarpped phase
          #first, clip file
          echo gmt grdcut $file_in $pR -G${file_tmp_grd}
          echo gmt grdcut $file_in $pR -G${file_tmp_grd} | sh
          #then, detrend it
          echo gmt grdtrend ${file_tmp_grd} -N3r -D${file_out}
          echo gmt grdtrend ${file_tmp_grd} -N3r -D${file_out} | sh
        else
          #if it is corrleation file, only clip it
          echo gmt grdcut $file_in $pR -G${file_out}
          echo gmt grdcut $file_in $pR -G${file_out} | sh
        fi

        \rm -f ${file_tmp_grd}
      fi
    done

    #exit
done

echo "[$PROG]INFO: done."
