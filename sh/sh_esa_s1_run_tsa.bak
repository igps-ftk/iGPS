#!/bin/sh

# Name:
#   sh_esa_s1_run_tsa
#   

# Purpose:
#   

# Example:
#   

# Modifications:
#   

# Algorigthm:
#   

# Dependency:
#   

#. ${HOME}/.bashrc


PROG=sh_esa_s1_run_tsa

usage(){
  echo "[$PROG]INRO: usage: $PROG [-file INPUT_FILE]"
  echo "[$PROG]INRO:   [ -iw IW1/2/3 ]  [-roi ROI_FILE_KML]"
  echo "[$PROG]INRO:   [-comb_method assemble/stitch] [-esd y/n]"
  echo "[$PROG]INRO:   [-master YYYYMMDD]"
  echo "[$PROG]INRO:   [-proc_type landslide/interseismic] [-stage n]"
  echo "[$PROG]INRO:   [-dem_grid china/pbo/...]"
  echo "[$PROG]INRO:"
  echo "[$PROG]INFO: please run this script in the subswatch (iw1/iw2/iw3)"
  echo "[$PROG]INFO:   directory (e.g., under F1/ F2/ F3/)." 
  echo "[$PROG]INFO: a typical layout of the processing session:"
  echo "[$PROG]INFO: PROC_ROOT/"
  echo "[$PROG]INFO:          |-input.lst   (frames list to process)"
  echo "[$PROG]INFO:          |-batch_tops.config   (configuration of processing parameters; default copy from ${esa_data}/config/batch_tops.config.interseismic, if not present)"
  echo "[$PROG]INFO:          |-dem.grd    (dem file)"
  echo "[$PROG]INFO:          |-*.kml   (optional, if dem file not present, *kml files will be used to generate one)"
  echo "[$PROG]INFO:          |-F1/"
  echo "[$PROG]INFO:          |-F2/"
  echo "[$PROG]INFO:          |-F3/"
  echo "[$PROG]INFO:          |-f123/"
  echo "[$PROG]INFO: " 
  echo "[$PROG]INRO:        default input file (file) is input.lst.ok"
  echo "[$PROG]INRO:        default subswath (iw) is iw1"

  echo "[$PROG]INFO:   stage = 9 - processing all steps"
  echo "[$PROG]INFO:           0 - clip DEM (dem.grd)"
  echo "[$PROG]INFO:           1 - cut/merge tiff"
  echo "[$PROG]INFO:           2 - alignment"
  echo "[$PROG]INFO:           3 - create coordinate conversion"
  echo "[$PROG]INFO:           4 - intf"
  echo "[$PROG]INFO:           5 - sbas "
  echo "[$PROG]INFO:"          
  echo "[$PROG]INFO: (c) iGPS 2020 Yunfeng Tian"            
}



if [ "$esa_data" = "" ]; then
    echo "[$PROG]ERROR: ESA environment variable esa_data must be set first! Stopped."
    exit 1
fi

path_cur=`pwd`
path_sess=`dirname $path_cur`
sess=`basename $path_sess`
echo "[$PROG]INFO: session $sess"

sess_stage=9 #processing all steps


file='../input.lst.ok'

iw_typ=iw1

file_roi_kml=

comb_method=stitch #assemble - use assemble_tops program; stitch - use stitch_tops program
comb_method=assemble

is_esd=y

proc_type=interseismic
proc_type=landslide

master= #use the first observation as the super-master by default

#to-be-excluded S1 scenes (file_exclude)
file_exclude=../exclude_scene.txt

skip_align=n
skip_intf=n

dem_grid_file=${esa_data}/topo/srtm3/grid/china.grd
#dem_grid_file=${esa_data}/topo/srtm3/pbo/pbo.grd



if [ "$1" == "" ]; then
    echo "[$PROG]INRO: usage: $PROG -file INPUT_FILE  [ -iw IW1/2/3 ]  [-roi ROI_FILE_KML]"
    echo "[$PROG]INRO:        default input file (file) is input.lst.ok"
    echo "[$PROG]INRO:        default subswath (iw) is iw1"
    echo "[$PROG]WARNING: using default settings to process ..."
    #exit 1
fi

while [ "$1" != "" ]; do
    case $1 in
        -comb_method)
            comb_method=$2  
            ;;
        -dem_grid)
            case $2 in
              china)
                dem_grid_file=${esa_data}/topo/srtm3/grid/china.grd
                ;;
              pbo)
                dem_grid_file=${esa_data}/topo/srtm3/pbo/pbo.grd
                ;;
              *)
                echo "[]ERROR: invalid DEM Grid ($2)!!"
                exit 1
                ;;
            esac
            ;;
        -esd)
            is_esd=$2
            ;;
        -file)
           if [ ! -s $2 ]; then
             echo "[$PROG]ERROR: input file not exist ($2) !!"
             exit 1
            fi
            file=`pwd`/$2
            ;;
        -iw)
            iw_typ=$2  
            ;;
        -master)
            master=$2
            ;;
        -proc_type)
            proc_type=$2
            ;;

        -roi)
           if [ ! -s $2 ]; then
             echo "[$PROG]ERROR: input file not exist ($2) !!"
             exit 1
            fi
            file_roi_kml=`pwd`/$2
            ;;
        -stage)
           sess_stage=`echo $2 | awk '{print $1+0}'`
           ;;
        -skip_align)
           skip_align=$2
           ;;
        -skip_intf)
           skip_intf=$2
           ;;
        -h|--help)
           usage
           exit 1
           ;;
        *)
            echo "[$PROG]ERROR: invalid option ($1) !!"
            exit 1
            ;;
    esac
    
    shift 2
done


#>>>SESSION_STAGE_0
if [ $sess_stage -lt 0 ]; then
  exit
fi

#processing step 0: create dem.grd

if [ ! -s ../dem.grd ] ; then
    path_dem=${esa_data}/topo/srtm3/${sess}
    #path_dem=`pwd`/..
    if [ -s ${path_dem}/dem.grd ]; then
     echo "[$PROG]INFO: ln -s ${path_dem}/dem.grd $path_sess"
     echo ln -s ${path_dem}/dem.grd $path_sess | sh
    else
        mkdir -p ${path_dem}/
        files_kml=`find $path_sess -maxdepth 1 -name "*.kml"`
        if [ "$files_kml" = "" ]; then
            echo "[$PROG]ERROR: DEM file ../dem.grd is mondatory !! Stopped."
            exit 1
        fi
        echo "[$PROG]WARNING: DEM file ../dem.grd is mondatory and missing!"
        echo "[$PROG]INFO: creating dem.grd file from KML files if available"
        cd $path_dem
        \rm -f .tmp.kml
        for file_kml in $files_kml; do
            gmt kml2gmt $file_kml >> .tmp.kml
        done
        xmin=`gmt gmtinfo -C .tmp.kml | awk '{print $1-.3}'`
        xmax=`gmt gmtinfo -C .tmp.kml | awk '{print $2+.3}'`
        ymin=`gmt gmtinfo -C .tmp.kml | awk '{print $3-.3}'`
        ymax=`gmt gmtinfo -C .tmp.kml | awk '{print $4+.3}'`
        echo "[$PROG]INFO: geographical ranges $xmin $xmax $ymin $ymax "
        ##gmt grdcut ${esa_data}/topo/srtm3/grid/china.grd -Gdem.grd -R${xmin}/${xmax}/${ymin}/${ymax}
        gmt grdcut ${dem_grid_file} -Gdem.grd -R${xmin}/${xmax}/${ymin}/${ymax}

        zmin=`gmt grdinfo -C dem.grd | awk '{print $6}'`
        zmax=`gmt grdinfo -C dem.grd | awk '{print $7}'`
        echo "[$PROG]INFO: topo range zmin zmax $zmin $zmax"
        gmt makecpt -Cjet -T$zmin/$zmax/1 -Z -I > dem.cpt
        grd2kml.csh dem ./dem.cpt
        ln -s ${path_dem}/dem.grd $path_sess
        cd $path_cur
    fi
fi
pwd
#exit

mkdir -p topo
cd topo
if [ ! -s dem.grd ]; then
    \rm -f dem.grd >& /dev/null
    ln -s ../../dem.grd ./ 
fi
cd ..
#<<<SESSION_STAGE_0



#>>>SESSION_STAGE_1
if [ $sess_stage -lt 1 ]; then
  exit
fi

echo "[$PROG]INRO: input file is $file"
echo "[$PROG]INRO: subswath is $iw_typ"
iw_i=`echo $iw_typ | awk '{print substr($1,3,1)}'`
echo "[$PROG]INRO: ROI file is $file_roi_kml"


#prepare configuration file (batch_tops.config) in the parent directory, if not present
file_config_esa_data=${esa_data}/config/batch_tops.config.${proc_type}
if [ ! -s $file_config_esa_data ]; then
  echo "[$PROG]ERROR: no configuation file ($file_config_esa_data)!!"
  exit 1
fi

if [ ! -s ../batch_tops.config ]; then
    echo "[$PROG]INFO: default configuration file ($file_config_esa_data) copied."
    \cp -fp $file_config_esa_data ../batch_tops.config
else
    file ../batch_tops.config
fi


#this program first combine two adjacent frames and then do time series analysis
#content of file
# one frame each line with leading blank column
# S1A_IW_SLC__1SSV_20141020T115800_20141020T115827_002913_0034D7_89AC.manifest.safe        0.9040404040404041
# S1A_IW_SLC__1SSV_20141020T115825_20141020T115852_002913_0034D7_F546.manifest.safe        1.0000000000000000

#S1 scenes to be processed
file_proc=`pwd`/.s1_proc_list
grep '^ ' $file > $file_proc
if [ -s $file_exclude ]; then
    grep '^ ' $file_exclude > .tmp_s1_exclude
    while read line; do
      fname=`echo $line|awk '{print $1}'`
      tmp=`grep $fname $file_proc`
      if [ "$tmp" == "" ]; then
        continue
      fi
      grep -v $fname $file_proc > .tmp_s1_proc
      \mv -f .tmp_s1_proc $file_proc
    done < .tmp_s1_exclude
    
    grep '^ ' $file_exclude | wc -l
fi

np=`grep '^ ' $file |wc -l`
nproc=`grep '^ ' $file_proc | wc -l`
echo "[$PROG]INRO: $nproc scenes to processing"



#processing step 1: prepare the data

echo "[$PROG]INRO: (1) prepare the data (link & assemble/stitch ...)"
if [ "$comb_method" == "assemble" ]; then
  echo "[$PROG]INRO: output log to log.asmb "
  if [ "$file_roi_kml" != "" ]; then
      sh_esa_s1_assemble_snap -file $file_proc -iw $iw_typ -roi $file_roi_kml > log.asmb
  else
      sh_esa_s1_assemble_snap -file $file_proc -iw $iw_typ > log.asmb
  fi
  
  echo "[$PROG]INRO: link orbit files to ./raw directory"
  cd raw
  sh_esa_s1_link_orb4 >& tiff_EOF.list
  grep '^ ' ../raw/tiff_EOF.list | sed -e 's/.tiff /:/g'> ../data.in
  cd ..
  echo "[$PROG]INRO: return to `pwd`"

elif [ "$comb_method" == "stitch" ]; then
  echo "[$PROG]INRO: output log to log.stch "
  sh_esa_s1_stitch_snap -file $file_proc -iw $iw_typ > log.stch
else
  echo "[$PROG]ERROR: wrong type ($comb_method) for merging frames!!"
  exit 1
fi
#exit





echo "[$PROG]INRO: create spatiotemporal baseline information"
cd raw
echo "[$PROG]INRO: working in `pwd`"
\rm -rf dem.grd
ln -s ../topo/dem.grd .
#
# in order to correct for Elevation Antenna Pattern Change, cat the manifest and aux files to the xmls
# delete the first line of the manifest file as it's not a typical xml file.
#?
#
echo "[$PROG]INRO: prepare batch preprocessing input file (data.in)"
#../data.in
# s1a-iw3-slc-vv-20141018t121353-20141018t121418-002884-00343c-003:S1A_OPER_AUX_POEORB_OPOD_20141108T123712_V20141017T225944_20141019T005944.EOF
# s1a-iw3-slc-vv-20141111t121352-20141111t121418-003234-003bbb-003:S1A_OPER_AUX_POEORB_OPOD_20141202T123609_V20141110T225944_20141112T005944.EOF
#
if [ "$master" == "" ]; then
  master=`grep -h '^ ' $file | head -1 | awk -F_ '{print substr($6,1,8)}'`
fi
echo master is $master
#exit
if [ "$master" != "" ]; then
  tmp=`cat ../data.in | grep "\-${master}t"`
  if [ "$tmp" == "" ]; then
    echo "[$PROG]ERROR: given super-master ($mater) no found!!"
    exit 1
  fi
  cat ../data.in > .tmp.data.in
  grep "\-${master}t" .tmp.data.in > ../data.in
  grep -v "\-${master}t" .tmp.data.in >> ../data.in
  #\rm -rf .tmp.data.in
fi
cat ../data.in
#exit

#get the baseline_time plot first, use the first one (1st line in data.in) as the supermaster, save the baseline_table.dat for sbas use.
echo "[$PROG]INRO: output log to log.prep "
preproc_batch_tops.csh ../data.in dem.grd 1 >& ../log.prep
gmt psconvert -A -Tejf baseline.ps
cp -f baseline.* ../
cp -f baseline_table.dat ../
rm *.PRM* *.SLC *.LED >& /dev/null
cd ..
echo "[$PROG]INRO: return to `pwd`"
#exit
#<<<SESSION_STAGE_1



#>>>SESSION_STAGE_2
if [ "$skip_align" == "y" ]; then
  exit
fi
if [ $sess_stage -lt 2 ]; then
  exit
fi

#processing step 2: alignment
echo "[$PROG]INRO: (2) generating SLC (align)"
cd raw
echo "[$PROG]INRO: working in `pwd`"
echo "[$PROG]INRO: output log to log.algn "
echo "[$PROG]INRO: a bit slow (especially when data files are large)... "
t1=`date "+%s"`
if [ "$is_esd" == "y" ]; then
  which preproc_batch_tops_esd.csh
  preproc_batch_tops_esd.csh ../data.in dem.grd 2 1 >& ../log.algn #for new version GMT5SAR
else
  which preproc_batch_tops_esd.csh
  preproc_batch_tops.csh ../data.in dem.grd 2  >& ../log.algn

fi
sleep 5
t2=`date "+%s"`
dt=`echo $t1 $t2 | awk '{print $2-$1}'`
dt_min=`echo $t1 $t2 | awk '{printf("%8.3f", ($2-$1)/60.)}' | awk '{print $1}'`
echo "[$PROG]INRO: alignment finished by $dt seconds (~ $dt_min minutes)"


echo "[$PROG]INRO: re-geneate the correct version of baseline_table.dat file"
#ls S1*ALL_*.PRM |sort > prmlist
#create prmlist from data.in
cat ../data.in | awk -F- '{print "S1_"substr($5,1,8)"_ALL_F"iw_i".PRM"}' iw_i=$iw_i > prmlist

#id_master=`head -1 data.in | awk -F- '{print substr($5,1,8)}'`
#echo "[$PROG]INFO: master scene is $id_master"
#PRM_master=`grep $id_master prmlist`

echo "get_baseline_table.csh prmlist `head -1 prmlist`"
echo "get_baseline_table.csh prmlist `head -1 prmlist`" | sh
\cp -fp baseline_table.dat ../

cd ..
echo "[$PROG]INRO: return to `pwd`"
sh_mail -prog "${PROG}-alignment" -text "`pwd`" 
#exit
#<<<SESSION_STAGE_2



#>>>SESSION_STAGE_3
if [ $sess_stage -lt 3 ]; then
  exit
fi
#processing step 3: project geographic DEM to radar coordinates
echo "[$PROG]INRO: (3) coordinate conversion"
echo "[$PROG]INRO: creating input file (intf.in) for producing interferograms"
#sh_esa_s1_prep_proc $file $iw_typ
#sh_esa_s1_prep_proc_baseline -file baseline_table.dat -min_interval 1 -max_interval 121
sh_esa_s1_prep_proc_baseline_sort -file baseline_table.dat
#sh_esa_s1_prep_proc_time_sort -file baseline_table.dat
\cp -fp intf.in intf.in.0
shuf intf.in.0 > intf.in.0s 

echo "[$PROG]INRO: creating coordinate conversion files (trans.dat) ..."
master=`grep master_image batch_tops.config | awk '{print $3}'`

echo " "
echo "DEM2TOPOPHASE.CSH - START"
echo "USER SHOULD PROVIDE DEM FILE"
cd topo
cp ../raw/$master.PRM ./master.PRM
ln -s ../raw/$master.LED .
if [ -s dem.grd ]; then
  if [ "x$region_cut" == "x" ]; then
    time dem2topo_ra.csh master.PRM dem.grd
  else
    cut_slc master.PRM junk $region_cut 1
    mv junk.PRM master.PRM
    time dem2topo_ra.csh master.PRM dem.grd
  fi
else
  echo "no DEM file found: " dem.grd
  continue
fi
cd .. #return from topo to F?
echo "DEM2TOPOPHASE.CSH - END"

if [ -s topo/topo_ra.grd ]; then
  \cp -f batch_tops.config _tmp_config
  sed -e "s/proc_stage.*/proc_stage = 2/" _tmp_config > batch_tops.config
fi

if [ "$proc_type" == "landslide" -o "$proc_type" == "normal" ]; then
  \cp -f batch_tops.config _tmp_config
  sed -e "s/threshold_snaphu.*/threshold_snaphu = 0.01/" _tmp_config > batch_tops.config
fi
#<<<SESSION_STAGE_3


#>>>SESSION_STAGE_4
if [ $sess_stage -lt 4 ]; then
  exit
fi
#processing step 4: interferometric analysis
echo "[$PROG]INRO: (4) generating interferograms"
  
sort intf.in.0 | head -1 > intf.in
wc -l intf.in
  
if [ "$proc_type" == "landslide" ]; then
  sh_esa_s1_prep_proc_baseline -file baseline_table.dat -min_interval 1 -max_interval 121 -update_config n
  \cp -fp intf.in intf.in.1
  ##cat intf.in.1|grep S1_2020 |sort > intf.in #for task-2020-07/08
  sort intf.in.1 | head -1 > intf.in
  cat intf.in.[1] | shuf | grep -v "`head -1 intf.in`">> intf.in
fi

if [ "$proc_type" == "normal" ]; then
  #sh_esa_s1_prep_proc_baseline -file baseline_table.dat -min_interval 1  -update_config n
  \cp -f intf.in.0s intf.in
fi

if [ "$proc_type" == "interseismic" ]; then
  sh_esa_s1_prep_proc_baseline -file baseline_table.dat -min_interval 1 -max_interval 121 -update_config n
  \cp -fp intf.in intf.in.1
  sh_esa_s1_prep_proc_baseline -file baseline_table.dat -min_interval 121  -update_config n
  \cp -fp intf.in intf.in.2
  shuf intf.in.2 > intf.in.2s
  #  
  sort intf.in.1 | head -1 > intf.in
  head -2000 intf.in.2s > intf.in.a
  cat intf.in.[1a] | shuf | grep -v "`head -1 intf.in`">> intf.in
fi

sh_esa_s1_prep_sbas -time_span_min 1
mkdir -p b0-/
cp *.tab1 b0-/

if [ "$skip_intf" == "y" ]; then
  exit
fi
echo "[$PROG]INRO: generating interferograms (time-consuming) ... take a rest :)"
intf_tops.csh intf.in batch_tops.config >& log.intf
sh_sar_cp_los_ll_png
sh_mail -prog "${PROG}-intf_tops" -text "`pwd`" 
#<<<SESSION_STAGE_4



#>>>SESSION_STAGE_5
#processing step 5: SBAS analysis
if [ $sess_stage -lt 5 ]; then
  exit
fi
echo "[$PROG]INRO: (5) generating time series and velocities"
is_snaphu=`cat batch_tops.config | grep threshold_snaphu | awk '{if(index($0,"#")>0){print substr($0,1,index($0,"#")-1)}else{print $0}}' |tail -1 | awk -F= '{if($2>0){print 1}else{print 0}}'`
if [ $is_snaphu -eq 1 ]; then
    #sh_sar_cp_los_ll_png 
    sh_sar_intf_tab_from_phase_files
    #sh_intf_remove_trend
    #ln -s intf_all_detrend ia
    sh_esa_s1_sbas
    sh_mail -prog "${PROG}-sbas" -text "`pwd`" 
#else
#    sh_sar_cp_los_ll_png
fi

#<<<SESSION_STAGE_5
