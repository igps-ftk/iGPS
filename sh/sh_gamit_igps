#!/bin/csh -f
#
#doc Script to run a GAMIT solution from raw data.   
#doc
#
# Script to run a GAMIT solution from raw data.   
#
#  Written by S. McClusky from earlier version by T. Herring and
#  based on many scripts written by P. Fang for SOPAC processing
#  Last modified 2015/08/04 by R. King; 2015/08/12 by M. Floyd
#  Last modified 2018/05/30 by R. King  
#                                                               
#  - sets up a directory structure for GAMIT
#  - gets tables and data from various archives around the world   
#  - converts raw to RINEX if necessary
#  - runs GAMIT and saves phase sky-plots to check daily quality
#
#  To run for a particular 'experiment', create a /tables directory within
#  your experiment directory, copy into /tables the following files from
#  gg/templates and modify them appropriately: 
#     process.defaults     sites.defaults
#     sestbl.              sittbl.
#     autcln.cmd           station.info
#  If the standard (gg/templates) versions are ok, you need not make the copy;
#  it will be done automatically by sh_gamit.
#
######################## INSTRUCTIONS #############################
# See if arguments passed
if( $#argv == 0 || ` echo $1 | cut -c2-` == 'help' ) then
  echo "=================================================================================="
  echo "  "
  echo " Sh_gamit is a script to automate GAMIT processing " 
  echo "  "
  echo " - sets up a directory structure for GAMIT "
  echo " - gets tables and data from various archives around the world "
  echo " - converts raw to RINEX if necessary "
  echo " - runs GAMIT and saves phase sky-plots to check daily quality "
  echo "  "
  echo " To run for a particular experiment, create a /tables directory within "
  echo " your experiment directory, copy into /tables the following files from  "
  echo " gg/templates and modify them appropriately: "
  echo "   process.defaults    sites.defaults"
  echo "   sestbl.             sittbl."
  echo "   autlcn.cmd          station.info"
  echo " Check other files in the templates directory. Edit them to suit the type  " 
  echo " of analysis you are running, and the options you like."
  echo "  "
  echo " Script to automate GAMIT processing" 
  echo "  "
  echo " Usage: sh_gamit <options> "
  echo "  "
  echo " Where the following are some of the options avaiable: "
  echo "  "                                                                           
  echo " -dir           Experiment directory or root directory for experiment processing. "
  echo "                This must be an absoute path. [Default pwd]"
  echo " -d yr days     where yr and days are the data to be processed e.g. 1997 153 156 178 "
  echo " -s yr d1 d2    where d1 is start day and d2 is stop day to be processed e.g. 1997 153 178 "
  echo " -r day         where day is number of days before current date. "
  echo " -gnss          GNSS ( G R C E J I) default G "
  echo " -expt          4 char name of experiment/s to run. (list of expts can be used). [Default expt] "
  echo " -orbit         Type of orbit to use. (igsf igsr igsu codf code codm emrf esaf gfzf gfzm grgm jaxm jplf mitf ngsf siof sior siou tumm wuhm [Default igsf]" 
  echo "                   See sh_get_orbits for description.   Optional second argument gives the day-of-year for the orbit if not the same as processing day"
  echo " -orbt          4 char ID for g-files. Specify only to use a non-conventional, locally generated g-file [Default is lowercase of downloaded orbit type]"
  echo " -eops          Name of EOP series to use. (bull_b, bull_a, etc.) [Default usno] "
  echo " -localeop      Use a local copy of EOP tables (series used is defined by -eops)."
  echo "                No ftp update will be attempted. [Default off]"
  echo " -remakex Y/C/N Y - Remake x-files without checking."
  echo "                C - Remake x-file if orbit and session.info are incompatable and all RINEX available [Default C]"
  echo "                N - Don't remake x-files under any circumstances"   
  echo " -renamek Y/C/N Y - Remove existing k-files and remake "
  echo "                C - Do not remake k-files unless missing or X-files remade (default)"
  echo "                N - Do not remake k-files -- stop if missing"   
  echo " -remakej Y/N   Y - Remake j-file (default)"
  echo "                N - Do not remake j-file (used with epoch-by-epoch j-files for SA with mismatched time tags)"
  echo " -netext char   add network suffix <char> to day directories (default if -gnss not in the command line is none (day number only): otherwise use the GNSS code, e.g., 301G)"
  echo " -yrext         add year prefix to day directories. Ie 1997_053  "
  echo " -pres          Plot gamit residuals as skyplots NO / YES (skyplot only) / ELEV (skyplot + phase vs elevation [Default N] "
  echo " -nopngs        Do NOT create skyplot pngs. "
  echo " -sessinfo      Session - sampling interval, number of epochs, start time (default 30 2880 0 0)"   
  echo " -rx_doy_plus   Search RINEX file names this many days into the future for current-day data" 
  echo " -rx_doy_minus  Search RINEX file names this many days into the past for current-day data" 
  echo " -minspan       Minimum span of data in rinex files in hours [Default is 0.1 (6 min)]"
  echo " -mailto        Name of user and machine to send results summary. (eg. simon@wegener.mit.edu)"
  echo " -snrres        Calculate theoretical phase residuals from SNR. (requires raw data or rinex W/SNR)"
  echo " -noacc         Do not exclude satellites base on accuracy codes in the .sp3 file. [Default exclude]"
  echo " -ofit val      Maximum orbit misfit allowed when fitting GMAIT orbit model to .SP3 file. [Default 0.1 m]"  
  echo " -xsite list    List of sites to be excluded from the processing. [format site:yyyy_ddd-yyyy_ddd OR site]"        
  echo " -copt  opts    Types of files to be compressed in the day directory. [Default: x k ao D] "
  echo " -aopt  opts    Types of files to be archived under -archivepth <dir>. [Default: null]"   
  echo " -dopt  opts    Types of files to be deleted from the day directory. [Default: c] "
  echo "                Possible d-, c-, and a- opts: D, H, ao, ac, as, b, c, d, e, g, h, i, j, k, l, m, met, o, p, ps, q, t, x, z, all"  
  echo "                Note:  all for -dopt will also remove the day directories, so pairs logically with -aopt H h q as " 
  echo ' -topt  opts    Defines the list of table files to be relinked if they already exist [Default = none]'
  echo '                none all nutabl. soltab. luntab. gdetic.dat guess_rcvant.dat leap.sec svnav.dat svs_exclude.dat'
  echo '                tform.dat antmod.dat rcvant.dat dcb.dat '
  echo '                core pole ut1' 
  echo " -c             Do not compress RINEX files when done [Default is to compress]"
  echo " -h             Use Hatanaka RINEX compress algorithm. [Default No]"
  echo ' -archivepth dir   Directory where files are to be archived [Default $procdir/archive]  '
  echo " -xver char     1-character x-file version (6th character of x-file). [Default is single-digit year]"
  echo " -noftp         Use this option if no ftp download connections are available."    
  echo " -met           Link in RINEX met files from ../met [Default off]"  
  echo " -ion [opts]    Download IONEX files to ../ionex and link [Default igsg if no argument given]"

  echo " -ftp_prog      Name of ftp program: ftp or ncftp [default is ftp]"
  echo " -rinex_ftpsites List of ftp sites to be searched for rinex files [default sopac cddis and unavco]"
# MOD TAH 130915: Added -subdir option to be passed into sh_get_rinex
  echo " -subdir        creates a temporary subdirectory to speed up uncompress when there are many rinex files in directory"
  echo " -aprfile       Name of xyz coordinate .apr file to be used. [Default is itrf2000.apr]"
  echo " -xcheck        Y/N Do not ftp rinex file if the xfile exists already [Default N]"
  echo " -noprocess opt Use this option if gamit processing should be avoided. [Default ftp]."
  echo "                Possible: ftp - ftp rinex, eop, brdc, orbits."
  echo "                          preproc - ftp + preprocess sites updating station.info and lfile if necessary."
  echo " -update_l (Y/N) Use this option to stop the l-file being updated by the .apr file  [Default = Y]"
  echo " -no_lf_upd  Do NOT update the master tables l-file (lfile.) when large coordinate adjustment occur - EVER." 
  echo "            [Default - update tables/lfile. if Update tolerance specified in sestbl. is exceeded" 
  echo " -fixed_rx_list Link ONLY rinex files for sites listed in sites.defaults [Default = N]"  
  echo ' -sd  file      Name of sites.defaults file to use [Default = $procdir/tables/sites.defaults]'   
  echo " -metutil N/Z   Output Zenith wet delay and precipitable water using zenith hydrostatic delays [Default N]"
  echo "                Z - Use GAMIT z-files to provide zenith hydrostatic delays (o-file interval is assumed)"
  echo " -jclock        Source for j-file clocks: sp3 or brdc; brdc the default for now "
  echo "  "
  echo " Other options are set in the process.defaults file located in the tables directory "         
  echo "  "
  echo " To get more options type: sh_gamit -help "         
  echo "  "
  echo " Example: sh_gamit -d 98 240 -orbit SIOF -expt tubi -eops usno -nopngs"
  echo "  "
  echo "==================================================================================="
  if ( $#argv == 1 && ` echo $1 | cut -c2-` == 'help' ) then
    echo "  "                                                                          
    echo " These are extended options that override defaults set in the process.defaults file "
    echo "  "                                                                          
    echo " The following options are avaiable: "
    echo " Need to add one or two more options here "
    echo "  "      
    echo "===================================================================================="
  endif 
  exit
endif 
##################### SET UP DEFAULTS #############################   
# Echo input options           
echo "Sh_gamit Version 10.63 (2018/5/30)"
echo "Input options ${argv[*]} "
set input_opts = `echo "Input options ${argv[*]}"`

# Set unique tmp file stamp.
set ts = "`hostname`:`date +"%H%M%S"`"

# Now set up defaults  
setenv procdir `pwd`   
set tpth = 'tables'
set globalrx = '' 
set not_globalrx = ''
set rawlst = ''
set not_rawlst = ''
set stinfo_excld = ''
set xsitelst = ''
set erase = 'Y'
set hatanaka  = 'N'
set comp  = 'C'
set pres  = 'N'
set pngs  = 'Y'  
set gnss = 'G'
set gnss_explicit = 'N'
set eops = 'usno'
set localeop = ''  
set met = 'N'  
set ionex = ''
set expt = 'expt'
set expts = 'expt'
set orbit = 'igsf'
set orbdoy = ''
set tmporb = ''
set orbt = 'igsf' 
set sint = '30'
set nepc = '2880'
set stime = '0 0'
set user_orb = "N"
set archive = 'N'
set rawfnd = ''
set rnxfnd = ''
set rms_prefit  = ''
set rms_postfit = ''
set year = ''
set yr = ''
set days = ''
set doy = ''
set netext = '' 
set netext_explicit = 'N'
set dprefix = ''
set dsuffix = ''
set yrext = 'N'
set remakex = 'C'  
set remakek = 'C'
set remakej = 'Y'
set snrres = ''
set use_acc = '-u'
set dopts = ( c )
set copts = ( x k ao D )
set aopts = ''
set topts = 'none'
set xver = ''
set noftp = 'N'
set ftp_prog = 'ftp -inv'
set rinex_ftpsites = (cddis sopac unavco) 
set orbit_ftpsites = (cddis sopac mit )
set aprf = 'itrf2008.apr'
set rm_all = 'no'
set xcheck = 'N'
set noprocess = 'N'  
set minspan = 0.1
set update_l = '-upd_l'
set max_fit_tol = 0.100   
set noacc = ''
set archivepth = ""
set rawpth = ""   
set rpth = ""     
set metpth = ""  
set ionexpth = ""
set tpth = ""     
set bpth = ""     
set cpth = ""     
set gpth = ""     
set ipth = ""     
set mpth = ""     
set figpth = ""   
set glbpth = ""   
set glfpth = ""   
set fixed_rx_list = ""   
set metutil = "N"
set no_lf_upd = "N"                                                                      
set jclock = "brdc"
# l-file coord update default value used if not specified in sestbl.
set lf_upd_df = 0.3
#
# Set default number of days to link forward and backward from
# day being processed.  TAH 990817
set rx_doy_plus  = 0
set rx_doy_minus = 0       
set sd = ''
set subdir = " "
         
# Set the processing directory from the command if present 
#---------------------------------------------------------
set argv_save = `echo $argv`
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -dir: 
        setenv procdir $argv[2] 
    breaksw  
  endsw
  if ( $#argv > 0 ) shift argv
end

# See if processing directory contains valid defaults files
#------------------------------------------------------------
# create the tables directory if it doesn't exist
if ( ! -e tables ) mkdir tables
if ( ! -e ${procdir}/tables/process.defaults ) then  
# see if there is a templates directory from old-style processing
  if( -e ${procdir}/templates/process.defaults ) then
     \cp ${procdir}/templates/process.defaults ${procdir}/tables/process.defaults  
      source ${procdir}/tables/process.defaults
  else
    echo "No process.defaults file found at: ${procdir}/tables/process.defaults --Stop"
    exit   
  endif
else
  source ${procdir}/tables/process.defaults
endif

# Check if necessary directories are defined. If not set defaults
if ( $archivepth == "" ) set archivepth = "${procdir}/archive"
if ( $rawpth == "" )     set rawpth     = "${procdir}/raw"
if ( $rpth == ""   )     set rpth       = "${procdir}/rinex"  
if ( $metpth == ""   )   set metpth     = "${procdir}/met"       
if ( $ionexpth == ""   ) set ionexpth   = "${procdir}/ionex"
if ( $tpth == ""   )     set tpth       = "${procdir}/tables"
if ( $bpth == ""   )     set bpth       = "${procdir}/brdc"
if ( $cpth == ""   )     set cpth       = "${procdir}/control"
if ( $gpth == ""   )     set gpth       = "${procdir}/gfiles"
if ( $ipth == ""   )     set ipth       = "${procdir}/igs"
if ( $mpth == ""   )     set mpth       = "${procdir}/mkrinex"
if ( $figpth == "" )     set figpth     = "${procdir}/figs"
if ( $glbpth == "" )     set glbpth     = "${procdir}/gsoln"
if ( $glfpth == "" )     set glfpth     = "${procdir}/glbf"

set argv = `echo $argv_save`

# Decode the command line 
#------------------------
if ( ! -e ${cpth} ) mkdir ${cpth}
if ( -e ${cpth}/tmp.cmds.${ts} ) \rm ${cpth}/tmp.cmds.${ts}; touch ${cpth}/tmp.cmds.${ts} 
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -dir: 
        setenv procdir $argv[2] 
    breaksw
    case -d:
        set year = $argv[2]
        set days  = (`echo $argv[2-] | cut -d- -f1`); shift days
        echo "set year = $year" >> ${cpth}/tmp.cmds.${ts} 
        echo "set days = ( $days )" >> ${cpth}/tmp.cmds.${ts} 
    breaksw
    case -r:
        set mjd = `doy | tail -n -3 | head -n 1 | awk -v dd=$argv[2] '{print $10-dd}'`
        set year  = `doy $mjd | tail -n -3 | head -n 1 | awk '{printf "%04d \n", $2}'`
        set days  = `doy $mjd | tail -n -3 | head -n 1 | awk '{printf "%03d \n", $6}'` 
        echo "set year = $year" >> ${cpth}/tmp.cmds.${ts}
        echo "set days = ( $days )" >> ${cpth}/tmp.cmds.${ts} 
    breaksw
    case -s:
        set year = $argv[2]
#         @ count = $argv[3]     
        @ count = `echo "ibase=10; ${argv[3]}" | bc`
#        while ( $count <= $argv[4] )   Following is Shimada change 110117
        set last_day = `echo "ibase=10; ${argv[4]}" | bc`
        while ( $count <= $last_day )
          set days = ( $days  `echo $count | awk '{printf "%03d \n", $1}'` )
          @ count = $count + 1
        end   
        echo "set year = $year" >> ${cpth}/tmp.cmds.${ts} 
        echo "set days = ( $days )" >> ${cpth}/tmp.cmds.${ts} 
    breaksw     
    case -rx_doy_plus:
        set rx_doy_plus = $argv[2]
        echo "set rx_doy_plus = $rx_doy_plus" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -rx_doy_minus:
        set rx_doy_minus = $argv[2]
        echo "set rx_doy_minus = $rx_doy_minus" >> ${cpth}/tmp.cmds.${ts}
    breaksw         
    case -gnss:
         set gnss = $argv[2]  
         set gnss_explicit = 'Y'
    breaksw
    case -orbit:
        set tmporb  = (`echo $argv | cut -d- -f2`); shift tmporb   
        if ( $#tmporb > 1 ) then
          set orbit = $tmporb[1]  
          set orbdoy = `echo $tmporb[2] | awk '{printf "%03d \n", $1}'` 
        else
          set orbit = $tmporb  
        endif
        echo "set orbit = $orbit" >> ${cpth}/tmp.cmds.${ts}
        echo "set orbdoy = $orbdoy" >> ${cpth}/tmp.cmds.${ts}              
        set orbit = `echo $argv[2] | tr '[A-Z]' '[a-z]'`
        set orbt = `echo $argv[2] | tr '[A-Z]' '[a-z]'`
        echo "set orbt = $orbt" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -orbt:
        set orbt = `echo $argv[2] | tr '[A-Z]' '[a-z]'` 
        set user_orb = "Y" 
        echo "set orbt = $orbt" >> ${cpth}/tmp.cmds.${ts}
        echo "set user_orb = $user_orb" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -expt:
        set expts = (`echo $argv | cut -d- -f2`); shift expts 
        echo "set expts = $expts" >> ${cpth}/tmp.cmds.${ts}
    breaksw   
    case -met:
        set met = 'Y'
    breaksw  
    case -ion:
        set ionex = `echo $argv | awk -F' -' '{print $1}' | sed 's/-ion *//'`
        if ( "$ionex" == '' ) then  # Use default (option given without argument)
          set ionex = 'igsg'
        endif
        echo "set ionex = $ionex" >> ${cpth}/tmp.cmds.${ts}
echo $ionex
    breaksw
    case -eops:
        set eops = $argv[2]
        echo "set eops = $eops" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -local*:
        set localeop = '-localeop'
        echo "set localeop = $localeop" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -e:
       set erase = 'N'
        echo "set erase = $erase" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -c:
        set comp  = 'N'
        echo "set comp = $comp" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -h:
       set hatanaka = 'Y'
        echo "set hatanaka = $hatanaka" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -pres:   
        set pres  = 'Y' 
        set tmparg = `echo $argv[2] | awk '{print substr($1,1,1)}'`
        if ( $tmparg == "E" ) set pres  = 'E'
        if ( $tmparg == "N" ) set pres  = 'N'
        echo "set pres = $pres" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -nopngs:
        set pngs  = 'N'
        echo "set pngs = $pngs" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -archive:
        set archive  = 'Y'
        echo "set archive = $archive" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -ra*
        set rawpth = $input[2]  
        echo "set rawpth = $rawpth" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -rd*
        set rpth = $input[2]  
        echo "set rpth = $rpth" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -netext:
       set netext = $input[2]
       echo "set netext = $netext" >> ${cpth}/tmp.cmds.${ts}
       set netext_explicit = 'Y' 
    breaksw
    case -yrext:
       set yrext = "Y"
       echo "set yrext = $yrext" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -sess*: 
       set sint = $argv[2]
       set nepc = $argv[3]
       set stime = ( $argv[4-5] )
       echo "set sint = $sint" >> ${cpth}/tmp.cmds.${ts}
       echo "set nepc = $nepc" >> ${cpth}/tmp.cmds.${ts}
       echo "set stime = ( $stime ) " >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -mail*: 
       set mailto =  ` echo $argv[2] | awk -F@ '{print $1}'`
       set machine = ` echo $argv[2] | awk -F@ '{print $2}'` 
       echo "set mailto = $mailto" >> ${cpth}/tmp.cmds.${ts}
       echo "set machine = $machine" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -remakex:
        set remakex = $argv[2]  
        echo "set remakex = $remakex" >> ${cpth}/tmp.cmds.${ts}
    breaksw   
    case -remakek:
        set remakek = $argv[2]  
        echo "set remakek = $remakek" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -remakej:
        set remakej = $argv[2]  
        echo "set remakej = $remakej" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -snr*:
        set snrres  = 'Y'
        echo "set snrres = $snrres" >> ${cpth}/tmp.cmds.${ts}
    breaksw  
    case -noacc:
        set use_acc = '-noacc'  
        echo "set use_acc = $use_acc" >> ${cpth}/tmp.cmds.${ts}
    breaksw 
    case -ofit:
        set max_fit_tol=  $argv[2]
        echo "set max_fit_tol = $max_fit_tol" >> ${cpth}/tmp.cmds.${ts}
    breaksw 
    case -xsi*:
      set xsitelst =  (`echo $argv | cut -d- -f2`); shift xsitelst 
      echo "set xsitelst = $xsitelst" >> ${cpth}/tmp.cmds.${ts}
    breaksw   
    case -aop*:
      set aopts =  (`echo $argv | cut -d- -f2`); shift aopts 
      echo "set aopts = $aopts" >> ${cpth}/tmp.cmds.${ts}
    breaksw   
    case -cop*:
      set copts =  (`echo $argv | cut -d- -f2`); shift copts 
      echo "set copts = $copts" >> ${cpth}/tmp.cmds.${ts}
    breaksw   
    case -dop*:
      set dopts =  (`echo $argv | cut -d- -f2`); shift dopts 
      echo "set dopts = $dopts" >> ${cpth}/tmp.cmds.${ts}
    breaksw 
    case -top*:
      set topts =  (`echo $argv | cut -d- -f2`); shift topts 
      echo "set topts = $topts" >> ${cpth}/tmp.cmds.${ts}
    breaksw   
    case -archivep*:
      set archivepth  = $input[2]  
      echo "set archivepth = $archivepth" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -xver*
        set xver = $argv[2]  
        echo "set xver = $xver" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -noftp
        set noftp = 'Y'  
        echo "set noftp = $noftp" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -ftp_prog
        set ftp_prog = $argv[2]  
        echo "set ftp_prog = $ftp_prog" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -rinex_ftpsites 
        set user_ftpsites = (`echo $argv | cut -d- -f2`) ; shift user_ftpsites
# MOD TAH 040205: Removed echo of original ftpsite list so that user can remove a non-functioning 
#        set rinex_ftpsites = `echo $rinex_ftpsites $user_ftpsites | awk '{for (i=1;i<=NF;i++) {print $i}}' | sort | uniq`
        set rinex_ftpsites = `echo $user_ftpsites | awk '{for (i=1;i<=NF;i++) {print $i}}' | sort | uniq`
        echo "set rinex_ftpsites = $rinex_ftpsites" >> ${cpth}/tmp.cmds.${ts}
        echo $user_ftpsites ":::" $rinex_ftpsites
        cat  ${cpth}/tmp.cmds.${ts}
    breaksw
    case -xcheck
        set xcheck = $argv[2]  
        echo "set xcheck = $xcheck" >> ${cpth}/tmp.cmds.${ts}
    breaksw
    case -noprocess
        set noprocess = $argv[2]
        echo "set noprocess = $noprocess" >> ${cpth}/tmp.cmds.${ts}
    breaksw      
    case -minspan:
        set minspan = $argv[2]  
        echo "set minspan = $minspan" >> ${cpth}/tmp.cmds.${ts}
    breaksw   
    case -update_l:
        set update_l = $argv[2]
	if ( $update_l == "N" ) then
	  set update_l = ''
	else
	  set update_l = '-upd_l'
	endif
        echo "set update_l = $update_l" >> ${cpth}/tmp.cmds.${ts}
    breaksw  
    case -no_lf_upd:
        set no_lf_upd = "Y"  
        echo "set no_lf_upd = $no_lf_upd" >> ${cpth}/tmp.cmds.${ts}
    breaksw       
    case -fixed_rx_list
        set fixed_rx_list = "Y"  
        echo "set fixed_rx_list = $fixed_rx_list" >> ${cpth}/tmp.cmds.${ts}
    breaksw  
    case -sd
        set sd = `echo $argv[2] | awk '{print "-sd ",$1}'`
        echo 'set sd = "'${sd}'"' >> ${cpth}/tmp.cmds.${ts}
    breaksw     
    case -su*:    # See if -subdir option to be passed 
      set subdir = "-subdir"
    breaksw
    case -metutil:
        set metutil = `echo $argv[2] | awk '{print toupper(substr($1,1,1))}'`
        if ( $metutil != "N" && $metutil != "Z" ) then
            echo "FATAL: Unknown metutil option ",$metutil
            exit
        else
            echo "set metutil = $metutil" >> ${cpth}/tmp.cmds.${ts}
        endif
        if ( $metutil == "Z" && `grep "Output met =" tables/sestbl. | awk '{print toupper(substr($4,1,1))}'` != "Y" ) then
            echo "FATAL: -metutil Z option requires sestbl. Output met = Y"
            exit
        endif
    breaksw        
    case -jclock:
       set jclock = $argv[2]
       echo "set jclock = $jclock" >> ${cpth}/tmp.cmds.${ts}
    breaksw 
  endsw
  if ( $#argv > 0 ) shift argv
end
alldone:
          
#------------------------------------------------------------------------------
# If neither -gnss nor -netext is in the command file (default GPS), use the day number only;
# otherwise use the GNSS sys code for the netext unless netext explicitly specified 
if( $gnss_explicit == 'Y' && $netext_explicit == 'N' ) then
  set netext = $gnss
endif 

#------------------------------------------------------------
# Check if $mailto and $machine name have been set yet.
if ( $mailto == '') then
  set mailto = `whoami`
  echo "set mailto = $mailto" >> ${cpth}/tmp.cmds.${ts}
endif
if ( $machine == '' ) then
  set machine = `hostname`
  echo "set machine = $machine" >> ${cpth}/tmp.cmds.${ts}
endif

#--------------------------------------------
# Begin loop over days to be processed 
foreach doy ( $days ) 
  echo "--------------------------------------------------------------" 
  echo " " 
  echo "Processing " $year $doy  

#--------------------------------------------
# Begin loop over experiments ($expts)
foreach expt ( $expts )

#--------------------------------------------
# Set time and date variables for day to be processed
# Year variable yr[1] = 4 char yr, yr[2] = 2 char yr, yr[3] = 1 char yr
  set yr = `sh_year -year $year`

# Set default xversion if one isn't set by the user
  if ( $xver == '' ) set xver = $yr[3]
  echo "X-file series to be used is: $xver"

# Get jd, mjd, gpsweek, gpsdow, doy
  set jd   = `doy $yr[1] $doy | tail -n -3 | head -n 1 | awk '{print $8}'`
  set mjd  = `doy $jd | tail -n -3 | head -n 1 | awk '{print $10}'`
  set gpsw = `doy $jd | tail -n -2 | head -n 1 | awk '{printf "%04d \n", $3}'`
  set gpsd = `doy $jd | tail -n -2 | head -n 1 | awk '{printf "%1d  \n", substr($7,1,1)}'`
  set doy  = `doy $jd | tail -n -3 | head -n 1 | awk '{printf "%03d \n", $6}'`

#--------------------------------------------
# Build the processing directory name
  if ( ${yrext} == "Y" ) then 
    set daydir = ${yr[1]}_${doy}${netext} 
    set dprefix = ${yr[1]}_
    set dsuffix = ${netext}
  else
    set daydir = ${doy}${netext}  
    set dprefix = ''
    set dsuffix = ${netext}
  endif

# Set fixed_rx_list
  if ($fixed_rx_list != '') then
     set fixed_rx_list = "-expt $expt"
  endif

#--------------------------------------------
# Extract site specific information arrays from sites.defaults file. 
  if ( ! -e ${procdir}/tables/sites.defaults && ! -e ${procdir}/tables/sites.defaults.${yr[1]}.${doy}) then
    echo "No sites.defaults or sites.defaults.${yr[1]}.${doy} file found at: ${procdir}/tables "
    echo "Stopping" 
    exit
  else 
# Station.info
    set stinfo_excld = `sh_get_defaults -token xstinfo -yr $yr[1] -doy $doy $sd` 
# Globalrx
    set globalrx = `sh_get_defaults -token ftprnx -expt $expt -yr $yr[1] -doy $doy $sd`
# NOT globalrx
    set not_globalrx = `sh_get_defaults -token ftprnx -expt $expt -not -yr $yr[1] -doy $doy $sd`
# Rawlst
    set rawlst =  `sh_get_defaults -token ftpraw -expt $expt -yr $yr[1] -doy $doy $sd` 
# NOT rawlst
    set not_rawlst =  `sh_get_defaults -token ftpraw -expt $expt -not -yr $yr[1] -doy $doy $sd` 
# xsite list
    set xsitelst =  (${xsitelst} `sh_get_defaults -token xsite -expt $expt -yr $yr[1] -doy $doy $sd`) 
# localrx
    set localrx = `sh_get_defaults -token localrx -expt $expt -yr $yr[1] -doy $doy $sd`

# Echo lists extracted from sites.defaults 
    echo " " 
    if ( $#globalrx > 0 ) then
      echo Sites extracted from sites.default to ftp from global rinex data archives: $globalrx 
    endif
    if ( $#localrx > 0 ) then
      echo Sites extracted from sites.default to ftp from local rinex data archives: $localrx 
    endif
#    if ( $#not_globalrx > 0 ) then
#      echo "Sites extracted from sites.default which will be excluded from ftp from global rinex data archives: $not_globalrx "
#    endif
    if ( $#rawlst > 0 ) then
      echo Sites extracted from sites.default to ftp from raw data archives: $rawlst 
    endif
#    if ( $#not_rawlst > 0 ) then
#      echo "Sites extracted from sites.default which will be excluded from ftp from raw data archives: $not_rawlst "
#    endif                        
    if ( $#stinfo_excld > 800 ) then
      echo Sites extracted from sites.default to exclude from automatic station.info updating: greater than 800
    else if ( $#stinfo_excld > 0 ) then
      echo Sites extracted from sites.default to exclude from automatic station.info updating: $stinfo_excld
    endif   
    if ( $#xsitelst > 0 ) then
      echo X-files from sites.defaults to be excluded: $xsitelst 
    endif
  endif

#--------------------------------------------
#Create required directories if they don't exist 
    echo "Checking and making required directories "
    if ( ! -e ${bpth}) mkdir ${bpth}
    if ( ! -e ${cpth}) mkdir ${cpth}
    if ( ! -e ${rpth}) mkdir ${rpth}
    if ( ! -e ${metpth}) mkdir ${metpth}  
    if ( ! -e ${ionexpth}) mkdir ${ionexpth}
    if ( ! -e ${gpth}) mkdir ${gpth}
    if ( ! -e ${ipth}) mkdir ${ipth}
    if ( ! -e ${mpth}) mkdir ${mpth}
    if ( ! -e ${figpth}) mkdir ${figpth}
    if ( ! -e ${rawpth}) mkdir ${rawpth}
    if ( ! -e ${glbpth}) mkdir ${glbpth}
    if ( ! -e ${glfpth}) mkdir ${glfpth}
    if ( ! -e ${archivepth}) mkdir ${archivepth}

#--------------------------------------------
# Determine the day that will be processed in the requested session
#  set ejd = `echo $jd $sint $nepc $stime  | awk '{print $1 + ($4 + $5/60.0 + $2*$3/3600.0)/24.0}'`
#  echo $ejd
 
#--------------------------------------------
# Determine which sites in the xsitelst are valid for this processing day.
  set xsite = ''
  foreach i ( `echo $xsitelst` )
    if ( `echo $i | awk '{print length($1)}'` > 5 ) then  
      set tmpdate = `echo $i | awk '{print substr($1,6,4), substr($1,11,3)}'`
      set xstart = `doy $tmpdate | tail -n -3 | head -n 1 | awk '{printf "%d", $8}'`
      set tmpdate = `echo $i | awk '{print substr($1,15,4), substr($1,20,3)}'`
      set xstop = `doy $tmpdate | tail -n -3 | head -n 1 | awk '{printf "%d", $8+1}'`
      set OK = `echo $jd $xstart $xstop | awk ' $1 >= $2 && $1 <= $3 {print "yes"}'`
      if ( $OK == "yes" ) then
        set xsite = ( $xsite `echo $i | awk '{print substr($1,1,4)}'` )
      endif
    else
      set xsite = ( $xsite `echo $i | awk '{print substr($1,1,4)}'` )
    endif
  end
  if ( $#xsite >= 1 ) echo "X-files to be excluded: $xsite"; echo " "

#--------------------------------------------
# Set orbit day to be used
  if ( $#tmporb > 1 ) then
    echo "DOY for the orbit is fixed to: $orbdoy"
  else
    set orbdoy = $doy
  endif

#--------------------------------------------
# Echo input options and current status into mail file
  echo " " >! ${cpth}/tmp.mail.$ts
  echo "${input_opts}" >> ${cpth}/tmp.mail.$ts   
  echo " " >> ${cpth}/tmp.mail.$ts
  echo "Processing $yr[1] $doy GPS week $gpsw ${gpsd} Using node: `hostname` Started at: `date +"%y_%m_%d_%H:%M:%S"`" >> ${cpth}/tmp.mail.$ts
  
#--------------------------------------------
# Check disk space before running to ensure day run completion   
  echo " "
  echo "Checking that enough diskspace to complete run is available "
  if ( "`uname`" == 'Darwin' ) then
    set rawspace     = `$udf $rawpth | tail -n -1 | awk '{print $(NF-5) }'`
    set rinexspace   = `$udf $rpth   | tail -n -1 | awk '{print $(NF-5) }'`
    set workspace    = `$udf ../     | tail -n -1 | awk '{print $(NF-5) }'`
    set archivespace = `$udf $archivepth | tail -n -1 | awk '{print $(NF-5) }'`
  else
    set rawspace     = `$udf $rawpth | tail -n -1 | awk '{print $(NF-2) }'`
    set rinexspace   = `$udf $rpth   | tail -n -1 | awk '{print $(NF-2) }'`
    set workspace    = `$udf ../     | tail -n -1 | awk '{print $(NF-2) }'`
    set archivespace = `$udf $archivepth | tail -n -1 | awk '{print $(NF-2) }'`
  endif

  set JOBSTAT = `echo sh_gamit $expt $yr[1] $doy`

  set OK = `echo $rawspace ${minraw} | awk '{if ( $1 < $2 ) {print "0"} else {print "1"}}'`
#  if ( $rawspace <= ${minraw} ) then   
  if( $OK == 0 ) then
    echo "Not enough space in raw directory aborting RUN: Space available = $rawspace kb, min ${minraw} kb" 
    echo "Not enough space in raw directory aborting RUN: Space available = $rawspace kb, min ${minraw} kb" >> ${cpth}/tmp.mail.$ts
    ${umail} "$JOBSTAT" ${mailto} < ${cpth}/tmp.mail.$ts
   exit        
  endif
  set OK = `echo $rinexspace ${minrinex} | awk '{if ( $1 < $2 ) {print "0"} else {print "1"}}'`
  if ( $OK == 0  ) then                                                   
#  if ( $rinexspace <= ${minrinex} ) then                                                   
    echo "Not enough space on rinex disk aborting RUN: Space available = $rinexspace kb, min ${minrinex} kb" 
    echo "Not enough space on rinex disk aborting RUN: Space available = $rinexspace kb, min ${minrinex} kb" >> ${cpth}/tmp.mail.$ts
    ${umail} "$JOBSTAT" ${mailto} < ${cpth}/tmp.mail.$ts
    exit
  endif
  set OK = `echo $archivespace ${minarchive} | awk '{if ( $1 < $2 ) {print "0"} else {print "1"}}'`
  if ( $OK == 0  ) then    
#  if ( $archivespace <= ${minarchive} ) then    
    echo "Not enough space on archive disk aborting RUN: Space available = $archivespace kb, min ${minarchive} kb" 
    echo "Not enough space on archive disk aborting RUN: Space available = $archivespace kb, min ${minarchive} kb" >> ${cpth}/tmp.mail.$ts
    ${umail} "$JOBSTAT" ${mailto} < ${cpth}/tmp.mail.$ts
    exit
  endif
  set OK = `echo $workspace ${minwork} | awk '{if ( $1 < $2 ) {print "0"} else {print "1"}}'`
  if ( $OK == 0  ) then     
#  if ( $workspace <= ${minwork} ) then     
    echo "Not enough space on work disk aborting RUN: Space available = $workspace kb, min ${minwork} kb" 
    echo "Not enough space on work disk aborting RUN: Space available = $workspace kb, min ${minwork} kb" >> ${cpth}/tmp.mail.$ts
    ${umail} "$JOBSTAT" ${mailto} < ${cpth}/tmp.mail.$ts
    exit
  endif

#--------------------------------------------

# Set character strings for orbit files
  echo " " 
  set sp3name = 'usr'            
#  Translate to lower case if old-style upper-case input
  if ( ${user_orb} != "Y" ) then   
    if ( $orbit == 'igsf' ) then  
      set sp3name = 'igs'
      set orbt = 'igsf'  
      echo "Using IGS final orbits - repro2 for GPS weeks 658-1831 "  
    else if ( $orbit == 'igff' ) then  
      set sp3name = 'igs'
      set orbt = 'igff'  
      echo "Using IGS final orbits [igff]"
    else if ( $orbit == 'igsr' ) then  
      set sp3name = 'igs'
      set orbt = 'igsr'  
      echo "Using IGS rapid orbits"
    else if ( $orbit == 'igrr' ) then  
      set sp3name = 'igr'
      set orbt = 'igrr'  
      echo "Using IGS rapid orbits [igrr]"
    else if ( $orbit == 'igsu' ) then  
      set sp3name = 'igs'
      set orbt = 'igsu' 
      set precis = 'u'    
      echo "Using IGS ultra-rapid (+predicted) orbits"
    else if( $orbit == 'codf' ) then  
      set sp3name = 'cof'
      set orbt = codf  
      echo "Using CODE 1-day final orbits"
   else if( $orbit == 'code' ) then  
      set sp3name = 'cod'
      set orbt = code  
      echo "Using CODE 3-day final orbits"
  else if( $orbit == 'codm' ) then  
      set sp3name = 'com'
      set orbt = codm  
      echo "Using CODE 1-day MGEX final orbits"
  else if( $orbit == 'emrf' ) then  
      set sp3name = 'emr'
      set orbt = emrf  
      echo "Using EMR final orbits"
  else if( $orbit == 'esaf' ) then  
      set sp3name = 'esa'
      set orbt = esaf  
      echo "Using ESA final orbits"
  else if( $orbit == 'gfzf' ) then  
      set sp3name = 'gfz'
      set orbt = gfzf  
      echo "Using GFZ final orbits"
  else if( $orbit == 'gfzm' ) then  
      set sp3name = 'gbm'
      set orbt = gfzm  
      echo "Using GFZ MGEX final orbits"
  else if( $orbit == 'grgm' ) then  
      set sp3name = 'grm'
      set orbt = grgm  
      echo "Using GSRG MGEX final orbits"
  else if( $orbit == 'jaxm' ) then  
      set sp3name = 'jam'
      set orbt = jaxm  
      echo "Using JAX MGEX final orbits"
  else if( $orbit == 'jplf' ) then  
      set sp3name = 'jpl'
      set orbt = jplf  
      echo "Using JPL final orbits"
  else if( $orbit == 'code' ) then  
      set sp3name = 'cod'
      set orbt = code  
      echo "Using CODE 3-day final orbits"
  else if( $orbit == 'mitf' ) then  
      set sp3name = 'mit'
      set orbt = mitf  
      echo "Using MIT final orbits"
  else if( $orbit == 'ngsf' ) then  
      set sp3name = 'ngs'
      set orbt = ngsf  
      echo "Using NGS final orbits"
  else if( $orbit == 'siof' ) then  
      set sp3name = 'sio'
      set orbt = siof  
      echo "Using SOPAC final orbits"
  else if( $orbit == 'sior' ) then  
      set sp3name = 'sir'
      set orbt = sior  
      echo "Using SOPAC rapid orbits"
  else if( $orbit == 'siou' ) then  
      set sp3name = 'sio'
      set orbt = siou  
      echo "Using SOPAC ultra-rapid orbits"
  else if( $orbit == 'tumm' ) then  
      set sp3name = 'tum'
      set orbt = tumm  
      echo "Using TU-Munich MGEX orbits"
  else if( $orbit == 'wuhm' ) then  
      set sp3name = 'wum'
      set orbt = wuhm  
      echo "Using Wuhan final orbits"
    else if ( $orbit == 'brdc' ) then 
      set orbt = brdc  
      echo " " 
      echo "Using Broadcast orbits"
    else 
      echo "  "  
      echo "Unsupported orbit type: $orbit (allowed: igsf igsr igsu codf code codm emrf esaf gfzf gfzm grgm jaxm jplf mitf ngsf siof sior siou tumm wuhm brdc )"
      exit
    endif
  else
    echo "Orbits from locally generated ${gpth}/g${orbt}${yr[3]}.${orbdoy} "
  endif   

#----------------------------------------------
# Check the tables directory.
    echo " " 
    echo "Checking GAMIT tables in directory: ${tpth} "     
    echo "sh_setup -yr ${yr[1]} -doy ${doy} -series ${eops} -expt ${expt} -apr ${aprf} ${localeop} $update_l -topt $topts"
    sh_setup -yr ${yr[1]} -doy ${doy} -series ${eops} -expt ${expt}-apr ${aprf} ${localeop} $update_l -topt $topts    
    if( $status != 0 ) then
      echo "Failure in sh_setup. -- sh_gamit terminated"   
      exit 1
    endif   

#--------------------------------------------

# Check selected EOP series to see if they cover day to be processed. (checked OK).
  pushd ${tpth} >& /dev/null   
    echo " "
    echo "Checking to see if EOP tables are up to date "
#   sh_update_eop -series ${eops} -jd ${jd} -noftp ${noftp}
# Allow a minimum of 7 entries at the end of a pole/ut1. table.
    echo "sh_update_eop -series ${eops} -jd ${jd} -noftp ${noftp} -ftp_prog $ftp_prog -min 7"
    sh_update_eop -series ${eops} -jd ${jd} -noftp ${noftp} -ftp_prog $ftp_prog -min 7
  popd  >& /dev/null
  if( $status != 0 ) then
    echo "Failure in sh_update_eop. -- sh_gamit terminated"   
    exit 1
  endif

#--------------------------------------------

# Download orbits if not already available    

  echo " " 
# MOD RWK 180427:  Change the 4th character of the g- and t-file names to represent the GNSS system
  set gnsslc = `echo $gnss | tr '[A-Z]' '[a-z]'`
  set orbtm = `echo $orbt $gnsslc | awk '{print substr($1,1,3) substr($2,1,1)}'`
  if ( $orbit == 'BRDC' ) then
    echo "Broadcast orbits requested. g- and t-files will be generated in sh_preproc "
  else
    set orbitok = 'N'
    set gdir = ${daydir}
    if ( ! -e  ${daydir}/g${orbtm}${yr[3]}.${orbdoy} ) then
      set gdir = ${gpth}
    endif
  
#   See if compatible g-file exists in the /giles or day directory

    if ( -e ${gdir}/g${orbtm}${yr[3]}.$orbdoy  ) then
#     Check that the current nutation model selected was also used to creat existing g-files.
#     If not move gfile so that new gfile will be created      
#     Determine the nutation series used in the nutation table (nutabl.)
      set nut_head = `grep IAU2000 ${tpth}/nutabl.` 
      if ( $#nut_head > 0 ) then
        set t_nut_series = IAU00
      else
        set t_nut_series = IAU80
      endif
#     Determine the nutation series used to generate the g-file   
      set nut_head = `grep IAU00 ${gdir}/g${orbtm}${yr[3]}.${orbdoy}`
      if ( $#nut_head > 0 ) then
        set g_nut_series = IAU00
      else
        set g_nut_series = IAU80
      endif
      if ( $t_nut_series !=  $g_nut_series ) then
        echo "Nutabl nutation series: $t_nut_series different from G-file nutation series: $g_nut_series :-("
        echo "Moving gfile to ${gdir}/g${orbtm}${yr[3]}.${orbdoy}.${g_nut_series}"
        echo "New g-file will be generated"
        \mv ${gdir}/g${orbtm}${yr[3]}.${orbdoy} ${gdir}/g${orbtm}${yr[3]}.${orbdoy}.${g_nut_series}
      else          
        set orbitok = 'Y'
        echo "g-file g${orbtm}${yr[3]}.$orbdoy exists with correct nutations directory ${gdir}, no download attempted"
      endif
#   endif for using an existing g-file
    endif

#  See if an SP3 file exists
                                       
   set sp3file = ${sp3name}${gpsw}${gpsd}.sp3
#   echo DEBUG sp3file $sp3file
   if( $orbitok == 'N' && -e ${ipth}/${sp3file} ) then
     echo "Orbit file ${sp3file} exists in ${ipth} directory, no download attempted"
     set orbitok = 'Y'  
     pushd ${ipth} >& /dev/null  
     echo "Using existing ${sp3file} in igs directory to get a g-file"    
     if( `echo $use_acc` == '-u' ) then
        echo "Use SP3 accuracy code to exclude satellites "
     else
        echo "Ignore SP3 accuracy code for excluding satellite "
     endif
     echo "Maximum fit rms for including a satellite $max_fit_tol  m"  
#    MOD RWK 110221: May need to link tables if not invoking sh_get_orbits  
#    MOD rwk 151231: replace links.arc with sh_links.arc with default to rm no existing links
     links.arc J2000 ${yr[1]} ${eops} >& /dev/null
     sh_links.arc -year $yr[1] -eop $eops >& /dev/null
     sh_sp3fit -f ${sp3file} -gnss ${gnss}  -o ${orbtm} $use_acc -d ${yr[1]} ${orbdoy} -m $max_fit_tol
#    MOD TAH 091208: Move the gfile to gfiles directory
     \mv g${orbtm}${yr[3]}.${orbdoy} ${gpth}/g${orbtm}${yr[3]}.${orbdoy}
     if( -e ${gpth}/g${orbtm}${yr[3]}.${orbdoy} ) then
       set orbitok = 'Y' 
     else
       echo "sh_sp3fit failed to generate a g-file, stop "
       exit 
     endif 
#  endif of using an existing SP3 file
   endif 

#  Otherwise download an SP3 file and generate the g-file

   if( $orbitok == 'N' ) then    
     if( $noftp == 'Y' ) then 
       echo "No g- or sp3-files available and noftp = Y, cannot continue "
       exit
     endif
     echo "Searching archives: $orbit_ftpsites for sp3 file"
     if( `echo $noacc` == '' ) then
       echo "Use SP3 accuracy code to exclude satellites "
     else
       echo "Ignore SP3 accuracy code for excluding satellite "
     endif
     echo "Maximum fit rms for including a satellite $max_fit_tol  m"
     pushd ${ipth} >& /dev/null 
     foreach orbit_archive ($orbit_ftpsites)
       echo " DEBUG gnss " $gnss 
       echo " Trying to get ${sp3file} from $orbit_archive archive "
# MOD rwk 180425: replace this with call to new sh_get_orbits calling sh_cddis
#       if( $gnss != 'G' ) then 
#         sh_get_orbits -archive ${orbit_archive} -yr ${yr[1]} -doy ${orbdoy} -gnss ${gnss} -type msp3 -pre ${precis} -center ${sp3name} -orbt ${orbt} -eop_ser ${eops} -eop_pth ${tpth} $use_acc -ftp_prog $ftp_prog -max_fit_tol $max_fit_tol
#       else
#         sh_get_orbits -archive ${orbit_archive} -yr ${yr[1]} -doy ${orbdoy} -gnss ${gnss}  -type sp3 -pre ${precis} -center ${sp3name} -orbt ${orbt} -eop_ser ${eops} -eop_pth ${tpth} $use_acc -ftp_prog $ftp_prog -max_fit_tol $max_fit_tol
#       endif  
       sh_get_orbits  -yr ${yr[1]} -doy ${orbdoy} -gnss ${gnss} -orbt ${orbt} -eop_ser ${eops} -eop_pth ${tpth} $use_acc -max_fit_tol $max_fit_tol
       \cp g${orbtm}${yr[3]}.${orbdoy} ${gpth}
	    if ( -e ${gpth}/g${orbtm}${yr[3]}.${orbdoy} ) then
	      echo "Downloaded ${orbt} orbit file from ${orbit_archive}. Created ${gpth}/g${orbtm}${yr[3]}.${orbdoy}" 
         set orbitok = 'Y'
         goto got_orbit
       endif
     end 
     got_orbit:
     popd >& /dev/null
     if( $orbitok == 'N' ) then
       echo "Failed to find or create a g-file, cannot continue "
       exit
     endif
#  endif for downloading an SP3 file
   endif  

# If we now have an sp3 file, see if it should be used for j-file clocks
   if ( -e ${ipth}/${sp3file} ) then
   endif   
   if( $jclock == "sp3" ) then
      if ( -e ${ipth}/${sp3file} ) then                 
        echo "Using ${ipth}/${sp3file} for SV clocks "
      else
        echo "SP3 file not available, using nav file for SV clocks "
      endif
   else
     set jclock = "brdc" 
     echo "Using nav file for SV clocks "
   endif

# endif for non-BRDC orbits
  endif


#--------------------------------------------
# Now collect the broadcast orbit files we will need. (checked OK)
  if ( ! -e ${daydir}/${brdc}${doy}0.${yr[2]}n  && ( ! -e ${bpth}/${brdc}${doy}0.${yr[2]}n || -z ${bpth}/${brdc}${doy}0.${yr[2]}n ) ) then     
    echo "Getting requested broadcast orbits (rinex nav files) "
 
    if ( -z ${bpth}/${brdc}${doy}0.${yr[2]}n )  \rm  ${bpth}/${brdc}${doy}0.${yr[2]}n 

    if ( -e ${bpth}/${brdc}${doy}0.${yr[2]}n.Z && ! -z ${bpth}/${brdc}${doy}0.${yr[2]}n.Z ) then
       sh_uncompress -f ${bpth}/${brdc}${doy}0.${yr[2]}n.Z 
       
    else if ( -e ${bpth}/${brdc}${doy}0.${yr[2]}n.gz && ! -z ${bpth}/${brdc}${doy}0.${yr[2]}n.gz ) then
       sh_uncompress -f ${bpth}/${brdc}${doy}0.${yr[2]}n.gz

    else if ( -e ${daydir}/${brdc}${doy}0.${yr[2]}n.Z && ! -z ${daydir}/${brdc}${doy}0.${yr[2]}n.Z ) then
       sh_uncompress -f ${daydir}/${brdc}${doy}0.${yr[2]}n.Z
       
    else if ( -e ${daydir}/${brdc}${doy}0.${yr[2]}n.gz && ! -z ${daydir}/${brdc}${doy}0.${yr[2]}n.gz ) then
       sh_uncompress -f ${daydir}/${brdc}${doy}0.${yr[2]}n.gz

    else if ( $noftp == 'Y' ) then
      echo "-noftp = $noftp : You must have ${bpth}/${brdc}${doy}0.${yr[2]}n or ${bpth}/${brdc}${doy}0.${yr[2]}n.Z available to continue processing"
      exit

    else
       pushd ${bpth} >& /dev/null
# Only check the archives requested (CDDIS) 
       foreach orbit_archive ($orbit_ftpsites)
         if ( $orbit_archive == 'cddis') then             
#      If  non-exisitant, try and get the file brdc file from cddis archive    
       if( ! -e ${bpth}/${brdc}${doy}0.${yr[2]}n || -z ${bpth}/${brdc}${doy}0.${yr[2]}n ) then
#         MOD RWK 180501: If GPS Week 1624 or later (2011 051) use the multi-gnss nav file
         if( $gpsw <= 1624 ) then 
           echo "sh_get_nav -archive cddis -yr ${yr[1]} -doy ${doy} -ftp_prog $ftp_prog"
           sh_get_nav -archive cddis -yr ${yr[1]} -doy ${doy} -ftp_prog $ftp_prog
         else 
           echo "Looking for multi-GNSS RINEX nav-file at CDDIS" 
           echo "sh_get_nav -archive cddis -yr ${yr[1]} -doy ${doy} -navdir navmgex  -ftp_prog $ftp_prog"
           sh_get_nav -archive cddis -yr ${yr[1]} -doy ${doy} -navdir navmgex -ftp_prog $ftp_prog
         endif
	    endif
#      If still non-exisitant, try and get the file brdc file from cddis archive1
       if( ! -e ${bpth}/${brdc}${doy}0.${yr[2]}n || -z ${bpth}/${brdc}${doy}0.${yr[2]}n ) then
           echo "Looking for combined RINEX navigation at CDDIS archive1" 
	    echo "sh_get_nav -archive cddis -yr ${yr[1]} -doy ${doy} -navdir navalt -ftp_prog $ftp_prog"
           sh_get_nav -archive cddis -yr ${yr[1]} -doy ${doy} -navdir navalt -ftp_prog $ftp_prog
       endif
	 endif
       end
# Only check the archives requested (SOPAC) 
       foreach orbit_archive ($orbit_ftpsites)
         if ( $orbit_archive == 'sopac') then 
	 echo $orbit_archive     
#      If still non-exisitant try the sopac archive      
           if( ! -e ${bpth}/${brdc}${doy}0.${yr[2]}n || -z ${bpth}/${brdc}${doy}0.${yr[2]}n ) then
             echo "Looking for combined RINEX navigation at SOPAC"
	     echo "sh_get_nav -archive sopac -yr ${yr[1]} -doy ${doy} -ftp_prog $ftp_prog"
             sh_get_nav -archive sopac -yr ${yr[1]} -doy ${doy} -ftp_prog $ftp_prog  
           endif
#      If still non-exisitant try the sopac archive1
           if( ! -e ${bpth}/${brdc}${doy}0.${yr[2]}n || -z ${bpth}/${brdc}${doy}0.${yr[2]}n ) then
             echo "Looking for combined RINEX navigation at SOPAC archive1" 
	     echo "sh_get_nav -archive sopac -yr ${yr[1]} -doy ${doy} -rxobs -ftp_prog $ftp_prog"
             sh_get_nav -archive sopac -yr ${yr[1]} -doy ${doy} -rxobs -ftp_prog $ftp_prog  
           endif
	 endif
       end      
#      Last chance is to create a combined nav file by merging available site nav files.
       if ( ! -e ${bpth}/${brdc}${doy}0.${yr[2]}n || -z ${bpth}/${brdc}${doy}0.${yr[2]}n ) then
         echo 'Cannot find a combined nav file: Making my own hangon'
         if ( -e tmp_nav.${ts} ) \rm -r tmp_nav.${ts}; mkdir tmp_nav.${ts}
         pushd tmp_nav.${ts} >& /dev/null   
         echo "Getting site nav files from SOPAC archive" 
         sh_get_nav -archive sopac -yr ${yr[1]} -doy ${doy} -allnav -ftp_prog $ftp_prog
         echo "Running emerge to create a combined nav file" 
#  MOD rwk 030902: substitute sh_merge_nav for sh_emerge (but not tested!!) This is broken!!! scm 030112
#         sh_emerge -c brdc -t ${doy} ${yr[2]} -p ${bpth}/tmp_nav   
         sh_merge_nav -c brdc -t $yr[1] $doy -p ${bpth}/tmp_nav.${ts}  
         sh_uncompress -f ${brdc}${doy}0.${yr[2]}n.Z
         sh_uncompress -f ${brdc}${doy}0.${yr[2]}n.gz
         if ( -e ${brdc}${doy}0.${yr[2]}n ) \cp ${brdc}${doy}0.${yr[2]}n ..
         popd >& /dev/null  
         \rm -r tmp_nav.${ts}
       endif
#      If still non-exisitant give up....
       if( ! -e ${bpth}/${brdc}${doy}0.${yr[2]}n || -z ${bpth}/${brdc}${doy}0.${yr[2]}n  ) then
         echo " No broadcast orbits to be found anywhere. --Stop"
         exit
       endif

       popd >& /dev/null
    endif 

  else 
    echo "${bpth}/${brdc}${doy}0.${yr[2]}n exists "
  endif  

#--------------------------------------------       

# Now collect up all the remote (ftp) raw or RINEX we requested  -- skip if no X-files to be made or remade

  if( $remakex != "N" ) then

#   Get the raw data from the remote archives
    set num = `echo $rawlst | wc`
    if ( $num[2] != 0 && $noftp != 'Y' ) then
      pushd ${rawpth} >& /dev/null
      echo "Getting data from raw ftp archive ${rawarchive} for sites: " $rawlst
      set rwdir = $rawdir/$yr[1]/$doy
      sh_get_raw -archive ${rawarchive} -rdir ${rwdir} -login ${rawlogin} -yr ${yr[1]} -doy ${doy} -ndays 1 -sites ${rawlst} -ftp_prog $ftp_prog
      popd >& /dev/null
    else if ( $num[2] != 0 && $noftp == 'Y' ) then
      echo "WARNING: -noftp = $noftp : Unable to get any new raw data from the ftp archive ${rawarchive}."
    endif

#   Now collect up all the raw data we can find locally
    set numrw = `echo ${rawfnd} | wc`
    if ( $numrw[2] != 0 ) echo "Getting raw data from ${rawfnd}"
    set numrx = `echo ${rnxfnd} | wc`
    if ( $numrx[2] != 0 ) echo "Getting rinex data from ${rnxfnd}"

    if ( $numrw[2] != 0 || $numrx[2] != 0 ) then
#       @ count = $rx_doy_plus + $rx_doy_minus + 1    
        @ count = `echo "ibase=10; ${rx_doy_plus} + ${rx_doy_minus} + 1" | bc`
       set chkday = 0
       while ( $count )
          @ count = $count - 1
#          @ chkday = $doy + $rx_doy_plus - $count   
          @ chkday = `echo "ibase=10; ${doy} + ${rx_doy_plus} - ${count}" | bc`

          set chkday  = `echo $chkday | awk '{printf "%03d \n", $1}'`  
          echo "Searching for data on doy: $chkday"
          sh_find_data -d ${yr[1]} ${chkday} -type all -expt $expt -cmdfile tmp.cmds.${ts}
       end
    endif

#   Now make the rinex files for any new files (tested OK up to 10 raw file parts)
#    if ( $#rawlst > 0 ) then 
    echo " " 
    echo "Checking for raw data with no RINEX"
    echo "sh_make_rinex -yr ${yr[1]} -doy ${doy} -rawd ${rawpth} -rdir ${rpth} -mdir ${mpth} -ndays ${rx_doy_minus} ${rx_doy_plus}"
    sh_make_rinex -yr ${yr[1]} -doy ${doy} -rawd ${rawpth} -rdir ${rpth} -mdir ${mpth} -ndays ${rx_doy_minus} ${rx_doy_plus}
#    endif  

#   Go and get rinex files from external rinex archives   
# PT020416: redesign this section so that it simply loops through all the rinex archives now
#           defined in $rinex_ftpsites. The new version of sh_get_rinex will handle gathering
#           the user name/password, archive address and directory information
         
    if( $noftp != 'Y') then
      echo "The following archives will be searched for the rinex files: $rinex_ftpsites"
      pushd ${rpth} >& /dev/null            
      if ( ($#localrx > 0 || $#globalrx > 0)  ) then
        if ( $rinex_ftpsites[1] != "none" ) then
          foreach rinex_archive ($rinex_ftpsites)
            echo "Searching for rinex files from the " $rinex_archive " archive .."
#            @ count = $rx_doy_plus + $rx_doy_minus + 1   
             @ count = `echo "ibase=10; ${rx_doy_plus} + ${rx_doy_minus} + 1" | bc`
            set chkday = 0
            while ( $count )
              @ count = $count - 1
#              @ chkday = $doy + $rx_doy_plus - $count      
               @ chkday = `echo "ibase=10; ${doy} + ${rx_doy_plus} - ${count}" | bc`
              set chkday  = `echo $chkday | awk '{printf "%03d \n", $1}'`  
              echo "Getting data for day: $chkday"
# MOD TAH 130915: Added passing "-subdir" option into sh_get_rinex (variable is blank when not used.
              echo "sh_get_rinex -archive $rinex_archive -yr ${yr[1]} -doy ${chkday} -ndays 1 -sites ${globalrx} -ftp_prog $ftp_prog -xcheck $xcheck $subdir"
              sh_get_rinex -archive $rinex_archive -yr ${yr[1]} -doy ${chkday} -ndays 1 -sites ${globalrx} -ftp_prog $ftp_prog -xcheck $xcheck $subdir
            end	  	  
          end
	endif
      endif  
      popd >& /dev/null
    else if ( $noftp == 'Y' && ($#localrx > 0 || $#globalrx > 0) ) then
        echo "WARNING: -noftp = $noftp : Unable to get any new rinex data from any of the ftp archives" $rinex_ftpsites"."
    endif 
  endif

# PT/JV030130 : introduction of the noprocess option in order to activate either the ftp part of
#               gamit or the processing part
#
  if ($noprocess == 'ftp') then
    echo "WARNING: -noprocess = $noprocess : sh_gamit only performing ftp of files."
    goto noprocess
  endif

#----------------------------------------------
# Now start the processing    
# See if we need to make the processing directory   
  echo "  " 
  if( -e ${procdir}/${daydir} ) then
     echo "Processing directory ${daydir} exists "
  else 
     echo "Making directory ${procdir}/${daydir} "
     mkdir ${procdir}/${daydir}
  endif
  pushd ${procdir}/${daydir}

# Since check the existance of fatal files later, remove any that
# are in the directory
 \rm *.fatal >& /dev/null

#----------------------------------------------
# Set the broadcast orbit to be used in the processing
  set nav = "${brdc}${doy}0.${yr[2]}n"

#--------------------------------------------
# Uncompress and link the rinex files.

  if( $remakex != "N" ) then
#   Set up the list of days to link
#      @ count = $rx_doy_plus + $rx_doy_minus + 1     
     @ count = `echo "ibase=10; ${rx_doy_plus} + ${rx_doy_minus} + 1" | bc`

    while ( $count )
      @ count = $count - 1
#        @ rxday = $doy + $rx_doy_plus - $count     
      @ rxday = `echo "ibase=10; ${doy} + ${rx_doy_plus} - ${count}" | bc`
      set rxday  = `echo $rxday | awk '{printf "%03d \n", $1}'`  
      pushd ${rpth} >& /dev/null
        ( sh_uncompress -f ????${rxday}[0-9].${yr[2]}[oO].Z ) >& /dev/null   
        ( sh_uncompress -f ????${rxday}[0-9].${yr[2]}[oO].gz ) >& /dev/null   
        ( sh_crx2rnx -f ????${rxday}[0-9].${yr[2]}d.Z ????${rxday}[0-9].${yr[2]}d ) >& /dev/null
        ( sh_crx2rnx -f ????${rxday}[0-9].${yr[2]}d.gz ????${rxday}[0-9].${yr[2]}d ) >& /dev/null
        ( sh_crx2rnx -f ????${rxday}[0-9].${yr[2]}d.bz2 ????${rxday}[0-9].${yr[2]}d ) >& /dev/null
#        Remove the compressed rinex
        ( \rm ????${rxday}[0-9].${yr[2]}d.Z  ????${rxday}[0-9].${yr[2]}d.gz ????${rxday}[0-9].${yr[2]}d.bz2 ????${rxday}[0-9].${yr[2]}d ) >& /dev/null
# Check for DOS format rinex files convert to UNIX if necessary                        
      set rxfiles = (`\ls -1 ????${rxday}[0-9].${yr[2]}[oO]`)
      foreach rxf ( $rxfiles )
        set num = `head -n 1  $rxf | od -c | grep '\\r' | wc -l `
        # Modified by M. Floyd (2011/06/10, MIT)
        # to use tr instead of potentially unavailable dos2unix
        #if ( $num != 0 ) dos2unix $rxf $rxf
        if ( $num != 0 ) then
          tr -d '\r' < $rxf > $rxf.tmp && mv -f $rxf.tmp $rxf
        endif
      end 
      popd >& /dev/null       
    end  
#   Link the rinex files to the day directory
    echo "Linking rinex files from: ${rpth}"
    set ses_dur = `echo $nepc $sint | awk '{print $1*$2/3600.0, int($1*$2/3600.0) }' | awk '{print $2, int(($1-$2)*60.0)}'`
    echo "sh_link_rinex -year ${yr[1]} -days ${doy} -ndays ${rx_doy_minus} ${rx_doy_plus} -sesfo ${stime} ${ses_dur} -dir ${rpth} -minspan ${minspan} $fixed_rx_list $sd"
    sh_link_rinex -year ${yr[1]} -days ${doy} -ndays ${rx_doy_minus} ${rx_doy_plus} -sesfo ${stime} ${ses_dur} -dir ${rpth} -minspan ${minspan} $fixed_rx_list $sd
  endif     
# Link rinex met files to the day directory
  if( $met == 'Y' ) then
    echo "Linking RINEX met files from ${metpth} --- works only for single-day sessions" 
    sh_link_rinex -year ${yr[1]} -days ${doy} -met -dir ${metpth}  
  endif  
# Download (optional) and link an IONEX file to the day directory
# Modified by M. Floyd (2015/07/17) to accept argument to -ion option, which
# determines the IONEX product to download, and try both CDDIS and IGNI servers
  if( "$ionex" != '' ) then
    set batfilnm = "f${expt}$yr[3].${doy}"
    if ( -f $batfilnm ) then
      echo "$batfilnm already exists in processing directory. Not downloading or using ../ionex/$ionex${doy}0.${yr[2]}i."
    else
      if( -f ../ionex/$ionex${doy}0.${yr[2]}i ) then  # IONEX file already exists locally
        ln -sf ../ionex/$ionex${doy}0.${yr[2]}i  $batfilnm
        echo "Linked ../ionex/$ionex${doy}0.${yr[2]}i to  $batfilnm"
      else  # Download IONEX file to ../ionex/
        pushd ../ionex  # Add ../ionex to directory stack
        if ( `echo $ionex | cut -c 1-3` == 'esa' ) then  # Only available from IGNI
          echo "sh_get_ion -archive igni -yr $yr[1] -doy $doy -ions $ionex"
          sh_get_ion -archive igni -yr $yr[1] -doy $doy -ions $ionex
        else  # Attempt to download from CDDIS then IGNI
          echo "sh_get_ion -archive cddis -yr $yr[1] -doy $doy -ions $ionex"
          sh_get_ion -archive cddis -yr $yr[1] -doy $doy -ions $ionex
          if ( ! -f $ionex${doy}0.${yr[2]}i ) then  # No file downloaded from CDDIS so try IGNI 
# MOD TAH 150805: Don't try igni -- ftp is hanging and runs can't continue
            echo "NOT TRYING: sh_get_ion -archive igni -yr $yr[1] -doy $doy -ions $ionex"
            # sh_get_ion -archive igni -yr $yr[1] -doy $doy -ions $ionex
          endif
        endif
        popd  # Remove ../ionex from directory stack
        if( -f ../ionex/$ionex${doy}0.${yr[2]}i ) then
          ln -sf ../ionex/$ionex${doy}0.${yr[2]}i  $batfilnm
          echo "Linked ../ionex/$ionex${doy}0.${yr[2]}i to  $batfilnm after download"
        else  # No pre-existing file and all download attempts failed: break day and send mail
          echo "sh_get_ion failed to download requested IONEX file ($ionex${doy}0.${yr[2]}i) from CDDIS and IGNI."
          cat << END >> ${cpth}/tmp.mail.$ts

sh_get_ion failed to download requested IONEX file ($ionex${doy}0.${yr[2]}i) from CDDIS and IGNI.

Processing $yr[1] $doy GPS week $gpsw ${gpsd} Using node: `hostname` Finished at: `date +"%y_%m_%d_%H:%M:%S"`
END
          set JOBSTAT = `echo 'sh_gamit '$expt $yr[1] ${doy}`
          ${umail} "$JOBSTAT" ${mailto} < ${cpth}/tmp.mail.$ts >& /dev/null
          \cp ${cpth}/tmp.mail.$ts ${procdir}/${daydir}/sh_gamit_${daydir}.summary 
          # Remove tmp files
          \rm -r ${cpth}/tmp.mail.$ts tmp.rdf.${ts} tmp.upd disk.used.${ts} tmp.df.${ts} >& /dev/null
          popd  # Remove $procdir/$daydir from directory stack
          break
        endif
      endif
    endif
  endif
#               

#--------------------------------------------
# Set up day links  
  echo " " 
  echo "Running links.day " 
  links.day ${yr[1]} ${doy} $expt  >&! /dev/null  

#--------------------------------------------
# Link the nav-file, sp3-file, and g-gfile 
  echo "Checking RINEX nav file, g-file, and sp3-file links " 
  if ( ! -e ${nav} ) then
# Need the rm in case an old dead link exists. (In this case the new link can't be made)
    \rm $nav >& /dev/null 
    ln -s ${bpth}/${nav} . 
  endif
  if ( ! -e g${orbtm}${yr[3]}.${doy} ) then
# Need the rm in case an old dead link exists. (In this case the new link can't be made)
    \rm g${orbtm}${yr[3]}.${doy} >& /dev/null 
    ln -s ${gpth}/g${orbtm}${yr[3]}.${orbdoy} ./g${orbtm}${yr[3]}.${doy}
  endif         
# RWK 170825: Don't check for an sp3 file if using broadcast orbits
  if( orbt != "brdc" && orbt != "brdm" ) then 
    if ( ! -e ${sp3file} ) then
# Need the rm in case an old dead link exists. (In this case the new link can't be made)
      \rm $sp3file >& /dev/null 
      ln -s ${ipth}/${sp3file} . 
    endif
  endif 



#--------------------------------------------
# Now uncompress the x-files and k-files
  echo "Uncompressing x-files and k-files " 
  (sh_uncompress -f x????${xver}.${doy}.Z ) >& /dev/null  
  (sh_uncompress -f k????${xver}.${doy}.Z ) >& /dev/null  
  (sh_uncompress -f x????${xver}.${doy}.gz ) >& /dev/null
  (sh_uncompress -f k????${xver}.${doy}.gz) >& /dev/null

#--------------------------------------------    
# Remove existing GAMIT.[status][warning][fatal] file
  echo "Removing existing GAMIT.[status][warning][fatal] files "
  \rm GAMIT.status >&! /dev/null  
  \rm GAMIT.warning >&! /dev/null
  \rm GAMIT.fatal >&! /dev/null

# Rerun makexp, makej, and makex if needed     
  echo " " 
  echo "Running makexp,makej, and makex and checking that d-file includes all x-files " 
# MOD TAH 150925: Made echo consistent with execuation.  Specially added  -gnss ${gnss} to executation which was only in echo
  echo "sh_preproc -ydoy ${yr[1]} ${doy} -nav ${nav} -gnss ${gnss} -expt ${expt} -orbt ${orbtm} -sp3file ${sp3file} -jclock ${jclock} -sint ${sint} -nepc ${nepc} -stime ${stime}  -remakex ${remakex} -remakek ${remakek} -remakej ${remakej} -xsite ${xsite} -xver $xver -cmdfile tmp.cmds.${ts}"
  sh_preproc -ydoy ${yr[1]} ${doy} -nav ${nav} -gnss ${gnss} -expt ${expt} -orbt ${orbtm} -sp3file ${sp3file} -jclock ${jclock} -sint ${sint} -nepc ${nepc} -stime ${stime}  -remakex ${remakex} -remakek ${remakek} -remakej ${remakej} -xsite ${xsite} -xver $xver -cmdfile tmp.cmds.${ts}
# MOD TAH 150925: Save $status and then test (since status keeps getting updated).
  set err = $status
  echo "Test $err $status"
  if( $err != 0 ) then
    echo "Failure in sh_preproc. STATUS $err -- sh_gamit terminated"   
    exit 1
  endif
          
  if ($noprocess == 'preproc') then
    echo "WARNING: -noprocess = $noprocess : sh_gamit only performing preprocessing of files."
    popd
    goto noprocess
  endif	    
     
#-------------------------------------------- 
#Run SNR analysis is requested  
  if ( $snrres == "Y" ) then 
# Get cartesian coordinates for all sites to be processed      
    sh_l_to_xyz -file l${expt}${yr[3]}.${doy}    
# Get list of all rinex files in this experiment
    ls ????${doy}?.${yr[2]}o >! tmp.rx_files.${ts}
    tail -n +8 d${expt}${yr[3]}.${doy} | awk 'substr ($1,1,1) == "x" {print substr($1,2,4)}' >! tmp.${expt}.sites.${ts} 
    if ( -e tmp.${expt}.rx_files.${ts} ) \rm tmp.${expt}.rx_files; touch tmp.${expt}.rx_files.${ts}
    foreach i ( `cat tmp.${expt}.sites.${ts}` )
      grep $i tmp.rx_files.${ts} >> tmp.${expt}.rx_files.${ts} 
    end
# Loop over the rinex files creating SNR phase residuals and plots.
    foreach rx_file ( `cat tmp.${expt}.rx_files.${ts}` )
      set rx_root = `echo $rx_file | awk '{print substr($1,1,8)'}`
      set rx_site = `echo $rx_file | awk '{print substr($1,1,4)'}`
      set rx_cord = `grep -i ^${rx_site} l${expt}${yr[3]}.${doy}.xyz | tail -n -1 | awk '{print $2, $3, $4}'`  
      svsnr ${nav} ${rx_file} $rx_cord >! ${rx_root}.snr
      spcsnr ${rx_root}.snr >! ${rx_root}.spc
      sh_oneway -dphs ${rx_root}.spc -type DPHS -elev
      if ( -e ${rx_site}.${doy}.DPHS6.ps && $pngs == "Y" ) then 
        #gs -sDEVICE=ppmraw -r72x72 -sOutputFile=/tmp/${rx_site}_snr.ppm      -dNOPAUSE -dQUIET ${rx_site}.${doy}.DPHS6.ps    - < /dev/null >&! tmp.tst.${ts} 
        #gs -sDEVICE=ppmraw -r72x72 -sOutputFile=/tmp/${rx_site}_snr_elev.ppm -dNOPAUSE -dQUIET ${rx_site}.${doy}_elev_res.ps - < /dev/null >&! tmp.tst.${ts} 
        #${impath}/convert  -alpha off +antialias   -crop 0x0 -rotate 90 /tmp/${rx_site}_snr.ppm       PNG:${rx_site}.${doy}_snr.gif
        #${impath}/convert  -alpha off +antialias  -crop 0x0 /tmp/${rx_site}_snr_elev.ppm  PNG:${rx_site}.${doy}_snr_elev.gif
        #\rm /tmp/${rx_site}_snr.ppm /tmp/${rx_site}_snr_elev.ppm
        if ( `gmt --version | cut -d '.' -f 1` == 5 && `gmt --version | cut -d '.' -f 2` <= 1 ) then  # GMT 5 prior to 5.1
          gmt ps2raster ${rx_site}.${doy}.DPHS6.ps -Tg -P -F${rx_site}.${doy}_snr.
          gmt ps2raster ${rx_site}.${doy}_elev_res.ps -Tg -P -F${rx_site}.${doy}_snr_elev.
        else  # GMT 5.1 onwards
          gmt psconvert ${rx_site}.${doy}.DPHS6.ps -Tg -P -F${rx_site}.${doy}_snr.
          gmt psconvert ${rx_site}.${doy}_elev_res.ps -Tg -P -F${rx_site}.${doy}_snr_elev.
        endif
        if ( ${pngs} == "Y" ) \rm ${rx_site}.${doy}.DPHS6.ps ${rx_site}.${doy}_elev_res.ps
        \mv ${rx_site}.${doy}_snr.png      ../figs
        \mv ${rx_site}.${doy}_snr_elev.png ../figs
     endif  
     \rm ${rx_site}.avg t.prn t.all >&! /dev/null 
    end
    \rm tmp.rx_files.${ts} tmp.${expt}.sites.${ts} tmp.${expt}.rx_files.${ts} tmp.tformout.${ts} tmp.tst.${ts} >&! /dev/null
  endif  

#--------------------------------------------
# Run fixdrv
  echo "Running fixdrv"     
  if ( -e i${expt}${yr[3]}.$doy ) \rm i${expt}${yr[3]}.$doy 
  fixdrv d${expt}${yr[3]}.$doy

#--------------------------------------------
#if there are any FATAL errors before the GAMIT run, stop....
 if (-e MAKEX.fatal || -e MAKEK.fatal || -e MAKEXP.fatal || -e FIXDRV.fatal || -e GAMIT.fatal ) then 
   echo "Fatal errors occured in MAKEXP, MAKEX, MAKEK or FIXDRV"
   echo " " 
   if ( -e MAKEXP.fatal ) cat MAKEXP.fatal
   if ( -e MAKEX.fatal ) cat MAKEX.fatal 
   if ( -e MAKEK.fatal ) cat MAKEK.fatal
   if ( -e FIXDRV.fatal ) cat FIXDRV.fatal
   if ( -e GAMIT.fatal ) cat GAMIT.fatal
   echo " " 
   echo "Check the day $doy data"
   exit
 endif

#--------------------------------------------
# Remove acbias.dat file if it exists
 if ( -e acbias.dat ) \rm acbias.dat
  
#--------------------------------------------
# Run the gamit solution
  echo " "
  echo "Now running the GAMIT batch file ( " b${expt}${yr[3]}.bat " )  "   
  echo "Removing existing autcln.post.sum and q${expt}a.${doy} "
  \rm -f autcln.post.sum >! /dev/null
  \rm -f q${expt}a.${doy} >! /dev/null 
#
# Check this out (some funky highlight colors-- SCM      
# This no longer needed since messages are now in the sh_gamit log file;
#   (also, the highlighting didn't work very well) ---RWK 070416
#  set esc = `echo '\e'`
#  set bright = "${esc}[31;7m" 
#  set endbright = "${esc}[30;0m"
#  echo "${bright}See sh_gamit.log, GAMIT.status, GAMIT.warning, GAMIT.fatal for messages${endbright}"
  echo " " 
  csh b${expt}${yr[3]}.bat 
  echo " "

#--------------------------------------------
# Get the current disk usage (MAX)
  ${udf} . >&! tmp.df.${ts}
  tail -n -1 tmp.df.${ts} | awk '{if ( substr($0,1,1) == " " ) {print $2,$3,$4} else {print $3,$4,$5}}' >&! tmp.rdf.${ts}
  awk '{print "Disk Usage: ",$1/1024.," Free ",$2/1024.0" Mbyte. Used "$3}' tmp.rdf.${ts} >&! disk.used.${ts}

#--------------------------------------------
# Create the processing summary 
  echo " "  
  echo "Creating sh_gamit_${daydir}.summary in day directory and for mailing "
  echo " " >> ${cpth}/tmp.mail.$ts
  echo "Processing directory: `pwd`" >>  ${cpth}/tmp.mail.$ts
  cat disk.used.${ts} >> ${cpth}/tmp.mail.$ts
  echo "  " >> ${cpth}/tmp.mail.$ts

# Get the number of xfiles
  set num = `\ls x????${xver}.${doy} x????${xver}.${doy}.small | wc`
  set usd = `tail -n +7 d${expt}${yr[3]}.${doy} | head -n 1`

  echo 'Number of stations used '$usd' Total xfiles '$num[1] >> ${cpth}/tmp.mail.$ts 
  if ( -e tmp.small_xfiles ) cat tmp.small_xfiles | awk -v minxf=$minxf '{print "X-files below minxf (" minxf "KB) threshold:", $0}' >> ${cpth}/tmp.mail.$ts
  if ( $#xsite > 0 ) echo $xsite  | awk '{print "Sites excluded by xsite command", $0}' >> ${cpth}/tmp.mail.$ts
  echo "  " >> ${cpth}/tmp.mail.$ts
  if( -e autcln.post.sum ) then
    echo "Postfit RMS rms, total and by satellite" >> ${cpth}/tmp.mail.$ts
    grep "^RMS  IT Site" autcln.post.sum >> ${cpth}/tmp.mail.$ts
    grep "^RMS ... ALL " autcln.post.sum >> ${cpth}/tmp.mail.$ts
    echo "Best and Worst two sites:"  >> ${cpth}/tmp.mail.$ts
    grep "^RMS ... .... " autcln.post.sum | grep -v Site | sort -n -k 4 | head -n 2 >> ${cpth}/tmp.mail.$ts
    grep "^RMS ... .... " autcln.post.sum | sort -n -k 4  | tail -n -2 >> ${cpth}/tmp.mail.$ts 
  else
    echo "No autcln.post.sum file created" 
  endif
  echo " "  >> ${cpth}/tmp.mail.$ts
  echo "Double difference statistics" >> ${cpth}/tmp.mail.$ts
  grep "Pref" q${expt}a.${doy} >> ${cpth}/tmp.mail.$ts
  grep "^ Number of double" q${expt}a.${doy} >> ${cpth}/tmp.mail.$ts
  echo " " >> ${cpth}/tmp.mail.$ts

# MOD TAH 040102: Add grep on the number of biases fixed    
# MOD RWK 070227: Change to work with new q-file printout, works now for LC_HELP    
#   grep "Phase ambiguities in solution"  q${expt}a.${doy} >> ${cpth}/tmp.mail.$ts   
#   grep "WL ambiguities resolved"  q${expt}a.${doy} >> ${cpth}/tmp.mail.$ts   
#   grep "NL ambiguities resolved"  q${expt}a.${doy} >> ${cpth}/tmp.mail.$ts   
# MOD RWK 070302: No, still better to have the numbers on a single grep-able line in the summary
   grep "LC_HELP  ion constraint" q${expt}a.${doy} >> ${cpth}/tmp.mail.$ts  
   set nbftot = `grep "Phase ambiguities in solution"  q${expt}a.${doy} | awk '{print $1}'`
   set nwlf   = `grep "WL ambiguities resolved"  q${expt}a.${doy} |  awk '{print $1}'`
   set nnlf   = `grep "NL ambiguities resolved"  q${expt}a.${doy} |  awk '{print $1}'`
# MOD TAH 080417: Added new counts from autcln for expected values.
   set nbfexp = `grep "NBIAS out" autcln.post.sum | awk '{print $9}'`
   set nbfaut = `grep "NBIAS out" autcln.post.sum | awk '{print $3}'`
   echo " Phase ambiguities (Total  WL-fixed   NL-fixed):"  $nbftot $nwlf $nnlf  " AUTCLN (Total Expected) " $nbfaut $nbfexp >> ${cpth}/tmp.mail.$ts
#   echo $nbftot $nwlf $nnlf | awk '{printf(" Phase ambiguities WL fixed %5.1f% NL fixed %5.1f%\n",$2/$1*100,$3/$1*100)}' >> ${cpth}/tmp.mail.$ts
# MOD TAH 080805: Problems with % in Ubunto awk
   echo $nbftot $nwlf $nnlf '%' | awk '{printf(" Phase ambiguities WL fixed %5.1f%c NL fixed %5.1f%c \n",$2/$1*100,$4,$3/$1*100,$4)}' >> ${cpth}/tmp.mail.$ts
   grep "relax ion constraint" *.warning >> ${cpth}/tmp.mail.$ts   

  (head -n 10 *.fatal >> ${cpth}/tmp.mail.$ts) >& /dev/null

#--------------------------------------------
# Find sites with coordinate adjustments greater than the l-file Update tolerance specified in sestbl. 
# If entry is missing do not update the tables l-file.
  set lf_upd_df = `grep -i ^update sestbl. | grep -i tolerance | awk '{print $4}'`
# l-file coord update not attempted if Update tolerance is not specified in sestbl.
# Any adjustment > 0.3 m will still be reported to the user
  if ( $lf_upd_df == '') then  
# If not set by sestbl. Update tolerance line, by default report all coordinate adjustment > 0.3 m
# But do not update the master tables lfile. 
     set lf_upd_df = 0.3
     set no_lf_upd = "Y"
    echo "sestbl. does not have a l-file Update tolerance line. No automatic tables/lfile. updates allowed"
  endif

#  if ( -e tmp.lf_upd_df.${ts} ) \rm tmp.lf_upd_df.${ts}
#  touch tmp.lf_upd_df.${ts}
#  grep -i ^update sestbl. | grep -i tolerance | awk '{print $4}' >> tmp.lf_upd_df.${ts}
#  echo $lf_upd_df >> tmp.lf_upd_df.${ts}
#  set lf_upd_tol = `cat tmp.lf_upd_df.${ts} | awk '{print $1}'`

  echo " " >> ${cpth}/tmp.mail.$ts  
  if( -e q${expt}p.${doy} ) then
    echo List >! tmp.bad.prefit.${ts}
    grep '^  ........ GEOC LAT  dms ' q${expt}p.${doy} | awk '{if (( sqrt($6^2) >= lut ) && ( NF > 7 )) print substr($0,7,4),substr($0,12,10),$6}' lut=$lf_upd_df >> tmp.bad.prefit.${ts}
    grep '^  ........ GEOC LONG dms ' q${expt}p.${doy} | awk '{if (( sqrt($6^2) >= lut ) && ( NF > 7 )) print substr($0,7,4),substr($0,12,10),$6}' lut=$lf_upd_df >> tmp.bad.prefit.${ts} 
    grep '^  ........ RADIUS    km  ' q${expt}p.${doy} | awk '{if (( sqrt($5^2) >= lut ) && ( NF > 6 )) print substr($0,7,4),substr($0,12,10),$5}' lut=$lf_upd_df >> tmp.bad.prefit.${ts} 
  else
    echo "No prefit q-file created"
  endif
  if( -e  q${expt}a.${doy} ) then
    echo List >! tmp.bad.postfit.${ts}
    grep '^  ........ GEOC LAT  dms ' q${expt}a.${doy} | awk '{if (( sqrt($6^2) >= lut ) && ( NF > 7 )) print substr($0,7,4),substr($0,12,10),$6}' lut=$lf_upd_df >> tmp.bad.postfit.${ts} 
    grep '^  ........ GEOC LONG dms ' q${expt}a.${doy} | awk '{if (( sqrt($6^2) >= lut ) && ( NF > 7 )) print substr($0,7,4),substr($0,12,10),$6}' lut=$lf_upd_df >> tmp.bad.postfit.${ts} 
    grep '^  ........ RADIUS    km  ' q${expt}a.${doy} | awk '{if (( sqrt($5^2) >= lut ) && ( NF > 6 )) print substr($0,7,4),substr($0,12,10),$5}' lut=$lf_upd_df >> tmp.bad.postfit.${ts} 
  else
    echo "No final q-file created"
  endif                                                                
#--------------------------------------------
# Find sites with no coordinate adjustments I.e. NOT estimated in the solution. 
  if( -e q${expt}p.${doy} ) then 
    echo List >! tmp.nosoln.prefit.${ts}
    grep '^  ........ GEOC LAT  dms ' q${expt}p.${doy} | awk '{if ( NF <= 7 ) print substr($0,7,4)}' >> tmp.nosoln.prefit.${ts}
  endif
  if( -e q${expt}a.${doy} ) then
    echo List >!  tmp.nosoln.postfit.${ts}
    grep '^  ........ GEOC LAT  dms ' q${expt}a.${doy} | awk '{if ( NF <= 7 ) print substr($0,7,4)}' >> tmp.nosoln.postfit.${ts} 
  endif

#--------------------------------------------
# If there are sites with large coordinate adjustments. Update the tables lfile.  
  if( -e  tmp.bad.prefit.${ts} ) then 
    set pre_num = ` cat tmp.bad.prefit.${ts} | wc -l `   
  else
    set pre_num = 0
  endif
  set post_num = ` cat tmp.bad.postfit.${ts} | wc -l ` 
  if ( -e tmp.nosoln.prefit.${ts} ) then
    set pre_num1 = ` cat tmp.nosoln.prefit.${ts} | wc -l `   
  else
    set pre_num1 = 0
  endif
  set post_num1 = ` cat tmp.nosoln.postfit.${ts} | wc -l ` 
# Check that the prefit and postfit solution RMS's are OK.... 
# MOD TAH 080510: Check Prefit nrms not just Pre since this can appear in site name 
  if( -e  q${expt}p.${doy} ) then 
     set rms_prefit  = `grep "Prefit nrms:" q${expt}p.${doy} | head -n 1 | awk '$6 > 1 {print "no"}'`  
  endif
  set rms_postfit = `grep "Prefit nrms:" q${expt}a.${doy} | head -n 1 | awk '$6 > 1 {print "no"}'`

  if ( ($pre_num > 1 || $post_num > 1) && $no_lf_upd  == "N" ) then
    set lfcode = `tail -n +3 d${expt}${yr[3]}.${doy} | head -n 1 | awk '{print substr($0,2,4)}'`
# Get the name of lfile to update
     set lnk = `\ls -l l${lfcode}${yr[3]}.${doy} | awk '{print substr($0,1,1)}'`
     if( $lnk == 'l' ) then
        set lfname = `\ls -l l${lfcode}${yr[3]}.${doy} | awk '{print $NF}'`
     else
        set lfname = l${lfcode}${yr[3]}.${doy}
     endif
     if ( -e  l${lfcode}b.${doy} && ${rms_postfit} != "no" ) then
       if ( ! -e ${lfname}.orig ) \cp ${lfname} ${lfname}.orig
       \cp l${lfcode}b.${doy} ${lfname}
     else if ( -e  l${lfcode}a.${doy} && ${rms_postfit} != "no" && ${rms_prefit} != "no" ) then
       if ( ! -e ${lfname}.orig ) \cp ${lfname} ${lfname}.orig
       \cp l${lfcode}a.${doy} ${lfname}
     endif
  endif
 
#--------------------------------------------
# Echo sites with large adjustment to the mail file.
  if ( $no_lf_upd == "Y" ) then
    echo "User set no_lf_upd = Y - Sites listed below adjustments > $lf_upd_df m. The master tables/lfile. is NOT updated  " >> ${cpth}/tmp.mail.$ts
    echo " " >> ${cpth}/tmp.mail.$ts
  endif
  if ( $pre_num > 1 && ${rms_prefit} != "no" ) then
    echo "List of sites updated in the tables lfile. based on adjustments to coordinates > $lf_upd_df m in the Prefit Solution" >> ${cpth}/tmp.mail.$ts
    tail -n +2 tmp.bad.prefit.${ts}  >> ${cpth}/tmp.mail.$ts
#   Find and echo the updated lfile entries into the mail and summary files.
#   Used later by sh_PBS_gamit to update the tables lfile if necessary (SCM).
#   Added sort before uniq so that is will work TAH 080511
    set updated_sites = `tail -n +2 tmp.bad.prefit.${ts} | awk '{print $1}' | sort | uniq `
    set lfcode = `tail -n +3 d${expt}${yr[3]}.${doy} | head -n 1 | awk '{print substr($0,2,4)}'`
    set lfile = l${lfcode}${yr[3]}.${doy}
    foreach usite ( $updated_sites )
       grep "Updated from $lfile" l${lfcode}a.${doy} | grep $usite | awk '{print $0, "UpdatedApr"}' >> ${cpth}/tmp.mail.$ts
    end
    echo " " >> ${cpth}/tmp.mail.$ts
  else if ( $post_num > 1 && ${rms_postfit} != "no" ) then
    echo "List of sites updated in the tables lfile. based on adjustments to coordinates > $lf_upd_df m in the Postfit Solution" >> ${cpth}/tmp.mail.$ts
    tail -n +2 tmp.bad.postfit.${ts}  >> ${cpth}/tmp.mail.$ts
#   Used later by sh_PBS_gamit to update the tables lfile if necessary (SCM).
#   Added sort before uniq so that is will work TAH 080511
    set updated_sites = `tail -n +2 tmp.bad.postfit.${ts} | awk '{print $1}' | sort | uniq `
    set lfcode = `tail -n +3 d${expt}${yr[3]}.${doy} | head -n 1 | awk '{print substr($0,2,4)}'`
    set lfile = l${lfcode}a.${doy}
    foreach usite ( $updated_sites )
       grep "Updated from $lfile" l${lfcode}b.${doy} | grep $usite | awk '{print $0, "UpdatedApr"}' >> ${cpth}/tmp.mail.$ts
    end
    echo " " >> ${cpth}/tmp.mail.$ts
  endif

  if ( $pre_num1 > 1 && -e tmp.nosoln.prefit.${ts} ) then
    echo "List of sites without Prefit coordinate solutions:" >> ${cpth}/tmp.mail.$ts
    tail -n +2 tmp.nosoln.prefit.${ts} | uniq | awk '{print $1, "NoPrefit"}'>> ${cpth}/tmp.mail.$ts
    echo " " >> ${cpth}/tmp.mail.$ts
  endif
  if ( $post_num1 > 1 ) then
    echo "List of sites without Postfit coordinate solutions:" >> ${cpth}/tmp.mail.$ts
    tail -n +2 tmp.nosoln.postfit.${ts} | uniq | awk '{print $1, "NoPostfit"}' >> ${cpth}/tmp.mail.$ts
    echo " " >> ${cpth}/tmp.mail.$ts
  endif

# MOD TAH 120329: See if any 'GCR APTOL' lines in q-files
  set ngcr = `grep 'GCR APTOL' q${expt}?.${doy} | wc -l`
  if( $ngcr > 0 ) then
     echo "WARNING: $ngcr SITES have over constrained aproiri coordinates" >> ${cpth}/tmp.mail.$ts
     grep 'GCR APTOL' q${expt}?.${doy}  >> ${cpth}/tmp.mail.$ts
     echo " "  >> ${cpth}/tmp.mail.$ts
  endif
  
#----------------------------------------------
# Output metutil files of ZWD and PW

  if ( $metutil == "Z"  && ! -e GAMIT.fatal ) then
      echo "Creating metutil files of ZWD and PW"
      sh_metutil -f o${expt}a.$doy -z z????$yr[3].$doy
  endif

#----------------------------------------------
# Echo end time into mail file
  echo "Processing $yr[1] $doy GPS week $gpsw ${gpsd} Using node: `hostname` Finished at: `date +"%y_%m_%d_%H:%M:%S"`" >> ${cpth}/tmp.mail.$ts
  
#----------------------------------------------
# Tidy up

  \rm tmp.bad.prefit.${ts} tmp.bad.postfit.${ts} tmp.nosoln.prefit.${ts} tmp.nosoln.postfit.${ts} tmp.lf_upd_df.${ts} tmp.small_xfiles >& /dev/null

#--------------------------------------------
# Mail the Job status file to the specified email account 

  set JOBSTAT = `echo 'sh_gamit '$expt $yr[1] ${daydir}`
  ${umail} "$JOBSTAT" ${mailto} < ${cpth}/tmp.mail.$ts >& /dev/null
  \cp ${cpth}/tmp.mail.$ts ${procdir}/${daydir}/sh_gamit_${daydir}.summary 
# Remove tmp files
  \rm -r ${cpth}/tmp.mail.$ts tmp.rdf.${ts} tmp.upd disk.used.${ts} tmp.df.${ts} >& /dev/null


# Make a copy of the autcln.postfit.summary file.   
  set acmd = `grep -i '^AUTCLN Command File = ' sestbl.  | awk '{print $5}'`
# MOD TAH 061114: See if acmd file found.  If not then use default name
  set lenacmd = `echo $acmd | wc -w`
  if( $lenacmd == 0 ) set acmd = "autcln.cmd"
# END MOD TAH

  if ( -e $acmd ) then  
     set pfsumf  = `grep '^POST' $acmd[1] | grep -i sum | awk '{print $3}'`  
     if ( -e $pfsumf ) then 
       \cp $pfsumf $pfsumf.${expt} 
       echo " " 
       echo "cp $pfsumf $pfsumf.${expt} " 
     endif 
  endif

#Make or append to the HISTORY file  
  echo "Writing to HISTORY file"
  sh_history -dir ./

#--------------------------------------------
# See if we want to plot residuals  
  if( $pres == 'Y' || $pres == 'E' && ! -e GAMIT.fatal ) then

#   Make the sky plots   
    echo "Creating sky plots"
    if ( ${pngs} == "N" ) then 
      if ($pres != "E" ) then
        sh_make_sky_pngs -site ALL -daydir ${daydir} -pngs ${pngs} -rmps N -cmdfile tmp.cmds.${ts}  
      else
        sh_make_sky_pngs -site ALL -daydir ${daydir} -pngs ${pngs} -rmps N -elev Y -cmdfile tmp.cmds.${ts}
      endif
    else
      if ($pres != "E" ) then  
        echo "Calling sh_make_sky_pngs with no elevation plots"
        sh_make_sky_pngs -site ALL -daydir ${daydir} -pngs ${pngs} -cmdfile tmp.cmds.${ts}
      else     
        echo "Calling sh_make_sky_pngs with elevation plots"
        sh_make_sky_pngs -site ALL -daydir ${daydir} -pngs ${pngs} -elev Y -cmdfile tmp.cmds.${ts}
      endif
    endif
  endif

#--------------------------------------------    
#
# Clean up the files used in processing 
 echo " "
 echo "Deleting, compressing, and archiving files "

  if( $comp == 'C' ) then 
    echo "Compressing raw and/or RINEX files"
#   Make sure we compress any rinex files that we uncompressed  
#     @ count = $rx_doy_plus + $rx_doy_minus + 1
   @ count = `echo "ibase=10; ${rx_doy_plus} + ${rx_doy_minus} + 1" | bc`
    while ( $count )
      @ count = $count - 1
#       @ rxday = $doy + $rx_doy_plus - $count 
      @ rxday = `echo "ibase=10; ${doy} + ${rx_doy_plus} - ${count}" | bc`

      set rxday  = `echo $rxday | awk '{printf "%03d \n", $1}'`
      set rxgpsw = `doy $yr[1] $rxday | tail -n -2 | head -n 1 | awk '{printf "%04d \n", $3}'`
      set rxgpsd = `doy $yr[1] $rxday | tail -n -2 | head -n 1 | awk '{printf "%1d  \n", substr($7,1,1)}'`
      echo "Compressing rinex files: $rxday"
      if ( $hatanaka != "Y" ) then
        gzip -f ${rpth}/????${rxday}[0-9].${yr[2]}[oO] >>& /dev/null 
      else 
# Make new style compressed rinex
        pushd ${rpth} >& /dev/null  
        sh_rnx2crx -f ????${rxday}[0-9].${yr[2]}[oO]* 
        popd >& /dev/null
# Remove the uncompressed rinex
        \rm ${rpth}/????${rxday}[0-9].${yr[2]}[oO]*
      endif
      
# Make sure we compress any raw files on this day
      echo "Compressing raw files: $rxday"
# Ashtech
      gzip -f ${rawpth}/r?????${yr[2]}.${rxday} >>& /dev/null
      gzip -f ${rawpth}/b?????${yr[2]}.${rxday} >>& /dev/null
      gzip -f ${rawpth}/e?????${yr[2]}.${rxday} >>& /dev/null
      gzip -f ${rawpth}/s?????${yr[2]}.${rxday} >>& /dev/null
# Trimble
      gzip -f ${rawpth}/????${rxday}?.dat >>& /dev/null
      gzip -f ${rawpth}/????${rxday}?.mes >>& /dev/null
      gzip -f ${rawpth}/????${rxday}?.ion >>& /dev/null
      gzip -f ${rawpth}/????${rxday}?.eph >>& /dev/null
# Turborogue
      gzip -f ${rawpth}/????${rxgpsw}.${rxgpsd}?c    >>& /dev/null   
      gzip -f ${rawpth}/????${rxgpsw}${rxgpsd}??.cmp >>& /dev/null
      gzip -f ${rawpth}/????${rxgpsw}.${rxgpsd}?t    >>& /dev/null   
      gzip -f ${rawpth}/????${rxgpsw}${rxgpsd}??.trb >>& /dev/null

    end

  endif

# Compress any files listed in copts variable

# Exit the day directory. Pop back to the directory you started the process sh_gamit in
  popd

  pushd ${procdir} >& /dev/null   
  if ( $#copts >= 1 ) then  
    echo " "
    sh_cleanup -d ${yr[1]} ${doy} -expt ${expt} -orbt ${orbtm} -nav ${brdc} -copt ${copts} -dprefix ${dprefix} -dsuffix ${dsuffix}
  endif               

# Archive files listed in the aopts variable
  if ( $#aopts >= 1 ) then  
    echo " "
    sh_cleanup -d ${yr[1]} ${doy} -expt ${expt} -orbt ${orbtm}  -nav ${brdc} -aopt ${aopts} -dprefix ${dprefix} -dsuffix ${dsuffix} -archpth ${archivepth}
  endif

# Remove unwanted files listed in dopts variable.
  if ( $#dopts >= 1 ) then
# Check if all day directory files should be deleted.
    foreach i ( $dopts )
      if ( $i == "all" ) then
        \rm -r ${daydir}
        set rm_all = yes
      endif
    end
# Just delete requested files.
    if ( $rm_all != "yes" ) then
      echo " "
      sh_cleanup -d ${yr[1]} ${doy} -expt ${expt} -orbt ${orbtm} -nav ${brdc} -dopt ${dopts} -dprefix ${dprefix} -dsuffix ${dsuffix}
    endif
  endif
  pwd
                                                                
# repeat the instructions to user if the run has failed  
 if ( $rm_all != yes && -e $daydir/GAMIT.fatal ) then    
   echo "  ** Processing failure ; see sh_gamit.log, GAMIT.fatal, GAMIT.warning, GAMIT.status in $daydir for messages"
   cat $daydir/GAMIT.fatal
   echo " " 
   exit
 endif

  popd >& /dev/null

# Come to here if you are just ftping files using -noprocess ftp 
noprocess:

#--------------------------------------------
# End loop over experiments to be processed
end

#--------------------------------------------
# End loop over days to be processed
end

#--------------------------------------------
# Finished at last. Bye Bye have a nice day.....
exit
