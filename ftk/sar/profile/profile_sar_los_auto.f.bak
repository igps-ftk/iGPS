CTITLE
      program  profile_sar_los_auto
c     --PURPOSE--

c     --ALGORITHM--

c     --EXAMPLE--
c

c     --MODIFICATIONS--

      IMPLICIT NONE
      INCLUDE '../../inc/cgps.h'

c     >>VAR_DEC
c     --INPUT--
c     vfile - velocity
c     ffile - fault vector
c     pfile - profile vector
c     p_wid - width of profile
c
      character*1023 vfile,ffile,pfile,opath
      real*8 p_wid

c     --OUTPUT--

c     --Local Parameters--
      real*8 DPI

      integer*4 NMAX,iargc
      parameter (NMAX=100000)

      integer*4 nv,vINp(NMAX),vpCounts(NMAX)
      character*1023 vlines(NMAX),vline,flines(NMAX),fline
      real*8 loni,lati,veli
      real*8 d_v2p,d_v2ps(NMAX),d_v2f,d_v2fs(NMAX)
      real*8 lons(NMAX),lats(NMAX),vels(NMAX),plons(NMAX),plats(NMAX)


      integer*4 npt,i,j,k,l,m,n,pos,ii,jj
      integer*4 fid,ioerr
      character*1023 ofile

c     for fault/profile vectors
      character*1023 pnames(nmax_row),fnames(nmax_row),pname
      real*8 pxys(2,nmax_row),fxys(2,nmax_row),pxys2(4,nmax_row)
      real*8 plonmin,plonmax,platmin,platmax
      integer*4 pnpts(nmax_row),pn,fnpts(nmax_row),fn


      real*8 strikes(nmax_row),strike_avg,strike
      real*8 slope,slopes(nmax_row),slope_avg,slope_se,slopei
      real*8 strikei,strike_se,x1,y1,x2,y2,x3,y3,ox1,oy1,theta
      real*8 r8tmp,r8sum,r8sum2
      integer*4 j1,j2

      integer*4 npf
      real*8 len_acc_i,xys_pf(2,nmax_row),oxys(4,nmax_row),len_seg_i
      real*8 oxy_pf(4),oxy(4)

c     for map_2points
      integer*4 is_radian,is_meter,is_mile
      real*8 r_earth,d_d,kpd,latmid

c     for point_perp_line
      real*8 a1(2),b1(2),c1(2),d1(2)

      character*1023 tmpstr1,tmpstr2,tmpstr3,tmpstr4,tmpstr
      integer*4 nblen
      character*1 path_sep

      integer*4 sec1,sec2,run_time_min,run_time_sec
      character*50  prog,ver,user,os,hostname,date_time

c     <<VAR_DEC
      prog='profile_sar_los_auto'
      write(*,'(3a)') '|> ',prog(1:nblen(prog)),' ...'
      ver='20220123'
c      ioerr=system('whoami')
      call getlog(user)
c      write(*,*) 'user:',user
      sec1=time()
      date_time=ctime(sec1)
c      write(*,*) 'time:',date_time,i
      ioerr=hostnm(hostname)
c      write(*,*) 'host:',hostname
c      stop


c      write(*,*) 'iargc():',iargc()
      if (iargc().le.0) then
         write(*,*) 'Usage: profile_sar_los_auto --vfile=vfile_name'
         write(*,*) '         --opath=out_dir'
         stop
      endif

      p_wid=10d0
      DPI=4d0*datan(1d0)
c      write(*,*) 'DPI:',DPI
      is_radian=0
      is_meter=1
      is_mile=0
      r_earth=0



      do i=1,iargc()
         call getarg(i,tmpstr)
c         write(*,*) tmpstr(1:nblen(tmpstr))
         pos=index(tmpstr,'=')
c         write(*,*) 'pos:',pos
         if (pos.le.0) then
            write(*,*) 'invalid parameter!'
            stop
         endif

         if (tmpstr(1:pos).eq.'--vfile=') then
c            write(*,*) tmpstr(pos+1:)
c            read(tmpstr(pos+1:),*) vfile
           vfile=tmpstr(pos+1:)
         elseif (tmpstr(1:pos).eq.'--ffile=') then
c            read(tmpstr(pos+1:),*) ofile
           ffile=tmpstr(pos+1:)
         elseif (tmpstr(1:pos).eq.'--pfile=') then
c            read(tmpstr(pos+1:),*) ofile
           pfile=tmpstr(pos+1:)
         elseif (tmpstr(1:pos).eq.'--opath=') then
c            read(tmpstr(pos+1:),*) ofile
           opath=tmpstr(pos+1:)
         elseif (tmpstr(1:pos).eq.'--width=') then
            read(tmpstr(pos+1:),*) p_wid
         else
            write(*,*) '[]ERROR: invlaid parameter(',
     +    tmpstr(1:pos),')!!'
            stop
         endif
      enddo

      p_wid=p_wid/2d0

      if (nblen(vfile).lt.1) then
        write(*,*) '[]ERROR: no input velocity file!!'
        stop
      endif
      if (nblen(ffile).lt.1) then
        write(*,*) '[]ERROR: no input fault file!!'
        stop
      endif
      if (nblen(pfile).lt.1) then
        write(*,*) '[]ERROR: no input profile file!!'
        stop
      endif
      if (nblen(opath).lt.1) then
        write(*,*) '[]ERROR: no output directory!!'
        stop
      endif


      write(*,*) 'vfile: ',vfile(1:nblen(vfile))
      write(*,*) 'ffile: ',ffile(1:nblen(ffile))
      write(*,*) 'pfile: ',pfile(1:nblen(pfile))
      write(*,*) 'opath: ',opath(1:nblen(opath))

c     read velocity vfile (xyz format)
c      call read_cols(vfile,data,nrow,ncol,headers,nhead,cmt)
      call read_txt(vfile,vlines,nv)
c      do i=1,50
c        vline=vlines(i)
c        write(*,*) i,vline(1:nblen(vline))
c      enddo
c      stop
      write(*,*) '#velocity points:',nv

c     read fault
      call read_psxy(ffile,fxys,fnpts,fnames,fn)
c      j1=1
c      do i=1,fn
c        write(*,*) 'line:',i
c        write(*,*) 'name:',fnames(i)
c        j2=j1+fnpts(i)-1
c        write(*,*) 'j1,j2:',j1,j2
c        do j=j1,j2
c          write(*,*) '    ',fxys(1,j),fxys(2,j)
c        enddo
c        j1=j1+fnpts(i)
c      enddo
      write(*,*) '#faults:',fn
      write(*,*) '#fault segments:',fnpts(1)-1


c     read profile
      call read_psxy(pfile,pxys,pnpts,pnames,pn)
      j1=1
      plonmin=999
      plonmax=-999
      platmin=999
      platmax=-999
      do i=1,pn
        vpCounts(i)=0
        write(*,*) 'line:',i
        pname=pnames(i)
        write(*,*) 'name:',pname(1:nblen(pname))
        j2=j1+pnpts(i)-1
        write(*,*) 'j1,j2:',j1,j2
        if ((j2-j1).ne.1) then
          write(*,*) '[]ERROR: wrong number of vertex for profile)!!'
          write(*,*) '[]INFO: should be 2.'
          stop
        endif
        pxys2(1,i)=pxys(1,j1)
        pxys2(2,i)=pxys(2,j1)
        pxys2(3,i)=pxys(1,j2)
        pxys2(4,i)=pxys(2,j2)
c        write(*,*) 'points:',(pxys2(j,i),j=1,4)
        do j=j1,j2
          write(*,*) '    ',pxys(1,j),pxys(2,j)
          if (pxys(1,j).gt.plonmax) plonmax=pxys(1,j)
          if (pxys(1,j).lt.plonmin) plonmin=pxys(1,j)
          if (pxys(2,j).gt.platmax) platmax=pxys(2,j)
          if (pxys(2,j).lt.platmin) platmin=pxys(2,j)
        enddo
        j1=j1+pnpts(i)
      enddo
      write(*,*) '#profiles:',pn
c     geographic range of profile lines
      write(*,*) 'range of profile',plonmin,plonmax,platmin,platmax

c      stop

c     convert km to degree using the mean latitude
      r8sum=0
      do i=1,nv
        vline=vlines(i)
        read(vline,*) loni,lati,veli
        lons(i)=loni
        lats(i)=lati
        vels(i)=veli
        r8sum=r8sum+lati
      enddo
      latmid=r8sum/nv
      write(*,*) 'mean laitude of velocity grid:',latmid
      x1=90
      y1=latmid
      x2=91
      y2=latmid
      call map_2points(90d0,latmid,91d0,latmid,0,1,0,0,
     &  kpd)
c       convert meter to km
      kpd=kpd*1d-3
      write(*,*) 'k.p.d:',kpd,' at',latmid,'N'


c      x1=91.670426448900002d0
c      y1=31.080217392000002d0
c      x2=91.670426448900002d0
c      y2=31.011278907099999d0
c      call map_2points(x1,y1,x2,y2,0,1,0,0,
c     &  kpd)
cc       convert meter to km
c      kpd=kpd*1d-3
c      write(*,*) 'k.p.d:',kpd,' at',x1,'E'
c
c      stop

c     loop through each velocity point
      do i=1,nv
c        vline=vlines(i)
c        write(*,*) i,vline(1:nblen(vline))
c        read(vline,*) loni,lati,veli
        loni=lons(i)
        lati=lats(i)
        veli=vels(i)

        c1(1)=loni
        c1(2)=lati

        if (loni.gt.plonmax.or.loni.lt.plonmin.or.
     +    lati.gt.platmax.or.lati.lt.platmin) then
          write(*,*) 'velocity point outside profile range',loni,lati
          goto 601
        endif

c     loop through each profile
        do j=1,pn
          a1(1)=pxys2(1,j)
          a1(2)=pxys2(2,j)
          b1(1)=pxys2(3,j)
          b1(2)=pxys2(4,j)
c     calcualte distance from velocity point to current profile

          call point_perp_line(a1,b1,c1,d1)
c          write(*,*) a1,b1,c1,d1

          call map_2points(c1(1),c1(2),d1(1),d1(2),0,1,0,0,
     +      d_v2p)
          d_v2p=d_v2p*1d-3
          d_v2ps(i)=d_v2p
c          write(*,*) 'd_v2p:',d_v2p

          if (d_v2p.le.p_wid) then
c            write(*,*) 'got one point for profile:',i,j
            vInp(i)=j
            plons(i)=d1(1)
            plats(i)=d1(2)
            vpCounts(j)=vpCounts(j)+1
            goto 601
          endif

c     end-of-loop-j
        enddo
c        stop

601     continue
c     end-of-loop-i
      enddo

      do i=1,pn
        if (vpCounts(i).eq.0) goto
        write(ofile,701) opath(1:nblen(opath)),path_sep(),i
        write(*,*) ofile(1:nblen(ofile))
701   format(2a,"vel_profile",i3.3,".psxy")
        call getlun(fid)
        open(unit=fid,file=ofile,iostat=ioerr)
        if (ioerr.ne.0) then
          write(*,*) '[]ERROR: cannot open output vfile!!'
          stop
        endif

        write(fid,'("* SRC: ",a)') vfile(1:nblen(vfile))
        write(fid,'("*PROG: ",a)') prog(1:nblen(prog))
        write(fid,'("* ver: ",a)') ver(1:nblen(ver))
        write(fid,'("*user: ",a)') user(1:nblen(user))
        write(fid,'("*run@: ",a)') hostname(1:nblen(hostname))
        write(fid,'("*  on: ",a)') date_time(1:nblen(date_time))
        write(fid,'(a)') '*model paramters:'
        write(fid,'(a)') '*'

        write(fid,702) 'dist_to_fault','velocity','dist_to_profile',
     +    'longitude','latitude','pLongitude','pLatitude'
702     format("*",7(1x,a15))

        do j=1,nv
          if (vInp(j).eq.i) then
            write(fid,703) d_v2fs(j),vels(j),d_v2ps(j),lons(j),lats(j),
     +        plons(j),plats(j)
          endif
        enddo
703     format(1x,7(1x,f15.6))

        close(fid)

c       next profile
602     continue
      enddo

      write(*,*) 'done'

      sec2=time()
      run_time_min=(sec2-sec1)/60
      run_time_sec=mod( sec2-sec1, 60)
      write(*,'(1x,"total running time: ",i5,
     +  " minutes and ",i3," seconds")') run_time_min,run_time_sec
      write(*,'(3a)') '|< done for ',vfile(1:nblen(vfile)),'   :)'
      stop
      END

