#!/bin/sh

# Name:
#   sh_s1_assemble_snap
#   

# Purpose:
#   +this program first combine two adjacent frames
#     one frame each line with leading blank column
#     Input sample:
#     # S1A_IW_SLC__1SSV_20141020T115800_20141020T115827_002913_0034D7_89AC.manifest.safe        0.9040404040404041
#     # S1A_IW_SLC__1SSV_20141020T115825_20141020T115852_002913_0034D7_F546.manifest.safe        1.0000000000000000
#     #^
#     #|
#  (blank first column)

# Example:
#   

# Modifications:
#   

# Algorigthm:
#   

# Dependency:
#   

PROG=sh_s1_assemble_snap

timestamp=`date | sed -e "s/ /_/g" | sed -e "s/:/-/g"`

path_old=`pwd`

usage(){
  echo "[$PROG]HELP: $PROG"
  echo "[$PROG]HELP:   [-file INPUT_FILE]"
  echo "[$PROG]HELP:   [-iw IW_TYPE]"
  echo "[$PROG]HELP:   [-roi PINS_FILE_KML]"
  echo "[$PROG]HELP:   [-raw0 RAW0_DIR]"
  echo "[$PROG]HELP:   [-raw RAW_DIR]"

  echo "[$PROG]HELP:   [-h|-help]"
  echo "[$PROG]HELP: e.g.,"
  echo "[$PROG]HELP:   ${PROG} "
}

if [ $# -lt 2 ]; then
  usage
  exit 1
fi

#temporary files used by this script
file_tmp_pair=`pwd`/_tmp_${PROG}_${timestamp}_pair
file_tmp_tiff_safe=`pwd`/_tmp_${PROG}_${timestamp}_tiff_safe
file_tmp_unzip=`pwd`/_tmp_${PROG}_${timestamp}_unzip
file_roi=`pwd`/pins #temporary ROI file

#default value for command-line parameters 
file_roi_kml=
file=
iw_typ=
path_raw0=`pwd`/raw0
path_raw=`pwd`/raw


while [ "$1" != "" ]; do
    case $1 in
        -file)
            file=$2
            ;;
        -iw)
            iw_typ=$2  
            ;;
        -roi)
            file_roi_kml=$2
            ;;
        -raw0)
            oldpath=`pwd`
            cd $2
            if [ $? -ne 0 ]; then
                echo "[$PROG]ERROR: invalid -raw0 value ($2) !!"
                cd $oldpath
                exit 1
            fi
            path_raw0=`pwd`
            cd $oldpath
            ;;
        -raw)
            oldpath=`pwd`
            cd $2
            if [ $? -ne 0 ]; then
                echo "[$PROG]ERROR: invalid -raw value ($2) !!"
                cd $oldpath
                exit 1
            fi
            path_raw=`pwd`
            cd $oldpath
            ;;
        -h|-help|--help)
            usage
            exit 1
            ;;
        *)
            echo "[$PROG]ERROR: invalid option ($1) !!"
            usage
            exit 1
            ;;
    esac
    
    shift 2
done


if [ "$file" == "" ]; then
    echo "[$PROG]ERROR: no input file specified!!"
    exit 1
fi

if [ "$iw_typ" == "" ]; then
    echo "[$PROG]ERROR: no subswath (iw1/iw2/iw3) specified!!"
    exit 1
fi

if [ "$file_roi_kml" != "" ]; then
    #convert ROI
    gmt kml2gmt $file_roi_kml |grep -v '>'  > $file_roi
    cat $file_roi | awk '{print "["PROG"]INRO:"$0}' PROG=$PROG 
fi

#S1A_IW_SLC__1SDV_20170327T000151_20170327T000218_015870_01A273_941C.manifest.safe
master_date=`grep '^ ' $file | head -1 | awk -F_ '{print substr($5,1,8)}'`
echo "[$PROG]INFO: master date is $master_date"
sh_sar_datetime_snap -f $file -o $file_tmp_pair -u $file_tmp_unzip -m $master_date



\rm -rf ${path_raw0} ${path_raw}
mkdir -p ${path_raw0} ${path_raw}
cd ${path_raw0}
pwd
echo "sh_s1_link_raworig $file_tmp_unzip $iw_typ"
sh_s1_link_raworig $file_tmp_unzip $iw_typ
echo "sh_s1_link_orb_ftk >& tiff_EOF.list"
sh_s1_link_orb_ftk >& tiff_EOF.list
echo "sh_s1_prep_prep $file_tmp_unzip $iw_typ"
sh_s1_prep_prep $file_tmp_unzip $iw_typ

ls -l *.tiff | sed -e 's/.tiff//g'> $file_tmp_tiff_safe

#exit


if [ "$file_roi_kml" != "" ]; then
    # get starting and ending azimuths
    pin1=`head -1 $file_roi | awk '{print $1,$2}'` 
    pin2=`tail -1 $file_roi | awk '{print $1,$2}'` 
fi


#mosaic 
while read safes; do
  nf=`echo $safes | awk '{print NF}'` 
  echo "combining $nf frames for $safes ..."
  files=
  for safe in $safes; do
    file_tiff_i=`grep $safe $file_tmp_tiff_safe | awk '{print $9}'`
    files="$files $file_tiff_i"
  done
  
  file1=`echo $files | awk '{print $1}'`
  file2=`echo $files | awk '{print $NF}'`
  echo file1 $file1
  echo file2 $file2
  tmp=`echo $file1 | awk -F- '{print $1"-"$2"-"$3"-"$4"-"$5}'`
  ofile=$tmp
  tmp=`echo $file2 | awk -F- '{print "-"$6}'`
  ofile="$ofile$tmp"
  tmp=`echo $file1 | awk -F- '{print "-"$7"-"$8"-"$9}'`
  ofile="$ofile$tmp"
  
  echo "output file: $ofile"
  #exit
  
  #clear exisiting output files
  \rm -rf ../${path_raw}/${ofile}.tiff ../${path_raw}/${ofile}.xml

  if [ $nf -eq 1 -a "$file_roi_kml" == "" ]; then
  #if [ $nf -eq 1 ]; then
    echo "[$PROG]INFO: link current file to the ${path_raw} directory"
    echo "[$PROG]INFO: ln -s ${file1}.tiff ${path_raw}/"
    echo "cd ${path_raw}/ && ln -s ${path_raw0}/${file1}.tiff ./" | sh
    echo "cd ${path_raw}/ && ln -s ${path_raw0}/${file1}.xml ./" | sh
    continue
  fi
  
  echo "[$PROG]INFO: combining $nf frames for $day ..."
  
  orb1=`grep '^ ' tiff_EOF.list | grep $file1 | awk '{print $2}'`
  orb2=`grep '^ ' tiff_EOF.list | grep $file2 | awk '{print $2}'`
  
  
  echo orb1 is $orb1
  pwd
  
  azi1='0s'
  azi2='0s'
  
  if [ "$file_roi_kml" != "" ]; then
  
      echo pin1 is $pin1
      echo pin2 is $pin2
      echo file1 is $file1
      
      \rm -rf tmp1
      echo make_s1a_tops ${file1}.xml ${file1}.tiff tmp1 0
      make_s1a_tops ${file1}.xml ${file1}.tiff tmp1 0
      #exit
      echo ext_orb_s1a tmp1.PRM $orb1 tmp1
      ext_orb_s1a tmp1.PRM $orb1 tmp1
      tmpazi1=`echo $pin1 | awk '{print $1,$2,0}' | SAT_llt2rat tmp1.PRM 1 |tail -1 | awk '{printf("%d",$2+0.5)}'`
      echo  tmpazi1 is $tmpazi1
      echo $pin1 | awk '{print $1,$2,0}' | SAT_llt2rat tmp1.PRM 1
      #exit
      ## refinie the calculation in case the pin is far away from the starting frame. (baseline error)
      shift_atime_PRM.csh tmp1.PRM $tmpazi1
      azi1=`echo $pin1 | awk '{print $1,$2,0}' | SAT_llt2rat tmp1.PRM 1 | awk '{printf("%d",$2+0.5 + '$tmpazi1')}'`
      azi2=`echo $pin2 | awk '{print $1,$2,0}' | SAT_llt2rat tmp1.PRM 1 | awk '{printf("%d",$2+0.5 + '$tmpazi1')}'`
      echo  azi1 is $azi1
      echo  azi2 is $azi2
  fi

  
  echo assemble_tops $azi1 $azi2 $files ${path_raw}/$ofile
  echo assemble_tops $azi1 $azi2 $files ${path_raw}/$ofile | sh
  #exit
done < $file_tmp_pair

echo "[$PROG]INRO: link orbit files to ${path_raw} directory"
cd ${path_raw}
sh_s1_link_orb_ftk >& tiff_EOF.list
grep '^ ' ${path_raw}/tiff_EOF.list | sed -e 's/.tiff /:/g'> ${path_raw}/data.in
cd $path_old

echo "[$PROG]INFO: clean temporary files ..."
echo "\rm -f $file_tmp_pair $file_tmp_tiff_safe $file_tmp_unzip"

echo "[$PROG]INFO: done."